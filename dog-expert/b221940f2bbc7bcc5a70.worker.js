/*! For license information please see b221940f2bbc7bcc5a70.worker.js.LICENSE.txt */
!function(t){var e={};function n(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(r,s,function(e){return t[e]}.bind(null,s));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=69)}([function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"assertParamsValid",(function(){return Lt})),n.d(r,"maskToAxes",(function(){return Bt})),n.d(r,"computeOutShape",(function(){return Pt})),n.d(r,"stridesWithElidedDims",(function(){return Wt})),n.d(r,"startIndicesWithElidedDims",(function(){return Gt})),n.d(r,"stopIndicesWithElidedDims",(function(){return Ht})),n.d(r,"stridesForAxis",(function(){return qt})),n.d(r,"startForAxis",(function(){return Kt})),n.d(r,"stopForAxis",(function(){return Xt})),n.d(r,"isSliceContinous",(function(){return Yt})),n.d(r,"computeFlatOffset",(function(){return Jt})),n.d(r,"parseSliceParams",(function(){return Zt}));var s={};n.r(s),n.d(s,"segOpComputeOptimalWindowSize",(function(){return tn})),n.d(s,"computeOutShape",(function(){return en})),n.d(s,"collectGatherOpShapeInfo",(function(){return nn}));var a={};n.r(a),n.d(a,"TEST_EPSILON_FLOAT16",(function(){return wr})),n.d(a,"expectArraysClose",(function(){return vr})),n.d(a,"testEpsilon",(function(){return Or})),n.d(a,"expectPromiseToFail",(function(){return Sr})),n.d(a,"expectArraysEqual",(function(){return Cr})),n.d(a,"expectNumbersClose",(function(){return Nr})),n.d(a,"expectValuesInRange",(function(){return Ar})),n.d(a,"expectArrayBuffersEqual",(function(){return Er}));var i={};n.r(i),n.d(i,"validateUpdateShape",(function(){return Gs})),n.d(i,"validateInput",(function(){return Hs})),n.d(i,"calculateShapes",(function(){return qs}));var o={};n.r(o),n.d(o,"conv2d",(function(){return ia})),n.d(o,"depthwiseConv2d",(function(){return la})),n.d(o,"matMul",(function(){return ca}));var u={};n.r(u),n.d(u,"abs",(function(){return O})),n.d(u,"acos",(function(){return k})),n.d(u,"acosh",(function(){return S})),n.d(u,"add",(function(){return N})),n.d(u,"addN",(function(){return A})),n.d(u,"all",(function(){return L})),n.d(u,"any",(function(){return B})),n.d(u,"argMax",(function(){return P})),n.d(u,"argMin",(function(){return W})),n.d(u,"asin",(function(){return V})),n.d(u,"asinh",(function(){return U})),n.d(u,"atan",(function(){return G})),n.d(u,"atan2",(function(){return H})),n.d(u,"atanh",(function(){return q})),n.d(u,"avgPool",(function(){return ut})),n.d(u,"avgPool3d",(function(){return Rt})),n.d(u,"basicLSTMCell",(function(){return ee})),n.d(u,"batchToSpaceND",(function(){return ne})),n.d(u,"batchNorm",(function(){return se})),n.d(u,"batchNorm2d",(function(){return ae})),n.d(u,"batchNorm3d",(function(){return ie})),n.d(u,"batchNorm4d",(function(){return oe})),n.d(u,"broadcastTo",(function(){return le})),n.d(u,"buffer",(function(){return ce})),n.d(u,"cast",(function(){return K})),n.d(u,"ceil",(function(){return he})),n.d(u,"clipByValue",(function(){return de})),n.d(u,"clone",(function(){return ue})),n.d(u,"complex",(function(){return pe.a})),n.d(u,"concat",(function(){return _t})),n.d(u,"concat1d",(function(){return fe})),n.d(u,"concat2d",(function(){return me})),n.d(u,"concat3d",(function(){return ge})),n.d(u,"concat4d",(function(){return be})),n.d(u,"conv1d",(function(){return xe})),n.d(u,"conv2d",(function(){return ye})),n.d(u,"conv2dTranspose",(function(){return ve})),n.d(u,"conv3d",(function(){return Oe})),n.d(u,"conv3dTranspose",(function(){return Se})),n.d(u,"cos",(function(){return Ce})),n.d(u,"cosh",(function(){return Ne})),n.d(u,"cumsum",(function(){return Ie})),n.d(u,"depthToSpace",(function(){return Ae})),n.d(u,"depthwiseConv2d",(function(){return Ee})),n.d(u,"diag",(function(){return Te})),n.d(u,"dilation2d",(function(){return Re})),n.d(u,"div",(function(){return je})),n.d(u,"divNoNan",(function(){return Be})),n.d(u,"dot",(function(){return Pe})),n.d(u,"elu",(function(){return We})),n.d(u,"equal",(function(){return Me})),n.d(u,"erf",(function(){return Ve})),n.d(u,"exp",(function(){return Ue})),n.d(u,"expandDims",(function(){return Ge})),n.d(u,"expm1",(function(){return He})),n.d(u,"eye",(function(){return Ke})),n.d(u,"fft",(function(){return Xe})),n.d(u,"fill",(function(){return Ye})),n.d(u,"floor",(function(){return Je})),n.d(u,"floorDiv",(function(){return $e})),n.d(u,"gather",(function(){return rn})),n.d(u,"greater",(function(){return sn})),n.d(u,"greaterEqual",(function(){return an})),n.d(u,"ifft",(function(){return on})),n.d(u,"imag",(function(){return un})),n.d(u,"irfft",(function(){return pn})),n.d(u,"isFinite",(function(){return fn})),n.d(u,"isInf",(function(){return mn})),n.d(u,"isNaN",(function(){return gn})),n.d(u,"leakyRelu",(function(){return yn})),n.d(u,"less",(function(){return xn})),n.d(u,"lessEqual",(function(){return wn})),n.d(u,"linspace",(function(){return vn})),n.d(u,"localResponseNormalization",(function(){return On})),n.d(u,"log",(function(){return kn})),n.d(u,"log1p",(function(){return Sn})),n.d(u,"logSigmoid",(function(){return Dn})),n.d(u,"logSoftmax",(function(){return zn})),n.d(u,"logSumExp",(function(){return Ln})),n.d(u,"logicalAnd",(function(){return Bn})),n.d(u,"logicalNot",(function(){return Pn})),n.d(u,"logicalOr",(function(){return Wn})),n.d(u,"logicalXor",(function(){return Vn})),n.d(u,"matMul",(function(){return Ft})),n.d(u,"max",(function(){return _n})),n.d(u,"maxPool",(function(){return Un})),n.d(u,"maxPool3d",(function(){return Gn})),n.d(u,"maxPoolWithArgmax",(function(){return Hn})),n.d(u,"maximum",(function(){return bn})),n.d(u,"mean",(function(){return Xn})),n.d(u,"min",(function(){return Yn})),n.d(u,"minimum",(function(){return Jn})),n.d(u,"mod",(function(){return Zn})),n.d(u,"moments",(function(){return tr})),n.d(u,"mul",(function(){return Mt})),n.d(u,"multiRNNCell",(function(){return er})),n.d(u,"multinomial",(function(){return nr})),n.d(u,"neg",(function(){return $n})),n.d(u,"notEqual",(function(){return rr})),n.d(u,"oneHot",(function(){return sr})),n.d(u,"ones",(function(){return Kn})),n.d(u,"onesLike",(function(){return ar})),n.d(u,"outerProduct",(function(){return ir})),n.d(u,"pad",(function(){return or})),n.d(u,"pad1d",(function(){return ur})),n.d(u,"pad2d",(function(){return lr})),n.d(u,"pad3d",(function(){return cr})),n.d(u,"pad4d",(function(){return hr})),n.d(u,"pool",(function(){return pr})),n.d(u,"pow",(function(){return fr})),n.d(u,"prelu",(function(){return mr})),n.d(u,"print",(function(){return gr})),n.d(u,"prod",(function(){return br})),n.d(u,"rand",(function(){return yr})),n.d(u,"randomGamma",(function(){return jr})),n.d(u,"randomNormal",(function(){return Dr})),n.d(u,"randomUniform",(function(){return _r})),n.d(u,"range",(function(){return Mr})),n.d(u,"real",(function(){return ln})),n.d(u,"reciprocal",(function(){return zr})),n.d(u,"relu",(function(){return Lr})),n.d(u,"relu6",(function(){return Br})),n.d(u,"reshape",(function(){return M})),n.d(u,"reverse",(function(){return cn})),n.d(u,"reverse1d",(function(){return Pr})),n.d(u,"reverse2d",(function(){return Wr})),n.d(u,"reverse3d",(function(){return Vr})),n.d(u,"reverse4d",(function(){return Ur})),n.d(u,"rfft",(function(){return qr})),n.d(u,"round",(function(){return Kr})),n.d(u,"rsqrt",(function(){return Xr})),n.d(u,"scalar",(function(){return dn})),n.d(u,"selu",(function(){return Yr})),n.d(u,"separableConv2d",(function(){return Jr})),n.d(u,"setdiff1dAsync",(function(){return Zr})),n.d(u,"sigmoid",(function(){return zt})),n.d(u,"sign",(function(){return Qr})),n.d(u,"sin",(function(){return ts})),n.d(u,"sinh",(function(){return es})),n.d(u,"slice",(function(){return Qt})),n.d(u,"slice1d",(function(){return ns})),n.d(u,"slice2d",(function(){return rs})),n.d(u,"slice3d",(function(){return ss})),n.d(u,"slice4d",(function(){return as})),n.d(u,"softmax",(function(){return is})),n.d(u,"softplus",(function(){return jn})),n.d(u,"spaceToBatchND",(function(){return dr})),n.d(u,"split",(function(){return Hr})),n.d(u,"sqrt",(function(){return os})),n.d(u,"square",(function(){return Qn})),n.d(u,"squaredDifference",(function(){return us})),n.d(u,"squeeze",(function(){return ls})),n.d(u,"stack",(function(){return cs})),n.d(u,"step",(function(){return hs})),n.d(u,"stridedSlice",(function(){return ds})),n.d(u,"sub",(function(){return Fn})),n.d(u,"sum",(function(){return Mn})),n.d(u,"tan",(function(){return ps})),n.d(u,"tanh",(function(){return te})),n.d(u,"tensor",(function(){return Dt.a})),n.d(u,"tensor1d",(function(){return Fr})),n.d(u,"tensor2d",(function(){return fs})),n.d(u,"tensor3d",(function(){return ms})),n.d(u,"tensor4d",(function(){return gs})),n.d(u,"tensor5d",(function(){return bs})),n.d(u,"tensor6d",(function(){return ys})),n.d(u,"tile",(function(){return qe})),n.d(u,"topk",(function(){return xs})),n.d(u,"truncatedNormal",(function(){return ws})),n.d(u,"unsortedSegmentSum",(function(){return vs})),n.d(u,"unstack",(function(){return Os})),n.d(u,"variable",(function(){return ks})),n.d(u,"where",(function(){return ze})),n.d(u,"whereAsync",(function(){return Cs})),n.d(u,"zeros",(function(){return qn})),n.d(u,"zerosLike",(function(){return Le})),n.d(u,"booleanMaskAsync",(function(){return Ns})),n.d(u,"equalStrict",(function(){return Is})),n.d(u,"greaterEqualStrict",(function(){return As})),n.d(u,"greaterStrict",(function(){return Es})),n.d(u,"lessEqualStrict",(function(){return Ts})),n.d(u,"lessStrict",(function(){return Rs})),n.d(u,"notEqualStrict",(function(){return $s})),n.d(u,"addStrict",(function(){return js})),n.d(u,"divStrict",(function(){return Ds})),n.d(u,"maximumStrict",(function(){return _s})),n.d(u,"minimumStrict",(function(){return Fs})),n.d(u,"modStrict",(function(){return Ms})),n.d(u,"mulStrict",(function(){return zs})),n.d(u,"powStrict",(function(){return Ls})),n.d(u,"squaredDifferenceStrict",(function(){return Bs})),n.d(u,"subStrict",(function(){return Ps})),n.d(u,"transpose",(function(){return z})),n.d(u,"norm",(function(){return Vs})),n.d(u,"movingAverage",(function(){return Us})),n.d(u,"scatterND",(function(){return Ks})),n.d(u,"sparseToDense",(function(){return Xs})),n.d(u,"gatherND",(function(){return Ys})),n.d(u,"dropout",(function(){return Js})),n.d(u,"enclosingPowerOfTwo",(function(){return Zs})),n.d(u,"cosineWindow",(function(){return Qs})),n.d(u,"inTopKAsync",(function(){return ta})),n.d(u,"op",(function(){return v.a})),n.d(u,"image",(function(){return Za})),n.d(u,"linalg",(function(){return Qa})),n.d(u,"losses",(function(){return ti})),n.d(u,"spectral",(function(){return Ya})),n.d(u,"fused",(function(){return o})),n.d(u,"signal",(function(){return Ja}));var l={};n.r(l),n.d(l,"copyModel",(function(){return pi})),n.d(l,"listModels",(function(){return hi})),n.d(l,"moveModel",(function(){return fi})),n.d(l,"removeModel",(function(){return di})),n.d(l,"browserFiles",(function(){return zi})),n.d(l,"browserHTTPRequest",(function(){return Ki})),n.d(l,"concatenateArrayBuffers",(function(){return ei.d})),n.d(l,"decodeWeights",(function(){return ei.e})),n.d(l,"encodeWeights",(function(){return ei.f})),n.d(l,"fromMemory",(function(){return Ji})),n.d(l,"getLoadHandlers",(function(){return ii})),n.d(l,"getModelArtifactsInfoForJSON",(function(){return ei.g})),n.d(l,"getSaveHandlers",(function(){return ai})),n.d(l,"http",(function(){return qi})),n.d(l,"isHTTPScheme",(function(){return Gi})),n.d(l,"loadWeights",(function(){return Wi})),n.d(l,"registerLoadRouter",(function(){return si})),n.d(l,"registerSaveRouter",(function(){return ri})),n.d(l,"weightsLoaderFactory",(function(){return Vi})),n.d(l,"withSaveHandler",(function(){return Zi}));var c={};n.r(c),n.d(c,"confusionMatrix",(function(){return Qi}));var h={};n.r(h),n.d(h,"toPixels",(function(){return no})),n.d(h,"fromPixels",(function(){return ro}));var d={};n.r(d),n.d(d,"prepareAndValidate",(function(){return so}));var p={};n.r(p),n.d(p,"Serializable",(function(){return ao})),n.d(p,"SerializationMap",(function(){return io})),n.d(p,"registerClass",(function(){return oo}));var f={};n.r(f),n.d(f,"axesAreInnerMostDims",(function(){return E})),n.d(f,"combineLocations",(function(){return T})),n.d(f,"computeOutAndReduceShapes",(function(){return R})),n.d(f,"expandShapeToKeepDim",(function(){return $})),n.d(f,"assertAxesAreInnerMostDims",(function(){return j})),n.d(f,"getAxesPermutation",(function(){return D})),n.d(f,"getUndoAxesPermutation",(function(){return _})),n.d(f,"getInnerMostAxes",(function(){return F})),n.d(f,"getBroadcastDims",(function(){return De})),n.d(f,"getReductionAxes",(function(){return _e})),n.d(f,"assertAndGetBroadcastShape",(function(){return Fe})),n.d(f,"assertParamsConsistent",(function(){return $t})),n.d(f,"computeOutShape",(function(){return jt})),n.d(f,"computeDilation2DInfo",(function(){return X})),n.d(f,"computePool2DInfo",(function(){return Y})),n.d(f,"computePool3DInfo",(function(){return J})),n.d(f,"computeConv2DInfo",(function(){return Z})),n.d(f,"computeConv3DInfo",(function(){return Q})),n.d(f,"computeDefaultPad",(function(){return tt})),n.d(f,"tupleValuesAreOne",(function(){return at})),n.d(f,"eitherStridesOrDilationsAreOne",(function(){return it})),n.d(f,"convertConv2DDataFormat",(function(){return ot})),n.d(f,"getFusedDyActivation",(function(){return na})),n.d(f,"getFusedBiasGradient",(function(){return ra})),n.d(f,"applyActivation",(function(){return sa})),n.d(f,"shouldFuse",(function(){return aa})),n.d(f,"PARALLELIZE_THRESHOLD",(function(){return Ze})),n.d(f,"computeOptimalWindowSize",(function(){return Qe})),n.d(f,"upcastType",(function(){return bo.c})),n.d(f,"getImageCenter",(function(){return vo})),n.d(f,"getReshaped",(function(){return Oo})),n.d(f,"getPermuted",(function(){return ko})),n.d(f,"getReshapedPermuted",(function(){return So})),n.d(f,"getSliceBeginCoords",(function(){return Co})),n.d(f,"getSliceSize",(function(){return No})),n.d(f,"prepareAndValidate",(function(){return so})),n.d(f,"validateUpdateShape",(function(){return Gs})),n.d(f,"validateInput",(function(){return Hs})),n.d(f,"calculateShapes",(function(){return qs})),n.d(f,"SELU_SCALEALPHA",(function(){return Io})),n.d(f,"SELU_SCALE",(function(){return Ao})),n.d(f,"ERF_P",(function(){return Eo})),n.d(f,"ERF_A1",(function(){return To})),n.d(f,"ERF_A2",(function(){return Ro})),n.d(f,"ERF_A3",(function(){return $o})),n.d(f,"ERF_A4",(function(){return jo})),n.d(f,"ERF_A5",(function(){return Do})),n.d(f,"warn",(function(){return _o})),n.d(f,"log",(function(){return Fo})),n.d(f,"mergeRealAndImagArrays",(function(){return Mo})),n.d(f,"splitRealAndImagArrays",(function(){return zo})),n.d(f,"complexWithEvenIndex",(function(){return Lo})),n.d(f,"complexWithOddIndex",(function(){return Bo})),n.d(f,"getComplexWithIndex",(function(){return Po})),n.d(f,"assignToTypedArray",(function(){return Wo})),n.d(f,"exponents",(function(){return Vo})),n.d(f,"exponent",(function(){return Uo})),n.d(f,"prepareSplitSize",(function(){return Gr})),n.d(f,"segment_util",(function(){return s})),n.d(f,"castTensor",(function(){return Go})),n.d(f,"reshapeTensor",(function(){return Ho})),n.d(f,"linspaceImpl",(function(){return qo}));var m={};n.r(m),n.d(m,"nonMaxSuppressionV3Impl",(function(){return Oa})),n.d(m,"nonMaxSuppressionV4Impl",(function(){return ka})),n.d(m,"nonMaxSuppressionV5Impl",(function(){return Sa})),n.d(m,"split",(function(){return Xo})),n.d(m,"tile",(function(){return Yo})),n.d(m,"topkImpl",(function(){return Jo})),n.d(m,"whereImpl",(function(){return Ss}));var g=n(6),b=(n(50),n(9));class y{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}Object(b.c)().get("IS_BROWSER")&&Object(b.c)().setPlatform("browser",new y);n(51);var x=n(4),w=n(2),v=n(5);const O=Object(v.a)({abs_:function(t){const e=Object(w.a)(t,"x","abs"),n={x:e};return g.a.runKernelFunc((t,n)=>(n([e]),"complex64"===e.dtype?t.complexAbs(e):t.abs(e)),n,null,x.a)}});const k=Object(v.a)({acos_:function(t){const e=Object(w.a)(t,"x","acos"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.acos(e);return n([e]),r},n,null,x.b)}});const S=Object(v.a)({acosh_:function(t){const e=Object(w.a)(t,"x","acosh"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.acosh(e);return n([e]),r},n,null,x.c)}});var C=n(8);const N=Object(v.a)({add_:function(t,e){let n=Object(w.a)(t,"a","add"),r=Object(w.a)(e,"b","add");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.add(n,r);return e([n,r]),s},s,null,x.d)}});var I=n(1);const A=Object(v.a)({addN_:function(t){I.assert(Array.isArray(t),()=>"The argument passed to tf.addN() must be a list of tensors"),I.assert(t.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+t.length);const e=t.map((t,e)=>Object(w.a)(t,"tensors"+e,"addN")),n=e[0];e.forEach(t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(t=>{if(!I.arraysEqual(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const r=e;return g.a.runKernelFunc((t,n)=>{const r=t.addN(e);return n(e),r},r,null,x.e)}});function E(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function T(t,e,n){const r=t.length+e.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(t[a++]):s.push(e[i++]);return s}function R(t,e){const n=[],r=t.length;for(let s=0;s<r;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map(e=>t[e])]}function $(t,e){return T(t,e.map(t=>1),e)}function j(t,e,n){I.assert(E(e,n),()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`)}function D(t,e){if(E(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach(t=>n.push(t)),n}function _(t){return t.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function F(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}const M=Object(v.a)({reshape_:function(t,e){const n=Object(w.a)(t,"x","reshape",null);e=I.inferFromImplicitShape(e,n.size),I.assert(n.size===I.sizeFromShape(e),()=>"new shape and old shape must have the same number of elements.");const r={x:n},s={shape:e};return g.a.runKernelFunc((t,r)=>(r([n]),t.reshape(n,e)),r,null,x.gc,s)}});const z=Object(v.a)({transpose_:function(t,e){const n=Object(w.a)(t,"x","transpose");if(null==e&&(e=n.shape.map((t,e)=>e).reverse()),I.assert(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`),e.forEach(t=>{I.assert(t>=0&&t<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e)}),n.rank<=1)return n.clone();const r={x:n},s={perm:e};return g.a.runKernelFunc(t=>t.transpose(n,e),r,null,x.Nc,s)}});const L=Object(v.a)({all_:function(t,e=null,n=!1){let r=Object(w.a)(t,"x","all","bool");const s={x:r},a={axis:e,keepDims:n};return g.a.runKernelFunc(t=>{const s=Object(I.parseAxisParam)(e,r.shape);let a=s;const i=D(a,r.rank);null!=i&&(r=z(r,i),a=F(a.length,r.rank));const o=t.all(r,a);if(n){const t=$(o.shape,s);return M(o,t)}return o},s,null,x.f,a)}});const B=Object(v.a)({any_:function(t,e=null,n=!1){let r=Object(w.a)(t,"x","any","bool");const s={x:r},a={axis:e,keepDims:n};return g.a.runKernelFunc(t=>{const s=Object(I.parseAxisParam)(e,r.shape);let a=s;const i=D(a,r.rank);null!=i&&(r=z(r,i),a=F(a.length,r.rank));const o=t.any(r,a);if(n){const t=$(o.shape,s);return M(o,t)}return o},s,null,x.g,a)}});const P=Object(v.a)({argMax_:function(t,e=0){let n=Object(w.a)(t,"x","argMax");const r={x:n},s={axis:e};return g.a.runKernelFunc((t,r)=>{r([n]);let s=I.parseAxisParam(e,n.shape);const a=D(s,n.rank);return null!=a&&(n=z(n,a),s=F(s.length,n.rank)),t.argMax(n,s[0])},r,null,x.h,s)}});const W=Object(v.a)({argMin_:function(t,e=0){let n=Object(w.a)(t,"x","argMin");const r={x:n},s={axis:e};return g.a.runKernelFunc((t,r)=>{r([n]),null==e&&(e=0);let s=I.parseAxisParam(e,n.shape);const a=D(s,n.rank);return null!=a&&(n=z(n,a),s=F(s.length,n.rank)),t.argMin(n,s[0])},r,null,x.i,s)}});const V=Object(v.a)({asin_:function(t){const e=Object(w.a)(t,"x","asin"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.asin(e);return n([e]),r},n,null,x.j)}});const U=Object(v.a)({asinh_:function(t){const e=Object(w.a)(t,"x","asinh"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.asinh(e);return n([e]),r},n,null,x.k)}});const G=Object(v.a)({atan_:function(t){const e=Object(w.a)(t,"x","atan"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.atan(e);return n([e]),r},n,null,x.l)}});const H=Object(v.a)({atan2_:function(t,e){let n=Object(w.a)(t,"a","atan2"),r=Object(w.a)(e,"b","atan2");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.atan2(n,r);return e([n,r]),s},s,null,x.m)}});const q=Object(v.a)({atanh_:function(t){const e=Object(w.a)(t,"x","atanh"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.atanh(e);return n([e]),r},n,null,x.n)}});const K=Object(v.a)({cast_:function(t,e){const n=Object(w.a)(t,"x","cast");if(!I.isValidDtype(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:e};return g.a.runKernelFunc(t=>t.cast(n,e),r,null,x.v,s)}});function X(t,e,n,r,s="NHWC",a){return Z(t,[...e,t[3]],n,a,r,null,null,ot(s))}function Y(t,e,n,r,s,a,i="channelsLast"){const[o,u]=et(e);let l;if("channelsLast"===i)l=[o,u,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);l=[o,u,t[1],t[1]]}return Z(t,l,n,r,s,a,!1,i)}function J(t,e,n,r,s,a,i="NDHWC"){const[o,u,l]=nt(e);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,u,l,t[4],t[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,u,l,t[1],t[1]]}return Q(t,c,n,r,s,!1,h,a)}function Z(t,e,n,r,s,a,i=!1,o="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,h]=t;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[u,h,l,c]=t}const[d,p,,f]=e,[m,g]=et(n),[b,y]=et(r),x=rt(d,b),w=rt(p,y),{padInfo:v,outHeight:O,outWidth:k}=function(t,e,n,r,s,a,i,o,u){let l,c,h;if("number"==typeof t){l={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=tt(t,e,n));const a=t[0],i=t[1],o=st((a-e+2*r)/n+1,s);I.assert(I.isInt(o),()=>`The output # of rows (${o}) must be an integer. Change the stride and/or zero pad parameters`);const u=st((i-e+2*r)/n+1,s);return I.assert(I.isInt(u),()=>`The output # of columns (${u}) must be an integer. Change the stride and/or zero pad parameters`),[o,u]}([e,n],a,r,t,o);c=s[0],h=s[1]}else if("same"===t){c=Math.ceil(e/r),h=Math.ceil(n/s);const t=Math.max(0,(c-1)*r+a-e),o=Math.max(0,(h-1)*s+i-n),u=Math.floor(t/2),d=t-u,p=Math.floor(o/2);l={top:u,bottom:d,left:p,right:o-p,type:"SAME"}}else if("valid"===t)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);{const d="channelsLast"===u?t[1][0]:t[2][0],p="channelsLast"===u?t[1][1]:t[2][1],f="channelsLast"===u?t[2][0]:t[3][0],m="channelsLast"===u?t[2][1]:t[3][1];l={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},c=st((e-a+d+p)/r+1,o),h=st((n-i+f+m)/s+1,o)}}return{padInfo:l,outHeight:c,outWidth:h}}(s,l,c,m,g,x,w,a,o),S=i?f*h:f;let C;return"channelsFirst"===o?C=[u,S,O,k]:"channelsLast"===o&&(C=[u,O,k,S]),{batchSize:u,dataFormat:o,inHeight:l,inWidth:c,inChannels:h,outHeight:O,outWidth:k,outChannels:S,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:b,dilationWidth:y,inShape:t,outShape:C,filterShape:e}}function Q(t,e,n,r,s,a=!1,i="channelsLast",o){let[u,l,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,h,d]=t;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[u,d,l,c,h]=t}const[p,f,m,,g]=e,[b,y,x]=nt(n),[w,v,O]=nt(r),k=rt(p,w),S=rt(f,v),C=rt(m,O),{padInfo:N,outDepth:A,outHeight:E,outWidth:T}=function(t,e,n,r,s,a,i,o,u,l,c){let h,d,p,f;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const a=function(t,e,n,r,s,a){null==s&&(s=tt(t,e,r));const i=t[0],o=t[1],u=t[2],l=st((i-e+2*s)/r+1,a);I.assert(I.isInt(l),()=>`The output # of depths (${l}) must be an integer. Change the stride and/or zero pad parameters`);const c=st((o-e+2*s)/r+1,a);I.assert(I.isInt(c),()=>`The output # of rows (${c}) must be an integer. Change the stride and/or zero pad parameters`);const h=st((u-e+2*s)/r+1,a);return I.assert(I.isInt(h),()=>`The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`),[l,c,h,n]}([e,n,r,1],o,1,s,t,c);d=a[0],p=a[1],f=a[2]}else if("same"===t){d=Math.ceil(e/s),p=Math.ceil(n/a),f=Math.ceil(r/i);const t=(d-1)*s+o-e,c=(p-1)*a+u-n,m=(f-1)*i+l-r,g=Math.floor(t/2),b=t-g,y=Math.floor(c/2),x=c-y,w=Math.floor(m/2);h={top:y,bottom:x,left:w,right:m-w,front:g,back:b,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((e-o+1)/s),p=Math.ceil((n-u+1)/a),f=Math.ceil((r-l+1)/i)}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(s,l,c,h,b,y,x,k,S,C,o),R=a?g*d:g;let $;return"channelsFirst"===i?$=[u,R,A,E,T]:"channelsLast"===i&&($=[u,A,E,T,R]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:c,inWidth:h,inChannels:d,outDepth:A,outHeight:E,outWidth:T,outChannels:R,padInfo:N,strideDepth:b,strideHeight:y,strideWidth:x,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:k,effectiveFilterHeight:S,effectiveFilterWidth:C,dilationDepth:w,dilationHeight:v,dilationWidth:O,inShape:t,outShape:$,filterShape:e}}function tt(t,e,n,r=1){const s=rt(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}function et(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function nt(t){return"number"==typeof t?[t,t,t]:t}function rt(t,e){return e<=1?t:t+(t-1)*(e-1)}function st(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function at(t){const[e,n,r]=et(t);return 1===e&&1===n&&1===r}function it(t,e){return at(t)||at(e)}function ot(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}const ut=Object(v.a)({avgPool_:function(t,e,n,r,s){const a=Object(w.a)(t,"x","avgPool","float32");I.assert(it(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=M(a,[1,a.shape[0],a.shape[1],a.shape[2]])),I.assert(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=s&&I.assert(I.isInt(r),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const u={x:i},l={filterSize:e,strides:n,pad:r,dimRoundingMode:s};let c=g.a.runKernelFunc((t,a)=>{const o=Y(i.shape,e,n,1,r,s);return a([i]),1===o.filterWidth&&1===o.filterHeight&&I.arraysEqual(o.inShape,o.outShape)?i.clone():t.avgPool(i,o)},u,null,x.o,l);return c=K(c,a.dtype),o?M(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});var lt=n(7);function ct(){Object(b.c)().set("PROD",!0)}function ht(){Object(b.c)().set("DEBUG",!0)}function dt(){Object(b.c)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function pt(t){Object(b.c)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function ft(){g.a.disposeVariables()}function mt(){return g.a}function gt(){return g.a.memory()}function bt(t){return g.a.profile(t)}function yt(t,e){return g.a.tidy(t,e)}function xt(t){Object(C.getTensorsInContainer)(t).forEach(t=>t.dispose())}function wt(t){return g.a.keep(t)}function vt(t){return g.a.time(t)}function Ot(t){return g.a.setBackend(t)}function kt(){return g.a.ready()}function St(){return g.a.backendName}function Ct(t){g.a.removeBackend(t)}function Nt(t){return g.a.findBackend(t)}function It(t){return g.a.findBackendFactory(t)}function At(t,e,n=1){return g.a.registerBackend(t,e,n)}function Et(){return g.a.backend}function Tt(t,e){Object(b.c)().setPlatform(t,e)}Object(lt.d)(pt);const Rt=Object(v.a)({avgPool3d_:function(t,e,n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:pt("dilations is deprecated, this field will be gone in v3.0.0.");const o=Object(w.a)(t,"x","avgPool3d","float32");let u=o,l=!1;4===o.rank&&(l=!0,u=M(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),I.assert(5===u.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`),I.assert("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),I.assert(it(n,i),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&I.assert(I.isInt(r),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c={x:u},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i};let d=g.a.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const l=J(u.shape,e,n,i,r,s,a);return o([u]),t.avgPool3d(u,l)},c,null,x.p,h);return d=K(d,u.dtype),l?M(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});function $t(t,e){const n=t[0].length;t.forEach((t,e)=>{I.assert(t.length===n,()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`)}),I.assert(e>=0&&e<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=t[0];t.forEach((t,s)=>{for(let a=0;a<n;a++)I.assert(a===e||t[a]===r[a],()=>`Error in concat${n}D: Shape of tensors[${s}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`)})}function jt(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}var Dt=n(14);const _t=Object(v.a)({concat_:function(t,e=0){Object(I.assert)(t.length>=1,()=>"Pass at least one tensor to concat");let n=Object(w.b)(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)});const r=Object(I.parseAxisParam)(e,n[0].shape)[0],s=jt(n.map(t=>t.shape),r);if(0===Object(I.sizeFromShape)(s))return Object(Dt.a)([],s);if(n=n.filter(t=>t.size>0),1===n.length)return n[0];$t(n.map(t=>t.shape),r);const a=n,i={axis:e};return g.a.runKernelFunc((t,e)=>{const s=t.concat(n,r);return e(n),s},a,null,x.z,i)}});const Ft=Object(v.a)({matMul_:function(t,e,n=!1,r=!1){let s=Object(w.a)(t,"a","matMul"),a=Object(w.a)(e,"b","matMul");[s,a]=Object(C.makeTypesMatch)(s,a),I.assert(s.rank>=2&&a.rank>=2&&s.rank===a.rank,()=>`Error in matMul: inputs must have the same rank of at least 2, got ranks ${s.rank} and ${a.rank}.`);const i=n?s.shape[s.rank-2]:s.shape[s.rank-1],o=r?a.shape[a.rank-1]:a.shape[a.rank-2],u=n?s.shape[s.rank-1]:s.shape[s.rank-2],l=r?a.shape[a.rank-2]:a.shape[a.rank-1],c=s.shape.slice(0,-2),h=a.shape.slice(0,-2),d=I.sizeFromShape(c),p=I.sizeFromShape(h);I.assert(I.arraysEqual(c,h),()=>`Error in matMul: outer dimensions (${c}) and (${h}) of Tensors with shapes ${s.shape} and `+a.shape+" must match."),I.assert(i===o,()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${n} and transposeB=${r} must match.`);const f=s.shape.slice(0,-2).concat([u,l]),m=M(s,n?[d,i,u]:[d,u,i]),b=M(a,r?[p,l,o]:[p,o,l]),y={a:m,b:b},v={transposeA:n,transposeB:r},O=g.a.runKernelFunc((t,e)=>(e([m,b]),t.batchMatMul(m,b,n,r)),y,null,x.s,v);return M(O,f)}});const Mt=Object(v.a)({mul_:function(t,e){let n=Object(w.a)(t,"a","mul"),r=Object(w.a)(e,"b","mul");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.multiply(n,r);return e([n,r]),s},s,null,x.Ob)}});const zt=Object(v.a)({sigmoid_:function(t){const e=Object(w.a)(t,"x","sigmoid"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.sigmoid(e);return n([r]),r},n,null,x.sc)}});function Lt(t,e,n){I.assert(t.rank===e.length,()=>`Error in slice${t.rank}D: Length of begin ${e} must match the rank of the array (${t.rank}).`),I.assert(t.rank===n.length,()=>`Error in slice${t.rank}D: Length of size ${n} must match the rank of the array (${t.rank}).`);for(let r=0;r<t.rank;++r)I.assert(e[r]+n[r]<=t.shape[r],()=>`Error in slice${t.rank}D: begin[${r}] + size[${r}] (${e[r]+n[r]}) would overflow input.shape[${r}] (${t.shape[r]})`)}function Bt(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function Pt(t,e,n){const r=[];for(let s=0;s<t.length;s++)r[s]=Math.ceil((e[s]-t[s])/n[s]);return r}function Wt(t,e,n,r){const s=[...t];for(let t=s.length;t<r.length;t++)s.push(1);for(let t=0;t<n;t++)0===t?s[e]=1:(s.splice(e,0,1),s.pop());return s}function Vt(t,e,n){return n<=t?n:n-(e-1)}function Ut(t,e){const n=[];for(let r=0;r<t;r++)n.push(e+r);return n}function Gt(t,e,n,r,s){const a=[...s],i=Ut(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=0;else{const i=Vt(e,n,s);let o=r[i];t&1<<i&&(o=0),a[s]=o}return a}function Ht(t,e,n,r,s){const a=[...s],i=Ut(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const i=Vt(e,n,s);let o=r[i];t&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[s]=o}for(let t=0;t<a.length;t++){const e=s[t];a[t]<0&&(a[t]+=e),a[t]=I.clamp(0,a[t],s[t])}return a}function qt(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function Kt(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=I.clamp(0,i,u-1),i}function Xt(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=o>0?I.clamp(0,i,u):I.clamp(-1,i,u-1),i}function Yt(t,e,n){let r=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){r=t;break}for(let s=r+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function Jt(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function Zt(t,e,n){let r,s;return r="number"==typeof e?[e,...new Array(t.rank-1).fill(0)]:e.length<t.rank?e.concat(new Array(t.rank-e.length).fill(0)):e.slice(),r.forEach(t=>{I.assert(-1!==t,()=>"slice() does not support negative begin indexing.")}),s=null==n?new Array(t.rank).fill(-1):"number"==typeof n?[n,...new Array(t.rank-1).fill(-1)]:n.length<t.rank?n.concat(new Array(t.rank-n.length).fill(-1)):n,s=s.map((e,n)=>e>=0?e:(I.assert(-1===e,()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${n}.`),t.shape[n]-r[n])),[r,s]}const Qt=Object(v.a)({slice_:function(t,e,n){const r=Object(w.a)(t,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");const[s,a]=Zt(r,e,n);Lt(r,s,a);const i={x:r},o={begin:e,size:n};return g.a.runKernelFunc((t,e)=>(e([r]),t.slice(r,s,a)),i,null,x.wc,o)}});const te=Object(v.a)({tanh_:function(t){const e=Object(w.a)(t,"x","tanh"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.tanh(e);return n([r]),r},n,null,x.Kc)}});const ee=Object(v.a)({basicLSTMCell_:function(t,e,n,r,s,a){const i=Object(w.a)(t,"forgetBias","basicLSTMCell"),o=Object(w.a)(e,"lstmKernel","basicLSTMCell"),u=Object(w.a)(n,"lstmBias","basicLSTMCell"),l=Object(w.a)(r,"data","basicLSTMCell"),c=Object(w.a)(s,"c","basicLSTMCell"),h=Object(w.a)(a,"h","basicLSTMCell"),d=_t([l,h],1),p=Ft(d,o),f=N(p,u),m=f.shape[0],g=f.shape[1]/4,b=[m,g],y=Qt(f,[0,0],b),x=Qt(f,[0,g],b),v=Qt(f,[0,2*g],b),O=Qt(f,[0,3*g],b),k=N(Mt(zt(y),te(x)),Mt(c,zt(N(i,v))));return[k,Mt(te(k),zt(O))]}});const ne=Object(v.a)({batchToSpaceND_:function(t,e,n){const r=Object(w.a)(t,"x","batchToSpaceND"),s=e.reduce((t,e)=>t*e);I.assert(r.rank>=1+e.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`),I.assert(n.length===e.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`),I.assert(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`);const a={x:r},i={blockShape:e,crops:n};return g.a.runKernelFunc(t=>t.batchToSpaceND(r,e,n),a,null,x.t,i)}});function re(t){return null==t?null:0===t.rank?M(t,[t.size]):1===t.rank?t:2===t.rank?M(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?M(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t}const se=Object(v.a)({batchNorm_:function(t,e,n,r,s,a){null==a&&(a=.001);const i=Object(w.a)(t,"x","batchNorm"),o=Object(w.a)(e,"mean","batchNorm"),u=Object(w.a)(n,"variance","batchNorm");let l,c;null!=s&&(l=Object(w.a)(s,"scale","batchNorm")),null!=r&&(c=Object(w.a)(r,"offset","batchNorm")),I.assert(o.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),I.assert(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),I.assert(null==l||o.rank===l.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(t){let e;return e=0===t.rank||1===t.rank?M(t,[1,1,1,t.size]):2===t.rank?M(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?M(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(i),d={x:h,scale:l,offset:c,mean:o,variance:u},p={varianceEpsilon:a},f=g.a.runKernelFunc((t,e)=>(e([h,o,u,l]),t.batchNorm(h,re(o),re(u),re(c),re(l),a)),d,null,x.fb,p);return M(f,i.shape)}});const ae=Object(v.a)({batchNorm2d_:function(t,e,n,r,s,a){const i=Object(w.a)(t,"x","batchNorm"),o=Object(w.a)(e,"mean","batchNorm"),u=Object(w.a)(n,"variance","batchNorm");let l,c;return null!=s&&(l=Object(w.a)(s,"scale","batchNorm")),null!=r&&(c=Object(w.a)(r,"offset","batchNorm")),I.assert(2===i.rank,()=>"Error in batchNorm2D: x must be rank 2 but got rank "+i.rank+"."),I.assert(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),I.assert(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=l&&I.assert(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=c&&I.assert(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),se(i,o,u,c,l,a)}});const ie=Object(v.a)({batchNorm3d_:function(t,e,n,r,s,a){const i=Object(w.a)(t,"x","batchNorm"),o=Object(w.a)(e,"mean","batchNorm"),u=Object(w.a)(n,"variance","batchNorm");let l,c;return null!=s&&(l=Object(w.a)(s,"scale","batchNorm")),null!=r&&(c=Object(w.a)(r,"offset","batchNorm")),I.assert(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),I.assert(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),I.assert(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=l&&I.assert(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=c&&I.assert(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),se(i,o,u,c,l,a)}});const oe=Object(v.a)({batchNorm4d_:function(t,e,n,r,s,a){const i=Object(w.a)(t,"x","batchNorm"),o=Object(w.a)(e,"mean","batchNorm"),u=Object(w.a)(n,"variance","batchNorm");let l,c;return null!=s&&(l=Object(w.a)(s,"scale","batchNorm")),null!=r&&(c=Object(w.a)(r,"offset","batchNorm")),I.assert(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),I.assert(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),I.assert(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=l&&I.assert(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=c&&I.assert(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),se(i,o,u,c,l,a)}});const ue=Object(v.a)({clone_:function(t){const e=Object(w.a)(t,"x","clone",null),n={x:e};return g.a.runKernelFunc(()=>g.a.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n,null,x.nb)}});const le=Object(v.a)({broadcastTo_:function(t,e){let n=Object(w.a)(t,"broadcastTo","x");const r=n.shape;if(e.some(t=>!(t>0)||t%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=M(n,t)}const s=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===a.map((t,e)=>t>1?e:-1).filter(t=>t>=0).length)return ue(n);const i={x:n},o={shape:e,inputShape:s};return g.a.runKernelFunc(t=>t.tile(n,a),i,null,x.u,o)}});function ce(t,e="float32",n){return e=e||"float32",I.assertNonNegativeIntegerDimensions(t),new lt.b(t,e,n)}const he=Object(v.a)({ceil_:function(t){const e=Object(w.a)(t,"x","ceil"),n={x:e};return g.a.runKernelFunc(t=>t.ceil(e),n,null,x.w)}});const de=Object(v.a)({clipByValue_:function(t,e,n){const r=Object(w.a)(t,"x","clipByValue");I.assert(e<=n,()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`);const s={x:r},a={clipValueMin:e,clipValueMax:n};return g.a.runKernelFunc((t,s)=>{const a=t.clip(r,e,n);return s([r]),a},s,null,x.x,a)}});var pe=n(13);const fe=Object(v.a)({concat1d_:function(t){return _t(t,0)}});const me=Object(v.a)({concat2d_:function(t,e){return _t(t,e)}});const ge=Object(v.a)({concat3d_:function(t,e){return _t(t,e)}});const be=Object(v.a)({concat4d_:function(t,e){return _t(t,e)}});const ye=Object(v.a)({conv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Object(w.a)(t,"x","conv2d"),u=Object(w.a)(e,"filter","conv2d");let l=o,c=!1;3===o.rank&&(c=!0,l=M(o,[1,o.shape[0],o.shape[1],o.shape[2]])),I.assert(4===l.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`),I.assert(4===u.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."),null!=i&&I.assert(I.isInt(r),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h="NHWC"===s?l.shape[3]:l.shape[1];I.assert(h===u.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`),I.assert(it(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const d={x:l,filter:u},p={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},f=g.a.runKernelFunc((t,e)=>{const o=ot(s),c=Z(l.shape,u.shape,n,a,r,i,!1,o),h=t.conv2d(l,u,c);return e([l,u]),h},d,null,x.A,p);return c?M(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const xe=Object(v.a)({conv1d_:function(t,e,n,r,s="NWC",a=1,i){const o=Object(w.a)(t,"x","conv1d"),u=Object(w.a)(e,"filter","conv1d");let l=o,c=!1;2===o.rank&&(c=!0,l=M(o,[1,o.shape[0],o.shape[1]])),I.assert(3===l.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`),I.assert(3===u.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."),null!=i&&I.assert(I.isInt(r),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),I.assert(l.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`),I.assert(it(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),I.assert("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const h=M(u,[1,u.shape[0],u.shape[1],u.shape[2]]),d=M(l,[l.shape[0],1,l.shape[1],l.shape[2]]),p=ye(d,h,[1,n],r,"NHWC",[1,a],i);return M(p,c?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}});const we=Object(v.a)({conv2DBackpropInput_:function(t,e,n,r,s,a="NHWC",i){I.assert(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let o=t,u=e,l=!1;3===e.rank&&(l=!0,u=M(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),I.assert(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),I.assert(4===u.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank),I.assert(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?u.shape[3]:u.shape[1];I.assert(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),I.assert(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),null!=i&&I.assert(I.isInt(s),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const d={dy:u,filter:n},p={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o},f=g.a.runKernelFunc((t,e)=>{const l=ot(a),c=Z(o,n.shape,r,1,s,i,!1,l),h=t.conv2dDerInput(u,n,c);return e([u,n]),h},d,null,x.C,p);return l?M(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const ve=Object(v.a)({conv2dTranspose_:function(t,e,n,r,s,a){const i=Object(w.a)(t,"x","conv2dTranspose"),o=Object(w.a)(e,"filter","conv2dTranspose");return we(n,i,o,r,s,"NHWC",a)}});const Oe=Object(v.a)({conv3d_:function(t,e,n,r,s="NDHWC",a=[1,1,1]){const i=Object(w.a)(t,"x","conv3d"),o=Object(w.a)(e,"filter","conv3d");let u=i,l=!1;4===i.rank&&(l=!0,u=M(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),I.assert(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),I.assert(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),I.assert(u.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`),I.assert(it(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),I.assert("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`);const c={x:u,filter:o},h={strides:n,pad:r,dataFormat:s,dilations:a},d=g.a.runKernelFunc((t,e)=>{const s=Q(u.shape,o.shape,n,a,r),i=t.conv3d(u,o,s);return e([u,o]),i},c,null,x.D,h);return l?M(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const ke=Object(v.a)({conv3DBackpropInput_:function(t,e,n,r,s){I.assert(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let a=t,i=e,o=!1;4===e.rank&&(o=!0,i=M(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const u=a[4],l=i.shape[4];I.assert(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),I.assert(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),I.assert(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),I.assert(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`),I.assert(l===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`);const c={dy:i},h={pad:s},d=g.a.runKernelFunc(t=>{const e=Q(a,n.shape,r,1,s);return t.conv3dDerInput(i,n,e)},c,null,x.F,h);return o?M(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Se=Object(v.a)({conv3dTranspose_:function(t,e,n,r,s){const a=Object(w.a)(t,"x","conv3dTranspose"),i=Object(w.a)(e,"filter","conv3dTranspose");return ke(n,a,i,r,s)}});const Ce=Object(v.a)({cos_:function(t){const e=Object(w.a)(t,"x","cos"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.cos(e);return n([e]),r},n,null,x.G)}});const Ne=Object(v.a)({cosh_:function(t){const e=Object(w.a)(t,"x","cosh"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.cosh(e);return n([e]),r},n,null,x.H)}});const Ie=Object(v.a)({cumsum_:function(t,e=0,n=!1,r=!1){const s=Object(w.a)(t,"x","cumsum"),a={x:s},i={axis:e,exclusive:n,reverse:r};return g.a.runKernelFunc((t,a)=>{const i=D([e],s.rank);let o=s;null!=i&&(o=z(s,i));const u=F(1,s.rank)[0];let l=t.cumsum(o,u,n,r);if(a([s]),null!=i){const t=_(i);l=z(l,t)}return l},a,null,x.J,i)}});const Ae=Object(v.a)({depthToSpace_:function(t,e,n="NHWC"){const r=Object(w.a)(t,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];I.assert(s*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${e}  for depthToSpace with input shape\n    ${r.shape}`),I.assert(a*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${r.shape}`),I.assert(i%(e*e)==0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${r.shape}`);const o={x:r},u={blockSize:e,dataFormat:n};return g.a.runKernelFunc(t=>t.depthToSpace(r,e,n),o,null,x.K,u)}});const Ee=Object(v.a)({depthwiseConv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Object(w.a)(t,"x","depthwiseConv2d"),u=Object(w.a)(e,"filter","depthwiseConv2d");let l=o,c=!1;3===o.rank&&(c=!0,l=M(o,[1,o.shape[0],o.shape[1],o.shape[2]])),I.assert(4===l.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`),I.assert(4===u.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."),I.assert(l.shape[3]===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),null!=i&&I.assert(I.isInt(r),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},p=g.a.runKernelFunc((t,e)=>{null==a&&(a=[1,1]),I.assert(it(n,a),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const s=Z(l.shape,u.shape,n,a,r,i,!0),o=t.depthwiseConv2D(l,u,s);return e([l,u]),o},h,null,x.L,d);return c?M(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Te=Object(v.a)({diag_:function(t){const e=Object(w.a)(t,"x","diag"),n={x:e};return g.a.runKernelFunc(n=>{const r=M(e,[e.size]),s=n.diag(r),a=[...t.shape,...t.shape];return M(s,a)},n,null,x.O)}});const Re=Object(v.a)({dilation2d_:function(t,e,n,r,s=[1,1],a="NHWC"){const i=Object(w.a)(t,"x","dilation2d"),o=Object(w.a)(e,"filter","dilation2d");I.assert(3===i.rank||4===i.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+i.rank+"."),I.assert(3===o.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+o.rank+"."),I.assert("NHWC"===a,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a);let u=i,l=!1;3===i.rank&&(u=M(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=!0);const c={x:u,filter:o},h={strides:n,pad:r,dilations:s},d=g.a.runKernel(x.P,c,h);return l?M(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const $e=Object(v.a)({floorDiv_:function(t,e){let n=Object(w.a)(t,"a","floorDiv"),r=Object(w.a)(e,"b","floorDiv");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.floorDiv(n,r);return e([n,r]),s},s,null,x.db)}});const je=Object(v.a)({div_:function(t,e){let n=Object(w.a)(t,"a","div"),r=Object(w.a)(e,"b","div");if([n,r]=Object(C.makeTypesMatch)(n,r),"int32"===n.dtype&&"int32"===r.dtype)return $e(n,r);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.realDivide(n,r);return e([n,r]),s},s,null,x.S,{})}});function De(t,e){const n=t.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=t[a]||1;(e[e.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function _e(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function Fe(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let a=e[e.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(r)}}return n}const Me=Object(v.a)({equal_:function(t,e){let n=Object(w.a)(t,"a","equal"),r=Object(w.a)(e,"b","equal");[n,r]=Object(C.makeTypesMatch)(n,r),Fe(n.shape,r.shape);const s={a:n,b:r};return g.a.runKernelFunc(t=>t.equal(n,r),s,null,x.V)}});const ze=Object(v.a)({where_:function(t,e,n){const r=Object(w.a)(e,"a","where"),s=Object(w.a)(n,"b","where"),a=Object(w.a)(t,"condition","where","bool"),i=Fe(r.shape,s.shape),o=le(r,i),u=le(s,i);1===a.rank&&Object(I.assert)(a.shape[0]===r.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==a.rank&&Object(I.assertShapesMatch)(a.shape,u.shape,"Error in where: ");const l={condition:a,t:o,e:u};return g.a.runKernelFunc((t,e)=>{const n=t.select(a,o,u);return e([a]),n},l,null,x.qc)}});const Le=Object(v.a)({zerosLike_:function(t){const e=Object(w.a)(t,"x","zerosLike"),n={x:e};return g.a.runKernelFunc(t=>t.zerosLike(e),n,null,x.Qc)}});const Be=Object(v.a)({divNoNan_:function(t,e){let n=Object(w.a)(t,"a","div"),r=Object(w.a)(e,"b","div");[n,r]=Object(C.makeTypesMatch)(n,r);const s=je(n,r),a=Le(s),i=Me(r,a);return ze(i,a,s)}});const Pe=Object(v.a)({dot_:function(t,e){const n=Object(w.a)(t,"t1","dot"),r=Object(w.a)(e,"t2","dot");I.assert(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(I.assert(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),1===n.rank&&1===r.rank){const t=M(n,[1,-1]),e=M(r,[-1,1]),s=Ft(t,e);return M(s,[])}if(1===n.rank&&2===r.rank){const t=M(n,[1,-1]),e=M(r,[r.shape[0],r.shape[1]]),s=Ft(t,e);return M(s,[s.size])}if(2===n.rank&&1===r.rank){const t=M(r,[-1,1]),e=Ft(n,t);return M(e,[e.size])}{const t=M(r,[r.shape[0],r.shape[1]]);return Ft(n,t)}}});const We=Object(v.a)({elu_:function(t){const e=Object(w.a)(t,"x","elu"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.elu(e);return n([r]),r},n,null,x.T)}});const Ve=Object(v.a)({erf_:function(t){let e=Object(w.a)(t,"x","erf");I.assert("int32"===e.dtype||"float32"===e.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===e.dtype&&(e=K(e,"float32"));const n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.erf(e);return n([e]),r},n,null,x.W)}});const Ue=Object(v.a)({exp_:function(t){const e=Object(w.a)(t,"x","exp"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.exp(e);return n([r]),r},n,null,x.X)}});const Ge=Object(v.a)({expandDims_:function(t,e=0){const n=Object(w.a)(t,"x","expandDims",null);I.assert(e<=n.rank,()=>"Axis must be <= rank of the tensor");const r=n.shape.slice();return e<0&&(I.assert(-(n.rank+1)<=e,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),e=n.rank+e+1),r.splice(e,0,1),M(n,r)}});const He=Object(v.a)({expm1_:function(t){const e=Object(w.a)(t,"x","expm1"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.expm1(e);return n([e]),r},n,null,x.Y)}});const qe=Object(v.a)({tile_:function(t,e){const n=Object(w.a)(t,"x","tile",null);I.assert(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`);const r=[n],s={x:n},a={reps:e};return g.a.runKernelFunc((t,r)=>{const s=t.tile(n,e);return r([n]),s},s,null,x.Lc,a,r)}});const Ke=Object(v.a)({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=ce([t,e],r),a=t<=e?t:e;for(let t=0;t<a;++t)s.set(1,t,t);const i=M(s.toTensor(),[t,e]);if(null==n)return i;if(1===n.length)return qe(Ge(i,0),[n[0],1,1]);if(2===n.length)return qe(Ge(Ge(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return qe(Ge(Ge(Ge(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const Xe=Object(v.a)({fft_:function(t){Object(I.assert)("complex64"===t.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`);const e={input:t};return g.a.runKernelFunc(e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=t.as2D(r,n);return e.fft(s).reshape(t.shape)},e,null,x.Z)}});function Ye(t,e,n){const r={shape:t,value:e,dtype:n};return g.a.runKernelFunc(r=>r.fill(t,e,n),{},null,x.ab,r)}const Je=Object(v.a)({floor_:function(t){const e=Object(w.a)(t,"x","floor"),n={x:e};return g.a.runKernelFunc(t=>t.floor(e),n,null,x.cb)}}),Ze=30;function Qe(t){return t<=Ze?t:Object(I.nearestDivisor)(t,Math.floor(Math.sqrt(t)))}function tn(t,e){let n,r=!1;for(t<=Ze?(n=t,r=!0):n=Object(I.nearestDivisor)(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=Object(I.nearestDivisor)(t,n+1);return n}function en(t,e,n){const r=[],s=t.length;for(let a=0;a<s;a++)a!==e?r.push(t[a]):r.push(n);return r}function nn(t,e,n){const r=t.shape[n],s=[];let a=1,i=1;for(let e=0;e<n;e++)s.push(t.shape[e]),a*=t.shape[e];for(let t=0;t<e.rank;t++)s.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)s.push(t.shape[e]),i*=t.shape[e];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:s}}const rn=Object(v.a)({gather_:function(t,e,n=0){const r=Object(w.a)(t,"x","gather"),s=Object(w.a)(e,"indices","gather","int32"),a={x:r,indices:s},i={axis:n};return g.a.runKernelFunc((t,e)=>{const a=Object(I.parseAxisParam)(n,r.shape)[0],i=nn(r,s,a),o=t.gather(r,M(s,[s.size]),a);return e([r,s]),M(o,i.outputShape)},a,null,x.jb,i)}});const sn=Object(v.a)({greater_:function(t,e){let n=Object(w.a)(t,"a","greater"),r=Object(w.a)(e,"b","greater");[n,r]=Object(C.makeTypesMatch)(n,r),Fe(n.shape,r.shape);const s={a:n,b:r};return g.a.runKernelFunc(t=>t.greater(n,r),s,null,x.kb)}});const an=Object(v.a)({greaterEqual_:function(t,e){let n=Object(w.a)(t,"a","greaterEqual"),r=Object(w.a)(e,"b","greaterEqual");[n,r]=Object(C.makeTypesMatch)(n,r),Fe(n.shape,r.shape);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.greaterEqual(n,r);return e([n,r]),s},s,null,x.lb)}});const on=Object(v.a)({ifft_:function(t){Object(I.assert)("complex64"===t.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`);const e={input:t};return g.a.runKernelFunc(e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=M(t,[r,n]),a=e.ifft(s);return M(a,t.shape)},e,null,x.mb)}});const un=Object(v.a)({imag_:function(t){const e=Object(w.a)(t,"input","imag"),n={input:e};return g.a.runKernelFunc(t=>t.imag(e),n,null,x.ob)}});const ln=Object(v.a)({real_:function(t){const e=Object(w.a)(t,"input","real"),n={input:e};return g.a.runKernelFunc(t=>t.real(e),n,null,x.cc)}});const cn=Object(v.a)({reverse_:function(t,e){const n=Object(w.a)(t,"x","reverse"),r={x:n},s={dims:e};return g.a.runKernelFunc(t=>{const r=Object(I.parseAxisParam)(e,n.shape);if(0===n.rank)return ue(n);const s=t.reverse(n,r);return M(s,n.shape)},r,null,x.lc,s)}});var hn=n(12);function dn(t,e){if((Object(I.isTypedArray)(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&Object(I.isTypedArray)(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Object(hn.a)(t,[],[],e)}const pn=Object(v.a)({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let r;if(e<=2){const s=M(t,[n,e]);r=on(s)}else{const s=[n,2*(e-1)],a=M(ln(t),[n,e]),i=M(un(t),[n,e]),o=cn(Qt(a,[0,1],[n,e-2]),1),u=Mt(cn(Qt(i,[0,1],[n,e-2]),1),dn(-1)),l=_t([a,o],1),c=_t([i,u],1),h=M(Object(pe.a)(l,c),[s[0],s[1]]);r=on(h)}if(r=ln(r),3===t.rank&&0!==t.shape[0]){const e=r,n=t.shape[0];r=M(r,[n,r.shape[0]/n,r.shape[1]]),e.dispose()}return r}});const fn=Object(v.a)({isFinite_:function(t){const e=Object(w.a)(t,"x","isFinite"),n={x:e};return g.a.runKernelFunc(t=>t.isFinite(e),n,null,x.pb)}});const mn=Object(v.a)({isInf_:function(t){const e=Object(w.a)(t,"x","isInf"),n={x:e};return g.a.runKernelFunc(t=>t.isInf(e),n,null,x.qb)}});const gn=Object(v.a)({isNaN_:function(t){const e=Object(w.a)(t,"x","isNaN"),n={x:e};return g.a.runKernelFunc(t=>t.isNaN(e),n,null,x.rb)}});const bn=Object(v.a)({maximum_:function(t,e){let n=Object(w.a)(t,"a","maximum"),r=Object(w.a)(e,"b","maximum");[n,r]=Object(C.makeTypesMatch)(n,r),"bool"===n.dtype&&(n=K(n,"int32"),r=K(r,"int32")),Fe(n.shape,r.shape);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.maximum(n,r);return e([n,r]),s},s,null,x.Jb)}});const yn=Object(v.a)({leakyRelu_:function(t,e=.2){const n=Object(w.a)(t,"x","leakyRelu");return bn(Mt(dn(e),n),n)}});const xn=Object(v.a)({less_:function(t,e){let n=Object(w.a)(t,"a","less"),r=Object(w.a)(e,"b","less");[n,r]=Object(C.makeTypesMatch)(n,r),Fe(n.shape,r.shape);const s={a:n,b:r};return g.a.runKernelFunc(t=>t.less(n,r),s,null,x.ub)}});const wn=Object(v.a)({lessEqual_:function(t,e){let n=Object(w.a)(t,"a","lessEqual"),r=Object(w.a)(e,"b","lessEqual");[n,r]=Object(C.makeTypesMatch)(n,r),Fe(n.shape,r.shape);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.lessEqual(n,r);return e([n,r]),s},s,null,x.vb)}});function vn(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:t,stop:e,num:n};return g.a.runKernelFunc(r=>r.linspace(t,e,n),{},null,x.wb,r)}const On=Object(v.a)({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const a=Object(w.a)(t,"x","localResponseNormalization");I.assert(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),I.assert(I.isInt(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=M(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:i},l={depthRadius:e,bias:n,alpha:r,beta:s},c=g.a.runKernelFunc((t,a)=>{const o=t.localResponseNormalization4D(i,e,n,r,s);return a([i,o]),o},u,null,x.sb,l);return o?M(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const kn=Object(v.a)({log_:function(t){const e=Object(w.a)(t,"x","log"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.log(e);return n([e]),r},n,null,x.xb)}});const Sn=Object(v.a)({log1p_:function(t){const e=Object(w.a)(t,"x","log1p"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.log1p(e);return n([e]),r},n,null,x.yb)}});function Cn(t){return I.assert(I.isFunction(t),()=>"The f passed in grad(f) must be a function"),(e,n)=>{const r=Object(w.a)(e,"x","tf.grad",null),s=null!=n?Object(w.a)(n,"dy","tf.grad"):null;return g.a.tidy(()=>{const{value:e,grads:n}=g.a.gradients(()=>t(r),[r],s);return null!=s&&I.assertShapesMatch(e.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Rn(n),n[0]})}}function Nn(t){return I.assert(I.isFunction(t),()=>"The f passed in grads(f) must be a function"),(e,n)=>{I.assert(Array.isArray(e),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const r=Object(w.b)(e,"args","tf.grads",null),s=null!=n?Object(w.a)(n,"dy","tf.grads"):null;return g.a.tidy(()=>{const{value:e,grads:n}=g.a.gradients(()=>t(...r),r,s);return null!=s&&I.assertShapesMatch(e.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Rn(n),n})}}function In(t){return I.assert(I.isFunction(t),()=>"The f passed in valueAndGrad(f) must be a function"),(e,n)=>{I.assert(e instanceof lt.a,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),I.assert(null==n||n instanceof lt.a,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:r,value:s}=g.a.gradients(()=>t(e),[e],n);return Rn(r),{grad:r[0],value:s}}}function An(t){return I.assert(I.isFunction(t),()=>"The f passed in valueAndGrads(f) must be a function"),(e,n)=>{I.assert(Array.isArray(e)&&e.every(t=>t instanceof lt.a),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),I.assert(null==n||n instanceof lt.a,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const r=g.a.gradients(()=>t(...e),e,n);return null!=n&&I.assertShapesMatch(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Rn(r.grads),r}}function En(t,e){I.assert(I.isFunction(t),()=>"The f passed in variableGrads(f) must be a function"),I.assert(null==e||Array.isArray(e)&&e.every(t=>t instanceof lt.c),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=e;if(!n){e=[];for(const t in g.a.registeredVariables)e.push(g.a.registeredVariables[t])}const r=n?e.filter(t=>!t.trainable):null,s=e.length;e=e.filter(t=>t.trainable),I.assert(e.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const{value:a,grads:i}=g.a.gradients(t,e,null,!0);I.assert(i.some(t=>null!=t),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),I.assert(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return e.forEach((t,e)=>{null!=i[e]&&(o[t.name]=i[e])}),null!=r&&r.forEach(t=>o[t.name]=null),{value:a,grads:o}}function Tn(t){return g.a.customGrad(t)}function Rn(t){if(t.filter(t=>null==t).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}const $n=Object(v.a)({neg_:function(t){const e=Object(w.a)(t,"x","neg"),n={x:e};return g.a.runKernelFunc(t=>t.neg(e),n,null,x.Pb)}});const jn=Object(v.a)({softplus_:function(t){const e=Object(w.a)(t,"x","softplus"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.softplus(e);return n([e]),r},n,null,x.yc)}});const Dn=Object(v.a)({logSigmoid_:function(t){const e=Object(w.a)(t,"x","logSigmoid");return Tn(t=>({value:$n(jn($n(t))),gradFunc:e=>Mt(e,zt($n(t)))}))(e)}});const _n=Object(v.a)({max_:function(t,e=null,n=!1){const r=Object(w.a)(t,"x","max"),s={x:r},a={reductionIndices:e,keepDims:n};return g.a.runKernelFunc((t,s)=>{let a=I.parseAxisParam(e,r.shape);const i=D(a,r.rank);let o=r;null!=i&&(o=z(r,i),a=F(a.length,o.rank));const u=t.max(o,a);null!=i&&o.dispose();let l=u;if(n){const t=$(l.shape,I.parseAxisParam(e,r.shape));l=M(l,t),u.dispose()}return s([r,l]),l},s,null,x.Db,a)}});const Fn=Object(v.a)({sub_:function(t,e){let n=Object(w.a)(t,"a","sub"),r=Object(w.a)(e,"b","sub");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.subtract(n,r);return e([n,r]),s},s,null,x.Hc)}});const Mn=Object(v.a)({sum_:function(t,e=null,n=!1){let r=Object(w.a)(t,"x","sum");"bool"===r.dtype&&(r=K(r,"int32"));const s={x:r},a={axis:e,keepDims:n};return g.a.runKernelFunc((t,s)=>{s([r]);const a=Object(I.parseAxisParam)(e,r.shape),i=D(a,r.rank);let o=a,u=r;null!=i&&(u=z(r,i),o=F(o.length,r.rank));let l=t.sum(u,o);if(n){const t=$(l.shape,a);l=M(l,t)}return l},s,null,x.Ic,a)}});const zn=Object(v.a)({logSoftmax_:function(t,e=-1){const n=Object(w.a)(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);const r={logits:n},s={axis:e};return g.a.runKernelFunc((n,r)=>{const s=_n(t,e,!0),a=Fn(t,s),i=Fn(K(a,"float32"),kn(Mn(Ue(a),e,!0)));return r([i]),i},r,null,x.zb,s)}});const Ln=Object(v.a)({logSumExp_:function(t,e=null,n=!1){const r=Object(w.a)(t,"x","logSumExp"),s=Object(I.parseAxisParam)(e,r.shape),a=_n(r,s,!0),i=Fn(r,a),o=Ue(i),u=Mn(o,s),l=kn(u),c=N(M(a,l.shape),l);if(n){const t=$(c.shape,s);return M(c,t)}return c}});const Bn=Object(v.a)({logicalAnd_:function(t,e){const n=Object(w.a)(t,"a","logicalAnd","bool"),r=Object(w.a)(e,"b","logicalAnd","bool");Fe(n.shape,r.shape);const s={a:n,b:r};return g.a.runKernelFunc(t=>t.logicalAnd(n,r),s,null,x.Ab)}});const Pn=Object(v.a)({logicalNot_:function(t){const e=Object(w.a)(t,"x","logicalNot","bool"),n={x:e};return g.a.runKernelFunc(t=>t.logicalNot(e),n,null,x.Bb)}});const Wn=Object(v.a)({logicalOr_:function(t,e){const n=Object(w.a)(t,"a","logicalOr","bool"),r=Object(w.a)(e,"b","logicalOr","bool");Fe(n.shape,r.shape);const s={a:n,b:r};return g.a.runKernelFunc(t=>t.logicalOr(n,r),s,null,x.Cb)}});const Vn=Object(v.a)({logicalXor_:function(t,e){const n=Object(w.a)(t,"a","logicalXor","bool"),r=Object(w.a)(e,"b","logicalXor","bool");return Fe(n.shape,r.shape),Bn(Wn(t,e),Pn(Bn(t,e)))}});const Un=Object(v.a)({maxPool_:function(t,e,n,r,s){const a=Object(w.a)(t,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=M(a,[1,a.shape[0],a.shape[1],a.shape[2]])),I.assert(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),I.assert(it(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=s&&I.assert(I.isInt(r),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const u={x:i},l={filterSize:e,strides:n,pad:r,dimRoundingMode:s},c=g.a.runKernelFunc((t,a)=>{const o=Y(i.shape,e,n,1,r,s);let u;return u=1===o.filterWidth&&1===o.filterHeight&&I.arraysEqual(o.inShape,o.outShape)?i.clone():t.maxPool(i,o),a([i,u]),u},u,null,x.Eb,l);return o?M(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Gn=Object(v.a)({maxPool3d_:function(t,e=[1,1,1],n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:pt("dilations is deprecated, this field will be gone in v3.0.0.");const o=Object(w.a)(t,"x","maxPool3d");let u=o,l=!1;4===o.rank&&(l=!0,u=M(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),I.assert(5===u.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`),I.assert("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),I.assert(it(n,i),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&I.assert(I.isInt(r),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c={x:u},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i},d=g.a.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const l=J(u.shape,e,n,i,r,s,a),c=t.maxPool3d(u,l);return o([u,c]),c},c,null,x.Fb,h);return l?M(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Hn=Object(v.a)({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const a={x:Object(w.a)(t,"x","maxPoolWithArgmax")},i={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},o=g.a.runKernel(x.Ib,a,i);return{result:o[0],indexes:o[1]}}});function qn(t,e="float32"){if("complex64"===e){const e=qn(t,"float32"),n=qn(t,"float32");return Object(pe.a)(e,n)}const n=Object(I.makeZerosTypedArray)(Object(I.sizeFromShape)(t),e);return g.a.makeTensor(n,t,e)}function Kn(t,e="float32"){if("complex64"===e){const e=Kn(t,"float32"),n=qn(t,"float32");return Object(pe.a)(e,n)}const n=Object(I.makeOnesTypedArray)(Object(I.sizeFromShape)(t),e);return g.a.makeTensor(n,t,e)}const Xn=Object(v.a)({mean_:function(t,e=null,n=!1){const r=Object(w.a)(t,"x","mean"),s=Object(I.parseAxisParam)(e,r.shape),a=R(r.shape,s)[1],i=Object(I.sizeFromShape)(a);return Tn(t=>{const r=dn(i),a=r.dtype===t.dtype?t:K(t,r.dtype),o=je(a,r);return{value:Mn(o,e,n),gradFunc:e=>{const n=t.shape.slice();s.forEach(t=>{n[t]=1});const r=M(e,n);return je(Mt(r,Kn(t.shape,"float32")),i)}}})(r)}});const Yn=Object(v.a)({min_:function(t,e=null,n=!1){const r=Object(w.a)(t,"x","min"),s={x:r},a={axis:e,keepDims:n};return g.a.runKernelFunc((t,s)=>{const a=Object(I.parseAxisParam)(e,r.shape);let i=a;const o=D(i,r.rank);let u=r;null!=o&&(u=z(r,o),i=F(i.length,r.rank));const l=t.min(u,i);null!=o&&u.dispose();let c=l;if(n){const t=$(c.shape,a);c=M(l,t),l.dispose()}return s([r,c]),c},s,null,x.Lb,a)}});const Jn=Object(v.a)({minimum_:function(t,e){let n=Object(w.a)(t,"a","minimum"),r=Object(w.a)(e,"b","minimum");[n,r]=Object(C.makeTypesMatch)(n,r),"bool"===n.dtype&&(n=K(n,"int32"),r=K(r,"int32")),Fe(n.shape,r.shape);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.minimum(n,r);return e([n,r]),s},s,null,x.Mb)}});const Zn=Object(v.a)({mod_:function(t,e){let n=Object(w.a)(t,"a","mod"),r=Object(w.a)(e,"b","mod");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.mod(n,r);return e([n,r]),s},s,null,x.Nb)}});const Qn=Object(v.a)({square_:function(t){const e=Object(w.a)(t,"x","square"),n=[e];return g.a.runKernelFunc((t,n)=>(n([e]),t.square(e)),{x:e},null,"Square",{},n,[])}});const tr=Object(v.a)({moments_:function(t,e=null,n=!1){t=Object(w.a)(t,"x","moments");const r=Object(I.parseAxisParam)(e,t.shape),s=Xn(t,r,n);let a=s.shape;n||(a=$(s.shape,r));const i=Qn(Fn(K(t,"float32"),M(s,a)));return{mean:s,variance:Xn(i,r,n)}}});const er=Object(v.a)({multiRNNCell_:function(t,e,n,r){const s=Object(w.a)(e,"data","multiRNNCell"),a=Object(w.b)(n,"c","multiRNNCell"),i=Object(w.b)(r,"h","multiRNNCell");let o=s;const u=[];for(let e=0;e<t.length;e++){const n=t[e](o,a[e],i[e]);u.push(n[0]),u.push(n[1]),o=n[1]}const l=[],c=[];for(let t=0;t<u.length;t+=2)l.push(u[t]),c.push(u[t+1]);return[l,c]}});const nr=Object(v.a)({multinomial_:function(t,e,n,r=!1){const s=Object(w.a)(t,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?M(s,[1,-1]):s,u=g.a.runKernelFunc(t=>t.multinomial(o,r,e,n),{logits2D:o});return 1===i?M(u,[u.size]):u}});const rr=Object(v.a)({notEqual_:function(t,e){let n=Object(w.a)(t,"a","notEqual"),r=Object(w.a)(e,"b","notEqual");[n,r]=Object(C.makeTypesMatch)(n,r),Fe(n.shape,r.shape);const s={a:n,b:r};return g.a.runKernelFunc(t=>t.notEqual(n,r),s,null,x.Tb)}});const sr=Object(v.a)({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);const s=Object(w.a)(t,"indices","oneHot","int32"),a=[...s.shape,e],i={indices:s},o={depth:e,onValue:n,offValue:r};return g.a.runKernelFunc((t,i)=>(i([s]),M(t.oneHot(M(s,[s.size]),e,n,r),a)),i,null,x.Ub,o)}});const ar=Object(v.a)({onesLike_:function(t){const e=Object(w.a)(t,"x","onesLike"),n={x:e};return g.a.runKernelFunc((t,n)=>{if("complex64"===e.dtype){const t=ar(ln(e)),n=Le(un(e));return Object(pe.a)(t,n)}return t.onesLike(e)},n,null,x.Vb)}});const ir=Object(v.a)({outerProduct_:function(t,e){const n=Object(w.a)(t,"v1","outerProduct"),r=Object(w.a)(e,"v2","outerProduct");I.assert(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const s=M(n,[-1,1]),a=M(r,[1,-1]);return Ft(s,a)}});const or=Object(v.a)({pad_:function(t,e,n=0){const r=Object(w.a)(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},a={x:r};return g.a.runKernelFunc((t,s)=>(s([r]),t.pad(r,e,n)),a,null,x.Wb,s)}});const ur=Object(v.a)({pad1d_:function(t,e,n=0){return Object(I.assert)(2===e.length,()=>"Invalid number of paddings. Must be length of 2."),or(t,[e],n)}});const lr=Object(v.a)({pad2d_:function(t,e,n=0){return Object(I.assert)(2===e.length&&2===e[0].length&&2===e[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),or(t,e,n)}});const cr=Object(v.a)({pad3d_:function(t,e,n=0){return Object(I.assert)(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),or(t,e,n)}});const hr=Object(v.a)({pad4d_:function(t,e,n=0){return Object(I.assert)(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),or(t,e,n)}});const dr=Object(v.a)({spaceToBatchND_:function(t,e,n){const r=Object(w.a)(t,"x","spaceToBatchND");I.assert(r.rank>=1+e.length,()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`),I.assert(n.length===e.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`),I.assert(r.shape.reduce((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`);const s={x:r},a={blockShape:e,paddings:n};return g.a.runKernelFunc(t=>t.spaceToBatchND(r,e,n),s,null,x.zc,a)}});const pr=Object(v.a)({pool_:function(t,e,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Object(w.a)(t,"x","maxPool");let o=i,u=!1;3===i.rank&&(u=!0,o=M(i,[1,i.shape[0],i.shape[1],i.shape[2]])),I.assert(it(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const l=Y(o.shape,e,a,s,r),c=[l.dilationHeight,l.dilationWidth];let h;h="same"===r?function(t,e){const n=t.map((t,n)=>t+(t-1)*(e[n]-1)).map(t=>t-1),r=n.map(t=>Math.floor(t/2)),s=n.map((t,e)=>t-r[e]);return n.map((t,e)=>[r[e],s[e]])}([l.filterHeight,l.filterWidth],c):[[0,0],[0,0]];const d=1===c[0]&&1===c[1],[p,f]=function(t,e,n){const r=n.map(t=>t[0]),s=n.map(t=>t[1]),a=t.concat(r,s),i=e.map((t,e)=>(t-a[e]%t)%t),o=s.map((t,e)=>t+i[e]),u=e.map((t,e)=>[r[e],o[e]]),l=e.map((t,e)=>[0,i[e]]);return[u,l]}([l.inHeight,l.inWidth],c,h),m=d?r:"valid",g=d?o:dr(o,c,p),b=("avg"===n?()=>ut(g,e,a,m):()=>Un(g,e,a,m))(),y=d?b:ne(b,c,f);return u?M(y,[y.shape[1],y.shape[2],y.shape[3]]):y}});const fr=Object(v.a)({pow_:function(t,e){let n=Object(w.a)(t,"base","pow"),r=Object(w.a)(e,"exp","pow");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.pow(n,r);return e([n,r,s]),s},s,null,x.Yb)}});const mr=Object(v.a)({prelu_:function(t,e){const n=Object(w.a)(t,"x","prelu"),r=Object(w.a)(e,"alpha","prelu"),s={x:n,alpha:r};return g.a.runKernelFunc((t,e)=>{const s=t.prelu(n,r);return e([n,r]),s},s,null,x.Zb)}});function gr(t,e=!1){console.log(t.toString(e))}const br=Object(v.a)({prod_:function(t,e=null,n=!1){let r=Object(w.a)(t,"x","prod");const s={x:r},a={axis:e,keepDims:n};return g.a.runKernelFunc(t=>{"bool"===r.dtype&&(r=K(r,"int32"));const s=Object(I.parseAxisParam)(e,r.shape),a=D(s,r.rank);let i=s,o=r;null!=a&&(o=z(r,a),i=F(i.length,r.rank));let u=t.prod(o,i);if(n){const t=$(u.shape,s);u=M(u,t)}return u},s,null,x.ac,a)}});const yr=Object(v.a)({rand_:function(t,e,n){const r=Object(I.sizeFromShape)(t);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);s=new Uint8Array(r)}for(let t=0;t<r;t++)s[t]=e();return g.a.makeTensor(s,t,n)}});var xr=n(19);const wr=.1;function vr(t,e,n){return null==n&&(n=Or()),kr(t,e,(t,e)=>Ir(t,e,n))}function Or(){return 32===g.a.backend.floatPrecision()?.001:wr}function kr(t,e,n){let r=!0;if((Object(I.isTypedArray)(t)||Object(I.isTypedArray)(e))&&(r=!1),Object(I.isTypedArray)(t)&&Object(I.isTypedArray)(e)&&(r=!0),r){const n=t.constructor.name,r=e.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: `+r)}if(Array.isArray(t)&&Array.isArray(e)){const n=Object(w.c)(t),r=Object(w.c)(e);if(!Object(I.arraysEqual)(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=Object(I.isTypedArray)(t)?t:Object(I.flatten)(t),a=Object(I.isTypedArray)(e)?e:Object(I.flatten)(e);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.\nActual:   ${s}.\nExpected: ${a}.`);for(let t=0;t<a.length;++t){const e=s[t],r=a[t];if(!n(e,r))throw new Error(`Arrays differ: actual[${t}] = ${e}, expected[${t}] = ${r}.\nActual:   ${s}.\nExpected: ${a}.`)}}function Sr(t,e){t().then(()=>e.fail(),()=>e())}function Cr(t,e){const n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return Object(I.isString)(t)||Object(I.isString)(t[0])||Object(I.isString)(e)||Object(I.isString)(e[0])?kr(t,n,(t,e)=>t==e):kr(t,e,(t,e)=>Ir(t,e,0))}function Nr(t,e,n){if(null==n&&(n=Or()),!Ir(t,e,n))throw new Error(`Numbers differ: actual === ${t}, expected === ${e}`)}function Ir(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}function Ar(t,e,n){for(let r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error(`Value out of range:${t[r]} low: ${e}, high: ${n}`)}function Er(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}class Tr{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=xr.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class Rr{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const s=r||Math.random();this.randu=xr.alea(s.toString()),this.randn=new Tr(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),s=this.randu(),s<e||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class $r{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=xr.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const jr=Object(v.a)({randomGamma_:function(t,e,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const a=new Rr(e,n,r,s),i=ce(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const Dr=Object(v.a)({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const a=new Tr(e,n,r,!1,s),i=ce(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const _r=Object(v.a)({randomUniform_:function(t,e=0,n=1,r="float32",s){const a=ce(t,r),i=new $r(e,n,null,s);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}});function Fr(t,e){Object(I.assertNonNull)(t);const n=Object(w.c)(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Object(hn.a)(t,null,n,e)}function Mr(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:t,stop:e,step:n,dtype:r};return g.a.runKernelFunc(()=>{if(t===e||t<e&&n<0||e<t&&n>1)return qn([0],r);const s=Math.abs(Math.ceil((e-t)/n)),a=Object(I.makeZerosTypedArray)(s,r);e<t&&1===n&&(n=-1),a[0]=t;for(let t=1;t<a.length;t++)a[t]=a[t-1]+n;return Fr(a,r)},{},null,x.bc,s)}const zr=Object(v.a)({reciprocal_:function(t){const e=Object(w.a)(t,"x","reciprocal"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.reciprocal(e);return n([e]),r},n,null,x.dc)}});const Lr=Object(v.a)({relu_:function(t){const e=Object(w.a)(t,"x","relu"),n={x:e};return g.a.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?K(e,"int32"):t.relu(e)),n,null,x.ec)}});const Br=Object(v.a)({relu6_:function(t){const e=Object(w.a)(t,"x","relu6"),n={x:e};return g.a.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?K(e,"int32"):t.relu6(e)),n,null,x.fc)}});const Pr=Object(v.a)({reverse1d_:function(t){const e=Object(w.a)(t,"x","reverse");return I.assert(1===e.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),cn(e,0)}});const Wr=Object(v.a)({reverse2d_:function(t,e){const n=Object(w.a)(t,"x","reverse");return I.assert(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),cn(n,e)}});const Vr=Object(v.a)({reverse3d_:function(t,e){const n=Object(w.a)(t,"x","reverse");return I.assert(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),cn(n,e)}});const Ur=Object(v.a)({reverse4d_:function(t,e){const n=Object(w.a)(t,"x","reverse");return I.assert(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),cn(n,e)}});function Gr(t,e,n=0){let r=[];if("number"==typeof e)Object(I.assert)(t.shape[n]%e==0,()=>"Number of splits must evenly divide the axis."),r=new Array(e).fill(t.shape[n]/e);else{const s=e.reduce((t,e)=>(-1===e&&(t+=1),t),0);Object(I.assert)(s<=1,()=>"There should be only one negative value in split array.");const a=e.indexOf(-1);if(-1!==a){const r=e.reduce((t,e)=>e>0?t+e:t);e[a]=t.shape[n]-r}Object(I.assert)(t.shape[n]===e.reduce((t,e)=>t+e),()=>"The sum of sizes must match the size of the axis dimension."),r=e}return r}const Hr=Object(v.a)({split_:function(t,e,n=0){const r=Object(w.a)(t,"x","split"),s={x:r},a={numOrSizeSplits:e,axis:n};return g.a.runKernelFunc((t,s)=>{const a=Object(I.parseAxisParam)(n,r.shape)[0],i=Gr(r,e,a);return t.split(r,i,a)},s,null,x.Bc,a)}});const qr=Object(v.a)({rfft_:function(t,e){Object(I.assert)("float32"===t.dtype,()=>"The dtype for rfft() must be real value but got "+t.dtype);let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map(t=>0),a=t.shape.map(t=>t);a[t.shape.length-1]=e,s=Qt(t,r,a),n=e}else if(null!=e&&e>n){const r=t.shape.map(t=>t);r[t.shape.length-1]=e-n,s=_t([t,qn(r)],t.shape.length-1),n=e}else s=t;const a=Le(s),i=M(Object(pe.a)(s,a),[r,n]),o=Xe(i),u=Math.floor(n/2)+1,l=ln(o),c=un(o),h=Hr(l,[u,n-u],l.shape.length-1),d=Hr(c,[u,n-u],c.shape.length-1),p=s.shape.slice();return p[s.shape.length-1]=u,M(Object(pe.a)(h[0],d[0]),p)}});const Kr=Object(v.a)({round_:function(t){const e=Object(w.a)(t,"x","round"),n={x:e};return g.a.runKernelFunc(t=>t.round(e),n,null,x.nc)}});const Xr=Object(v.a)({rsqrt_:function(t){const e=Object(w.a)(t,"x","rsqrt"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.rsqrt(e);return n([e]),r},n,null,x.oc)}});const Yr=Object(v.a)({selu_:function(t){const e=Object(w.a)(t,"x","selu"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.selu(e);return n([e]),r},n,null,x.rc)}});const Jr=Object(v.a)({separableConv2d_:function(t,e,n,r,s,a=[1,1],i="NHWC"){const o=Object(w.a)(t,"x","separableConv2d"),u=Object(w.a)(e,"depthwiseFilter","separableConv2d"),l=Object(w.a)(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=M(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");I.assert(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),I.assert(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),I.assert(4===l.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),I.assert(1===l.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`),I.assert(1===l.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`);const d=u.shape[2],p=u.shape[3];I.assert(l.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${l.shape[2]}.`);const f=Ee(c,u,r,s,i,a),m=ye(f,l,1,"valid",i);return h?M(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Zr=async function(t,e){const n=Object(w.a)(t,"x","setdiff1d"),r=Object(w.a)(e,"y","setdiff1d");I.assert(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),I.assert(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),I.assert(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let t=0;t<s.length;t++)i.has(s[t])||o++;const u=new lt.b([o],n.dtype),l=new lt.b([o],"int32");for(let t=0,e=0;t<s.length;t++)i.has(s[t])||(u.values[e]=s[t],l.values[e]=t,e++);return[u.toTensor(),l.toTensor()]};const Qr=Object(v.a)({sign_:function(t){const e=Object(w.a)(t,"x","sign"),n={x:e};return g.a.runKernelFunc(t=>t.sign(e),n,null,x.tc)}});const ts=Object(v.a)({sin_:function(t){const e=Object(w.a)(t,"x","sin"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.sin(e);return n([e]),r},n,null,x.uc)}});const es=Object(v.a)({sinh_:function(t){const e=Object(w.a)(t,"x","sinh"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.sinh(e);return n([e]),r},n,null,x.vc)}});const ns=Object(v.a)({slice1d_:function(t,e,n){const r=Object(w.a)(t,"x","slice1d");return I.assert(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),Qt(r,[e],[n])}});const rs=Object(v.a)({slice2d_:function(t,e,n){const r=Object(w.a)(t,"x","slice2d");return I.assert(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),Qt(r,e,n)}});const ss=Object(v.a)({slice3d_:function(t,e,n){const r=Object(w.a)(t,"x","slice3d");return I.assert(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),Qt(r,e,n)}});const as=Object(v.a)({slice4d_:function(t,e,n){const r=Object(w.a)(t,"x","slice4d");return I.assert(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),Qt(r,e,n)}});const is=Object(v.a)({softmax_:function(t,e=-1){const n=Object(w.a)(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},s={dim:e};return g.a.runKernelFunc((t,r)=>{const s=t.softmax(n,e);return r([s]),s},r,null,x.xc,s)}});const os=Object(v.a)({sqrt_:function(t){const e=Object(w.a)(t,"x","sqrt"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.sqrt(e);return n([e]),r},n,null,x.Cc)}});const us=Object(v.a)({squaredDifference_:function(t,e){let n=Object(w.a)(t,"a","squaredDifference"),r=Object(w.a)(e,"b","squaredDifference");[n,r]=Object(C.makeTypesMatch)(n,r),Fe(n.shape,r.shape);const s={a:n,b:r};return g.a.runKernelFunc((t,e)=>{const s=t.squaredDifference(n,r);return e([n,r]),s},s,null,x.Ec,{})}});const ls=Object(v.a)({squeeze_:function(t,e){const n=Object(w.a)(t,"x","squeeze");return M(n,Object(I.squeezeShape)(n.shape,e).newShape)}});const cs=Object(v.a)({stack_:function(t,e=0){const n=Object(w.b)(t,"tensors","stack");if(I.assert(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return Ge(n[0],e);const r=n[0].rank,s=n[0].shape,a=n[0].dtype;I.assert(e<=r,()=>"Axis must be <= rank of the tensor"),n.forEach(t=>{I.assertShapesMatch(s,t.shape,"All tensors passed to stack must have matching shapes"),I.assert(a===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=n.map(t=>Ge(t,e));return _t(i,e)}});const hs=Object(v.a)({step_:function(t,e=0){const n=Object(w.a)(t,"x","step"),r={x:n},s={alpha:e};return g.a.runKernelFunc(t=>t.step(n,e),r,null,x.Fc,s)}});const ds=Object(v.a)({stridedSlice_:function(t,e,n,r,s=0,a=0,i=0,o=0,u=0){null==r&&(r=new Array(e.length));let l=Object(w.a)(t,"x","stridedSlice");const c={x:l},h={begin:e,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};return g.a.runKernelFunc(t=>{const c=Bt(i);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=l.rank-e.length,d=Bt(o),p=l.shape.slice();if(d.forEach(t=>{e[t]=0,n[t]=1,p.splice(t,0,1)}),l=M(l,p),c.length&&h>0){const t=c[0],i=h+1;e=Gt(s,t,i,e,l.shape),n=Ht(a,t,i,n,l.shape),r=Wt(r,t,i,l.shape)}else for(let t=0;t<l.rank;t++)e[t]=Kt(s,e,r,l.shape,t,i),n[t]=Xt(a,n,r,l.shape,t,i),r[t]=qt(r,t,i);const f=Bt(u);f.forEach(t=>{n[t]=e[t]+1,r[t]=1});const m=Pt(e,n,r),g=m.filter((t,e)=>-1===f.indexOf(e));if(r.every(t=>1===t))return M(Qt(l,e,m),g);const b=t.stridedSlice(l,e,n,r);return M(b,g)},c,null,x.Gc,h)}});const ps=Object(v.a)({tan_:function(t){const e=Object(w.a)(t,"x","tan"),n={x:e};return g.a.runKernelFunc((t,n)=>{const r=t.tan(e);return n([e]),r},n,null,x.Jc)}});function fs(t,e,n){if(Object(I.assertNonNull)(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Object(w.c)(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Object(hn.a)(t,e,r,n)}function ms(t,e,n){if(Object(I.assertNonNull)(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Object(w.c)(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Object(hn.a)(t,e,r,n)}function gs(t,e,n){if(Object(I.assertNonNull)(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Object(w.c)(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Object(hn.a)(t,e,r,n)}function bs(t,e,n){if(Object(I.assertNonNull)(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Object(w.c)(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Object(hn.a)(t,e,r,n)}function ys(t,e,n){if(Object(I.assertNonNull)(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Object(w.c)(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return e=e||r,Object(hn.a)(t,e,r,n)}const xs=Object(v.a)({topk_:function(t,e=1,n=!0){const r=Object(w.a)(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got `+e);const a={x:r},i={k:e,sorted:n},[o,u]=g.a.runKernelFunc(t=>t.topk(r,e,n),a,null,x.Mc,i);return{values:o,indices:u}}});const ws=Object(v.a)({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Tr(e,n,r,!0,s),i=ce(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const vs=Object(v.a)({unsortedSegmentSum_:function(t,e,n){const r=Object(w.a)(t,"x","unsortedSegmentSum"),s=Object(w.a)(e,"segmentIds","unsortedSegmentSum","int32");Object(I.assert)(Object(I.isInt)(n),()=>"numSegments must be of dtype int");const a={x:r,segmentIds:s},i={numSegments:n};return g.a.runKernelFunc((t,e)=>{const a=t.unsortedSegmentSum(r,s,n);return e([s]),a},a,null,x.Pc,i)}});const Os=Object(v.a)({unstack_:function(t,e=0){const n=Object(w.a)(t,"x","unstack");I.assert(e>=-n.shape.length&&e<n.shape.length,()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`),e<0&&(e+=n.shape.length);const r={value:n},s={axis:e};return g.a.runKernelFunc(t=>t.unstack(n,e),r,null,x.Oc,s)}});function ks(t,e=!0,n,r){return g.a.makeVariable(t,e,n,r)}function Ss(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=ce(t,"int32"),s=ce([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=r.indexToLoc(n[e]),i=e*t.length;s.values.set(a,i)}return s.toTensor()}const Cs=async function(t){const e=Object(w.a)(t,"condition","whereAsync","bool"),n=await e.data(),r=Ss(e.shape,n);return t!==e&&e.dispose(),r};const Ns=async function(t,e,n){const r=Object(w.a)(t,"tensor","boolMask"),s=Object(w.a)(e,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;I.assert(i>0,()=>"mask cannot be scalar"),I.assertShapesMatch(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let t=a;t<a+i;t++)u*=o[t];const l=o.slice(0,a).concat([u],o.slice(a+i)),c=M(r,l),h=M(s,[-1]),d=await Cs(h),p=ls(d,[1]),f=rn(c,p,a);return t!==r&&r.dispose(),e!==s&&s.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f};const Is=Object(v.a)({equalStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","equalStrict"),r=Object(w.a)(e,"b","equalStrict");return Object(I.assertShapesMatch)(n.shape,r.shape,"Error in equalStrict: "),Me(n,r)}}),As=Object(v.a)({greaterEqualStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","greaterEqualStrict"),r=Object(w.a)(e,"b","greaterEqualStrict");return Object(I.assertShapesMatch)(n.shape,r.shape,"Error in greaterEqualStrict: "),an(n,r)}}),Es=Object(v.a)({greaterStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","greaterStrict"),r=Object(w.a)(e,"b","greaterStrict");return Object(I.assertShapesMatch)(n.shape,r.shape,"Error in greaterStrict: "),sn(n,r)}}),Ts=Object(v.a)({lessEqualStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","lessEqualStrict"),r=Object(w.a)(e,"b","lessEqualStrict");return Object(I.assertShapesMatch)(n.shape,r.shape,"Error in lessEqualStrict: "),wn(n,r)}}),Rs=Object(v.a)({lessStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","lessStrict"),r=Object(w.a)(e,"b","lessStrict");return Object(I.assertShapesMatch)(n.shape,r.shape,"Error in lessStrict: "),xn(n,r)}}),$s=Object(v.a)({notEqualStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","notEqualStrict"),r=Object(w.a)(e,"b","notEqualStrict");return Object(I.assertShapesMatch)(n.shape,r.shape,"Error in notEqualStrict: "),rr(n,r)}});const js=Object(v.a)({addStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","addStrict"),r=Object(w.a)(e,"b","addStrict");return I.assertShapesMatch(n.shape,r.shape,"Error in addStrict: "),N(n,r)}}),Ds=Object(v.a)({divStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","div"),r=Object(w.a)(e,"b","div");return I.assertShapesMatch(n.shape,r.shape,"Error in divideStrict: "),je(n,r)}}),_s=Object(v.a)({maximumStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","maximumStrict"),r=Object(w.a)(e,"b","maximumStrict");return I.assertShapesMatch(n.shape,r.shape,"Error in maximumStrict: "),bn(n,r)}}),Fs=Object(v.a)({minimumStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","minimumStrict"),r=Object(w.a)(e,"b","minimumStrict");return I.assertShapesMatch(n.shape,r.shape,"Error in minimumStrict: "),Jn(n,r)}}),Ms=Object(v.a)({modStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","modStrict"),r=Object(w.a)(e,"b","modStrict");return I.assertShapesMatch(n.shape,r.shape,"Error in modStrict: "),Zn(n,r)}}),zs=Object(v.a)({mulStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","mul"),r=Object(w.a)(e,"b","mul");return I.assertShapesMatch(n.shape,r.shape,"Error in multiplyStrict: "),Mt(n,r)}}),Ls=Object(v.a)({powStrict_:function(t,e){return pt("strict variants of ops have been deprecated and will be removed in future"),I.assertShapesMatch(t.shape,e.shape,"Error in powStrict: "),fr(t,e)}}),Bs=Object(v.a)({squaredDifferenceStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","squaredDifferenceStrict"),r=Object(w.a)(e,"b","squaredDifferenceStrict");return I.assertShapesMatch(n.shape,r.shape,"Error in squaredDifferenceStrict: "),us(n,r)}}),Ps=Object(v.a)({subStrict_:function(t,e){pt("strict variants of ops have been deprecated and will be removed in future");const n=Object(w.a)(t,"a","subStrict"),r=Object(w.a)(e,"b","subStrict");return I.assertShapesMatch(n.shape,r.shape,"Error in subStrict: "),Fn(n,r)}});function Ws(t,e,n=null){if(0===t.rank)return O(t);if(1!==t.rank&&null===n)return Ws(M(t,[-1]),e,n);if(1===t.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===e)return Mn(O(t),n);if(e===1/0)return _n(O(t),n);if(e===-1/0)return Yn(O(t),n);if("euclidean"===e||2===e)return os(Mn(fr(O(t),dn(2,"int32")),n));throw new Error("Error in norm: invalid ord value: "+e)}if(Array.isArray(n)&&2===n.length){if(1===e)return _n(Mn(O(t),n[0]),n[1]-1);if(e===1/0)return _n(Mn(O(t),n[1]),n[0]);if(e===-1/0)return Yn(Mn(O(t),n[1]),n[0]);if("fro"===e||"euclidean"===e)return os(Mn(Qn(t),n));throw new Error("Error in norm: invalid ord value: "+e)}throw new Error("Error in norm: invalid axis: "+n)}const Vs=Object(v.a)({norm_:function(t,e="euclidean",n=null,r=!1){const s=Ws(t=Object(w.a)(t,"x","norm"),e,n);let a=s.shape;if(r){const e=Object(I.parseAxisParam)(n,t.shape);a=$(s.shape,e)}return M(s,a)}});const Us=Object(v.a)({movingAverage_:function(t,e,n,r,s=!0){const a=Object(w.a)(t,"v","movingAverage"),i=Object(w.a)(e,"x","movingAverage"),o=Object(w.a)(n,"decay","movingAverage");Object(C.assertTypesMatch)(a,i),I.assert(I.arraysEqual(a.shape,i.shape),()=>"Shape mismatch in v and x");const u=dn(1),l=Fn(u,o);let c=Mt(Fn(i,a),l);if(s){I.assert(null!=r,()=>"When using zeroDebias: true, step is required.");const t=Object(w.a)(r,"step","movingAverage");c=je(c,Fn(u,fr(o,t)))}return N(a,c)}});function Gs(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(a+" Output shape length < "+(r+(n.rank-s)));if(n.rank!==s+t.length-r)throw new Error(a+" update.rank != "+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(a+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}function Hs(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}Gs(n,e,t)}function qs(t,e,n){const r=e.shape.length,s=r>1?e.shape[r-1]:1,a=n.length;let i=1;for(let t=s;t<a;++t)i*=n[t];const o=s<1?1:s;return{sliceRank:s,numUpdates:Object(I.sizeFromShape)(e.shape)/o,sliceSize:i,strides:[...Object(I.computeStrides)(n.slice(0,s)),1],outputSize:Object(I.sizeFromShape)(n)}}const Ks=Object(v.a)({scatterND_:function(t,e,n){const r=Object(w.a)(t,"indices","scatterND","int32"),s=Object(w.a)(e,"updates","scatterND");Hs(s,r,n);const a={indices:r,updates:s},i={shape:n};return g.a.runKernelFunc(t=>t.scatterND(r,s,n),a,null,x.pc,i)}});const Xs=Object(v.a)({sparseToDense_:function(t,e,n,r=0){const s=Object(w.a)(t,"sparseIndices","sparseToDense","int32"),a=Object(w.a)(e,"sparseValues","sparseToDense"),i=Object(w.a)(r,"defaultValue","sparseToDense",a.dtype);!function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=e.size;if(0!==e.rank&&(1!==e.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i);const o={sparseIndices:s,sparseValues:a,defaultValue:i},u={outputShape:n};return g.a.runKernelFunc(t=>t.sparseToDense(s,a,n,i),o,null,x.Ac,u)}});const Ys=Object(v.a)({gatherND_:function(t,e){const n=Object(w.a)(e,"indices","gatherND","int32"),r=Object(w.a)(t,"x","gatherND"),s={params:r,indices:n};return g.a.runKernelFunc(t=>t.gatherND(r,n),s,null,x.ib)}});const Js=Object(v.a)({dropout_:function(t,e,n,r){const s=Object(w.a)(t,"x","dropout");if(I.assert("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),I.assert(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),0===e)return t instanceof lt.a?s.clone():s;const a=function(t,e){if(null==e)return t.shape.slice();if(I.arraysEqual(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),i=1-e,o=je(Je(N(_r(a,0,1,"float32",r),i)),i);return Mt(s,o)}});function Zs(t){return Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2))))}function Qs(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let a=0;a<t;++a){const i=2*Math.PI*a/(t+r-1);s[a]=e-n*Math.cos(i)}return Fr(s,"float32")}const ta=async function(t,e,n=1){const r=Object(w.a)(t,"predictions","inTopK"),s=Object(w.a)(e,"targets","inTopK");Object(I.assert)(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank),Object(I.assert)(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),Object(I.assertShapesMatch)(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];Object(I.assert)(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const i=await r.data(),o=await s.data(),[u,l]=[i.length/a,a],c=Object(I.getTypedArrayFromDType)("bool",u);for(let t=0;t<u;t++){const e=t*l,r=i.subarray(e,e+l),s=[];for(let t=0;t<r.length;t++)s.push({value:r[t],index:t});s.sort((t,e)=>e.value-t.value),c[t]=0;for(let e=0;e<n;e++)if(s[e].index===o[t]){c[t]=1;break}}return t!==r&&r.dispose(),e!==s&&s.dispose(),Object(Dt.a)(c,s.shape,"bool")};const ea=Object(v.a)({conv2DBackpropFilter_:function(t,e,n,r,s,a="NHWC",i){let o=t;3===t.rank&&(o=M(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=M(e,[1,e.shape[0],e.shape[1],e.shape[2]])),I.assert(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),I.assert(4===u.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."),I.assert(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const l="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];I.assert(l===n[2],()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`),I.assert(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),null!=i&&I.assert(I.isInt(s),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const h={x:o,dy:u},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i};return g.a.runKernelFunc(t=>{const e=ot(a),l=Z(o.shape,n,r,1,s,i,!1,e);return t.conv2dDerFilter(o,u,l)},h,null,x.B,d)}});function na(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return Mt(t,hs(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function ra(t,e){let n=e;const r=_e(t.shape,e.shape);return r.length>0&&(n=Mn(n,r)),M(n,t.shape)}function sa(t,e,n){if("linear"===e)return t;if("relu"===e)return Lr(t);if("elu"===e)return We(t);if("relu6"===e)return Br(t);if("prelu"===e)return mr(t,n);throw new Error(`Unknown fused activation ${e}.`)}const aa=(t,e)=>!(t>0)||"linear"===e;const ia=Object(v.a)({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l}){if(u=u||"linear",!1===aa(g.a.state.gradientDepth,u)){let c=ye(t,e,n,r,s,a,i);return null!=o&&(c=N(c,o)),sa(c,u,l)}const c=Object(w.a)(t,"x","conv2d"),h=Object(w.a)(e,"filter","conv2d");let d=c,p=!1;3===c.rank&&(p=!0,d=M(c,[1,c.shape[0],c.shape[1],c.shape[2]])),I.assert(4===d.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+d.rank+"."),I.assert(4===h.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+h.rank+"."),null!=i&&I.assert(I.isInt(r),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),I.assert(d.shape[3]===h.shape[2],()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${h.shape[2]}.`),I.assert(it(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),I.assert("NHWC"===s,()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`);const f=Z(d.shape,h.shape,n,a,r,i);let m,b;null!=o&&(m=Object(w.a)(o,"bias","fused conv2d"),[m]=Object(C.makeTypesMatch)(m,c),Fe(f.outShape,m.shape)),null!=l&&(b=Object(w.a)(l,"prelu weights","fused conv2d"));const y=(t,e)=>{const[s,i,o,l]=e,c=na(t,o,u);I.assert(at(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const h=[we(i.shape,c,s,n,r),ea(i,c,s.shape,n,r)];if(null!=l){const t=ra(l,c);h.push(t)}return h},v=t=>t.fusedConv2d({input:d,filter:h,convInfo:f,bias:m,activation:u,preluActivationWeights:b}),O={x:d,filter:h,bias:m,preluActivationWeights:b},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u};if(null==o){return Tn((t,e,n)=>{let r=g.a.runKernelFunc(v,O,null,x.gb,k);return n([e,t,r]),p&&(r=M(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}})(d,h)}return Tn((t,e,n,r)=>{let s=g.a.runKernelFunc(v,O,null,x.gb,k);return r([e,t,s,n]),p&&(s=M(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}})(d,h,m)}});const oa=Object(v.a)({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r){let s=t;3===t.rank&&(s=M(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let a=e;3===a.rank&&(a=M(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={x:s,dy:a};return g.a.runKernelFunc(t=>t.depthwiseConv2DDerFilter(s,a,r),i,null,x.M)}});const ua=Object(v.a)({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r){let s=e,a=!1;3===e.rank&&(a=!0,s=M(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={dy:s},o=g.a.runKernelFunc(t=>t.depthwiseConv2DDerInput(s,n,r),i,null,x.N);return a?M(o,[o.shape[1],o.shape[2],o.shape[3]]):o}});const la=Object(v.a)({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l}){if(!1===aa(g.a.state.gradientDepth,u)){let c=Ee(t,e,n,r,s,a,i);return null!=o&&(c=N(c,o)),sa(c,u,l)}const c=Object(w.a)(t,"x","depthwiseConv2d"),h=Object(w.a)(e,"filter","depthwiseConv2d");let d=c,p=!1;3===c.rank&&(p=!0,d=M(c,[1,c.shape[0],c.shape[1],c.shape[2]])),I.assert(4===d.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),I.assert(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),I.assert(d.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==a&&(a=[1,1]),I.assert(it(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=i&&I.assert(I.isInt(r),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`);const f=Z(d.shape,h.shape,n,a,r,i,!0);let m,b;null!=o&&(m=Object(w.a)(o,"bias","fused conv2d"),[m]=Object(C.makeTypesMatch)(m,c),Fe(f.outShape,m.shape)),null!=l&&(b=Object(w.a)(l,"prelu weights","fused depthwiseConv2d"));const y=(t,e)=>{I.assert(at(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[n,r,s,i]=e,o=na(t,s,u),l=ua(r.shape,o,n,f),c=oa(r,o,n.shape,f);if(null!=i){return[l,c,ra(m,o)]}return[l,c]},v=t=>t.fusedDepthwiseConv2D({input:d,filter:h,convInfo:f,bias:m,activation:u,preluActivationWeights:b}),O={x:d,filter:h,bias:m,preluActivationWeights:b},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u};if(null==o){return Tn((t,e,n)=>{let r=g.a.runKernelFunc(v,O,null,x.hb,k);return n([e,t,r]),p&&(r=M(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}})(d,h)}return Tn((t,e,n,r)=>{let s=g.a.runKernelFunc(v,O,null,x.hb,k);return r([e,t,s,n]),p&&(s=M(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}})(d,h,m)}});const ca=Object(v.a)({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i}){if(!1===aa(g.a.state.gradientDepth,a)){let o=Ft(t,e,n,r);return null!=s&&(o=N(o,s)),sa(o,a,i)}let o=Object(w.a)(t,"a","fused matMul"),u=Object(w.a)(e,"b","fused matMul");[o,u]=Object(C.makeTypesMatch)(o,u);const l=n?o.shape[o.rank-2]:o.shape[o.rank-1],c=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],p=o.shape.slice(0,-2),f=u.shape.slice(0,-2),m=I.sizeFromShape(p),b=I.sizeFromShape(f);I.assert(o.rank>=2&&u.rank>=2&&o.rank===u.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${u.rank}.`),I.assert(I.arraysEqual(p,f),()=>`Error in fused matMul: outer dimensions (${p}) and (${f}) of Tensors with shapes ${o.shape} and `+u.shape+" must match."),I.assert(l===c,()=>`Error in fused matMul: inner shapes (${l}) and (${c}) of Tensors with shapes ${o.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`);const y=o.shape.slice(0,-2).concat([h,d]),v=M(o,n?[m,l,h]:[m,h,l]),O=M(u,r?[b,d,c]:[b,c,d]);let k,S;null!=s&&(k=Object(w.a)(s,"bias","fused matMul"),[k]=Object(C.makeTypesMatch)(k,o),Fe(y,k.shape)),null!=i&&(S=Object(w.a)(i,"prelu weights","fused matMul"));const A=(t,e)=>{const[i,o,u,l]=e,c=na(M(t,u.shape),u,a);let h,d;if(n||r?!n&&r?(h=Ft(c,o,!1,!1),d=Ft(c,i,!0,!1)):n&&!r?(h=Ft(o,c,!1,!0),d=Ft(i,c,!1,!1)):(h=Ft(o,c,!0,!0),d=Ft(c,i,!0,!0)):(h=Ft(c,o,!1,!0),d=Ft(i,c,!0,!1)),null!=s){return[h,d,ra(l,c)]}return[h,d]},E=t=>t.fusedBatchMatMul({a:v,b:O,transposeA:n,transposeB:r,bias:k,activation:a,preluActivationWeights:S}),T={a:v,b:O,bias:k,preluActivationWeights:S},R={transposeA:n,transposeB:r,activation:a};if(null==s){return Tn((t,e,n)=>{const r=g.a.runKernelFunc(E,T,null,x.Rc,R);return n([t,e,r]),{value:M(r,y),gradFunc:A}})(v,O)}return Tn((t,e,n,r)=>{const s=g.a.runKernelFunc(E,T,null,x.Rc,R);return r([t,e,s,n]),{value:M(s,y),gradFunc:A}})(v,O,k)}});const ha=Object(v.a)({hammingWindow_:function(t){return Qs(t,.54,.46)}});const da=Object(v.a)({hannWindow_:function(t){return Qs(t,.5,.5)}});const pa=Object(v.a)({frame_:function(t,e,n,r=!1,s=0){let a=0;const i=[];for(;a+e<=t.size;)i.push(Qt(t,a,e)),a+=n;if(r)for(;a<t.size;){const r=a+e-t.size,o=_t([Qt(t,a,e-r),Ye([r],s)]);i.push(o),a+=n}return 0===i.length?fs([],[0,e]):M(_t(i),[i.length,e])}});const fa=Object(v.a)({stft_:function(t,e,n,r,s=da){null==r&&(r=Zs(e));const a=pa(t,e,n),i=Mt(a,s(e)),o=[];for(let t=0;t<a.shape[0];t++)o.push(qr(Qt(i,[t,0],[1,e]),r));return _t(o)}});const ma=Object(v.a)({cropAndResize_:function(t,e,n,r,s,a){const i=Object(w.a)(t,"image","cropAndResize"),o=Object(w.a)(e,"boxes","cropAndResize","float32"),u=Object(w.a)(n,"boxInd","cropAndResize","int32");s=s||"bilinear",a=a||0;const l=o.shape[0];I.assert(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),I.assert(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${o.shape}.`),I.assert(1===u.rank&&u.shape[0]===l,()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${o.shape}.`),I.assert(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),I.assert(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),I.assert("bilinear"===s||"nearest"===s,()=>"method must be bilinear or nearest, but was "+s);const c={image:i,boxes:o,boxInd:u},h={method:s,extrapolationValue:a,cropSize:r};return g.a.runKernelFunc(t=>t.cropAndResize(i,o,u,r,s,a),c,null,x.I,h)}});const ga=Object(v.a)({flipLeftRight_:function(t){const e=Object(w.a)(t,"image","flipLeftRight","float32");I.assert(4===e.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);const n={image:e};return g.a.runKernel(x.bb,n,{})}});const ba=Object(v.a)({rotateWithOffset_:function(t,e,n=0,r=.5){const s=Object(w.a)(t,"image","rotateWithOffset","float32");I.assert(4===s.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`);const a={image:s},i={radians:e,fillValue:n,center:r};return g.a.runKernel(x.mc,a,i)}});function ya(t,e,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=t.shape[0];return n=Math.min(n,i),I.assert(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),I.assert(2===t.rank,()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`),I.assert(4===t.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]),I.assert(1===e.rank,()=>"scores must be a 1D tensor"),I.assert(e.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+e.shape[0]),I.assert(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const xa=Object(v.a)({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Object(w.a)(t,"boxes","nonMaxSuppression"),i=Object(w.a)(e,"scores","nonMaxSuppression"),o=ya(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u={maxOutputSize:n,iouThreshold:r,scoreThreshold:s};return g.a.runKernelFunc(t=>t.nonMaxSuppression(a,i,n,r,s),{boxes:a,scores:i},null,x.Qb,u)}});function wa(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(e,t[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(t,e,n||va)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function va(t,e){return t>e?1:t<e?-1:0}function Oa(t,e,n,r,s){return Ca(t,e,n,r,s,0).selectedIndices}function ka(t,e,n,r,s,a){return Ca(t,e,n,r,s,0,!1,a,!0)}function Sa(t,e,n,r,s,a){return Ca(t,e,n,r,s,a,!0)}function Ca(t,e,n,r,s,a,i=!1,o=!1,u=!1){const l=[];for(let t=0;t<e.length;t++)e[t]>s&&l.push({score:e[t],boxIndex:t,suppressBeginIndex:0});l.sort(Aa);const c=a>0?-.5/a:0,h=[],d=[];for(;h.length<n&&l.length>0;){const e=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=e;if(n<s)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Na(t,a,h[n]);if(i>=r){o=!0;break}if(e.score=e.score*Ia(r,c,i),e.score<=s)break}e.suppressBeginIndex=h.length,o||(e.score===n?(h.push(a),d.push(e.score)):e.score>s&&wa(l,e,Aa))}const p=h.length,f=n-p;o&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:Fr(h,"int32")};return i&&(m.selectedScores=Fr(d,"float32")),u&&(m.validOutputs=dn(p,"int32")),m}function Na(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),d=Math.max(s[1],s[3]),p=(o-a)*(u-i),f=(h-l)*(d-c);if(p<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(i,c),b=Math.min(o,h),y=Math.min(u,d),x=Math.max(b-m,0)*Math.max(y-g,0);return x/(p+f-x)}function Ia(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function Aa(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const Ea=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Object(w.a)(t,"boxes","nonMaxSuppressionAsync"),i=Object(w.a)(e,"scores","nonMaxSuppressionAsync"),o=ya(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),l=Oa(u[0],u[1],n,r,s);return a!==t&&a.dispose(),i!==e&&i.dispose(),l};const Ta=Object(v.a)({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Object(w.a)(t,"boxes","nonMaxSuppression"),o=Object(w.a)(e,"scores","nonMaxSuppression"),u=ya(i,o,n,r,s,a),l={boxes:i,scores:o},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},h=g.a.runKernel(x.Sb,l,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const Ra=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Object(w.a)(t,"boxes","nonMaxSuppressionAsync"),o=Object(w.a)(e,"scores","nonMaxSuppressionAsync"),u=ya(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),c=Sa(l[0],l[1],n,r,s,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),c};const $a=Object(v.a)({nonMaxSuppressionPadded_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Object(w.a)(t,"boxes","nonMaxSuppression"),o=Object(w.a)(e,"scores","nonMaxSuppression"),u=ya(i,o,n,r,s,null),l={boxes:i,scores:o},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},h=g.a.runKernel(x.Rb,l,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const ja=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Object(w.a)(t,"boxes","nonMaxSuppressionAsync"),o=Object(w.a)(e,"scores","nonMaxSuppressionAsync"),u=ya(i,o,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,h=u.scoreThreshold,[d,p]=await Promise.all([i.data(),o.data()]),f=ka(d,p,l,c,h,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),f};const Da=Object(v.a)({resizeBilinear_:function(t,e,n=!1){const r=Object(w.a)(t,"images","resizeBilinear");I.assert(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),I.assert(2===e.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+e+".");let s=r,a=!1;3===r.rank&&(a=!0,s=M(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[i,o]=e,u={images:s},l={alignCorners:n,size:e},c=g.a.runKernelFunc((t,e)=>(e([s]),t.resizeBilinear(s,i,o,n)),u,null,x.hc,l);return a?M(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const _a=Object(v.a)({resizeNearestNeighbor_:function(t,e,n=!1){const r=Object(w.a)(t,"images","resizeNearestNeighbor");I.assert(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),I.assert(2===e.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."),I.assert("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype");let s=r,a=!1;3===r.rank&&(a=!0,s=M(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[i,o]=e,u={images:s},l={alignCorners:n,size:e},c=g.a.runKernelFunc((t,e)=>(e([s]),t.resizeNearestNeighbor(s,i,o,n)),u,null,x.jc,l);return a?M(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Fa=Object(v.a)({bandPart_:function(t,e,n){Object(I.assert)(e%1==0,()=>`bandPart(): numLower must be an integer, got ${e}.`),Object(I.assert)(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const r=Object(w.a)(t,"a","bandPart");Object(I.assert)(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,i]=r.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);e<0&&(e=a),n<0&&(n=i);const o=M(Mr(0,a,1,"int32"),[-1,1]),u=Mr(0,i,1,"int32"),l=Fn(o,u),c=Bn(wn(l,dn(+e,"int32")),an(l,dn(-n,"int32"))),h=qn([a,i],r.dtype);return M(cs(Os(M(r,[-1,a,i])).map(t=>ze(c,t,h))),s)}});const Ma=Object(v.a)({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,Object(I.assert)(null!=t&&t.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=t[0].shape[0];for(let e=1;e<t.length;++e)Object(I.assert)(t[e].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`)}else e=!0,t=Hr(t,t.shape[0],0).map(t=>ls(t,[0]));Object(I.assert)(t.length<=t[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`);const n=[],r=t;for(let e=0;e<t.length;++e)n.push(g.a.tidy(()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=Mt(Mn(Mt(n[r],t)),n[r]);t=Fn(t,e)}return je(t,Vs(t,"euclidean"))}));return e?cs(n,0):n}});function za(t,e=!1){return g.a.tidy(()=>{Object(I.assert)(2===t.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`);const n=t.shape[0],r=t.shape[1];let s=Ke(n),a=ue(t);const i=fs([[1]],[1,1]);let o=ue(i);const u=n>=r?r:n;for(let t=0;t<u;++t){const e=a,u=o,l=s;[o,a,s]=g.a.tidy(()=>{const e=Qt(a,[t,t],[n-t,1]),u=Vs(e),l=Qt(a,[t,t],[1,1]),c=ze(sn(l,0),fs([[-1]]),fs([[1]])),h=Fn(l,Mt(c,u)),d=je(e,h);o=1===d.shape[0]?ue(i):_t([i,Qt(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=$n(je(Ft(c,h),u)),f=Qt(a,[t,0],[n-t,r]),m=Mt(p,o),g=z(o);if(0===t)a=Fn(f,Ft(m,Ft(g,f)));else{const e=Fn(f,Ft(m,Ft(g,f)));a=_t([Qt(a,[0,0],[t,r]),e],0)}const b=z(m),y=Qt(s,[0,t],[n,s.shape[1]-t]);if(0===t)s=Fn(y,Ft(Ft(y,o),b));else{const e=Fn(y,Ft(Ft(y,o),b));s=_t([Qt(s,[0,0],[n,t]),e],1)}return[o,a,s]}),xt([e,u,l])}return!e&&n>r&&(s=Qt(s,[0,0],[n,r]),a=Qt(a,[0,0],[r,r])),[s,a]})}const La=Object(v.a)({qr_:function(t,e=!1){if(Object(I.assert)(t.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+t.rank),2===t.rank)return za(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce((t,e)=>t*e),r=Os(M(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],a=[];r.forEach(t=>{const[n,r]=za(t,e);s.push(n),a.push(r)});return[M(cs(s,0),t.shape),M(cs(a,0),t.shape)]}}});var Ba;!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Ba||(Ba={}));const Pa=Object(v.a)({computeWeightedLoss_:function(t,e,n=Ba.SUM_BY_NONZERO_WEIGHTS){const r=Object(w.a)(t,"losses","computeWeightedLoss");let s=null;null!=e&&(s=Object(w.a)(e,"weights","computeWeightedLoss"));const a=null==s?r:Mt(r,s);if(n===Ba.NONE)return a;if(n===Ba.SUM)return Mn(a);if(n===Ba.MEAN){if(null==s)return Xn(a);{const t=r.size/s.size,e=je(Mn(a),Mn(s));return t>1?je(e,dn(t)):e}}if(n===Ba.SUM_BY_NONZERO_WEIGHTS){if(null==s)return je(Mn(a),dn(r.size));{const t=Mt(s,Kn(r.shape)),e=K(Mn(rr(t,dn(0))),"float32");return je(Mn(a),e)}}throw Error("Unknown reduction: "+n)}});const Wa=Object(v.a)({absoluteDifference_:function(t,e,n,r=Ba.SUM_BY_NONZERO_WEIGHTS){const s=Object(w.a)(t,"labels","absoluteDifference"),a=Object(w.a)(e,"predictions","absoluteDifference");let i=null;null!=n&&(i=Object(w.a)(n,"weights","absoluteDifference")),Object(I.assertShapesMatch)(s.shape,a.shape,"Error in absoluteDifference: ");const o=O(Fn(s,a));return Pa(o,i,r)}});const Va=Object(v.a)({cosineDistance_:function(t,e,n,r,s=Ba.SUM_BY_NONZERO_WEIGHTS){const a=Object(w.a)(t,"labels","cosineDistance"),i=Object(w.a)(e,"predictions","cosineDistance");let o=null;null!=r&&(o=Object(w.a)(r,"weights","cosineDistance")),Object(I.assertShapesMatch)(a.shape,i.shape,"Error in cosineDistance: ");const u=dn(1),l=Fn(u,Mn(Mt(a,i),n,!0));return Pa(l,o,s)}});const Ua=Object(v.a)({hingeLoss_:function(t,e,n,r=Ba.SUM_BY_NONZERO_WEIGHTS){let s=Object(w.a)(t,"labels","hingeLoss");const a=Object(w.a)(e,"predictions","hingeLoss");let i=null;null!=n&&(i=Object(w.a)(n,"weights","hingeLoss")),Object(I.assertShapesMatch)(s.shape,a.shape,"Error in hingeLoss: ");const o=dn(1);s=Fn(Mt(dn(2),s),o);const u=Lr(Fn(o,Mt(s,a)));return Pa(u,i,r)}});const Ga=Object(v.a)({huberLoss_:function(t,e,n,r=1,s=Ba.SUM_BY_NONZERO_WEIGHTS){const a=Object(w.a)(t,"labels","huberLoss"),i=Object(w.a)(e,"predictions","huberLoss");let o=null;null!=n&&(o=Object(w.a)(n,"weights","huberLoss")),Object(I.assertShapesMatch)(a.shape,i.shape,"Error in huberLoss: ");const u=dn(r),l=O(Fn(i,a)),c=Jn(l,u),h=Fn(l,c),d=N(Mt(dn(.5),Qn(c)),Mt(u,h));return Pa(d,o,s)}});const Ha=Object(v.a)({logLoss_:function(t,e,n,r=1e-7,s=Ba.SUM_BY_NONZERO_WEIGHTS){const a=Object(w.a)(t,"labels","logLoss"),i=Object(w.a)(e,"predictions","logLoss");let o=null;null!=n&&(o=Object(w.a)(n,"weights","logLoss")),Object(I.assertShapesMatch)(a.shape,i.shape,"Error in logLoss: ");const u=dn(1),l=dn(r),c=$n(Mt(a,kn(N(i,l)))),h=Mt(Fn(u,a),kn(N(Fn(u,i),l))),d=Fn(c,h);return Pa(d,o,s)}});const qa=Object(v.a)({meanSquaredError_:function(t,e,n,r=Ba.SUM_BY_NONZERO_WEIGHTS){const s=Object(w.a)(t,"labels","meanSquaredError"),a=Object(w.a)(e,"predictions","meanSquaredError");let i=null;null!=n&&(i=Object(w.a)(n,"weights","meanSquaredError")),Object(I.assertShapesMatch)(s.shape,a.shape,"Error in meanSquaredError: ");const o=us(s,a);return Pa(o,i,r)}});const Ka=Object(v.a)({sigmoidCrossEntropy_:function(t,e,n,r=0,s=Ba.SUM_BY_NONZERO_WEIGHTS){let a=Object(w.a)(t,"multiClassLabels","sigmoidCrossEntropy");const i=Object(w.a)(e,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Object(w.a)(n,"weights","sigmoidCrossEntropy")),Object(I.assertShapesMatch)(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=dn(r),e=dn(1),n=dn(.5);a=N(Mt(a,Fn(e,t)),Mt(n,t))}const u=function(t,e){const n=Object(w.a)(t,"labels","sigmoidCrossEntropyWithLogits"),r=Object(w.a)(e,"logits","sigmoidCrossEntropyWithLogits");Object(I.assertShapesMatch)(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Lr(r),a=Mt(r,n),i=Sn(Ue($n(O(r))));return N(Fn(s,a),i)}(a,i);return Pa(u,o,s)}});const Xa=Object(v.a)({softmaxCrossEntropy_:function(t,e,n,r=0,s=Ba.SUM_BY_NONZERO_WEIGHTS){let a=Object(w.a)(t,"onehotLabels","softmaxCrossEntropy");const i=Object(w.a)(e,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Object(w.a)(n,"weights","softmaxCrossEntropy")),Object(I.assertShapesMatch)(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const t=dn(r),e=dn(1),n=dn(a.shape[1]);a=N(Mt(a,Fn(e,t)),je(t,n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was `+n);return Tn((t,e,r)=>{const s=Ln(e,[n],!0),a=Fn(K(e,"float32"),s);r([t,a]);const i=$n(Mt(a,t));return{value:Mn(i,[n]),gradFunc:(t,e)=>{const[r,s]=e,a=$(t.shape,[n]);return[Mt(M(t,a),Fn(K(r,"float32"),Ue(s))),Mt(M(t,a),Fn(Ue(s),K(r,"float32")))]}}})(t,e)}(a,i);return Pa(u,o,s)}}),Ya={fft:Xe,ifft:on,rfft:qr,irfft:pn},Ja={hammingWindow:ha,hannWindow:da,frame:pa,stft:fa},Za={flipLeftRight:ga,resizeNearestNeighbor:_a,resizeBilinear:Da,rotateWithOffset:ba,cropAndResize:ma,nonMaxSuppression:xa,nonMaxSuppressionAsync:Ea,nonMaxSuppressionWithScore:Ta,nonMaxSuppressionWithScoreAsync:Ra,nonMaxSuppressionPadded:$a,nonMaxSuppressionPaddedAsync:ja},Qa={bandPart:Fa,gramSchmidt:Ma,qr:La},ti={absoluteDifference:Wa,computeWeightedLoss:Pa,cosineDistance:Va,hingeLoss:Ua,huberLoss:Ga,logLoss:Ha,meanSquaredError:qa,sigmoidCrossEntropy:Ka,softmaxCrossEntropy:Xa};Object(lt.e)(u);var ei=n(10);class ni{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==ni.instance&&(ni.instance=new ni),ni.instance}static registerSaveRouter(t){ni.getInstance().saveRouters.push(t)}static registerLoadRouter(t){ni.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return ni.getHandlers(t,"save")}static getLoadHandlers(t,e){return ni.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?ni.getInstance().loadRouters:ni.getInstance().saveRouters).forEach(e=>{const s=e(t,n);null!==s&&r.push(s)}),r}}const ri=t=>ni.registerSaveRouter(t),si=t=>ni.registerLoadRouter(t),ai=t=>ni.getSaveHandlers(t),ii=(t,e)=>ni.getLoadHandlers(t,e),oi="://";class ui{constructor(){this.managers={}}static getInstance(){return null==ui.instance&&(ui.instance=new ui),ui.instance}static registerManager(t,e){Object(I.assert)(null!=t,()=>"scheme must not be undefined or null."),t.endsWith(oi)&&(t=t.slice(0,t.indexOf(oi))),Object(I.assert)(t.length>0,()=>"scheme must not be an empty string.");const n=ui.getInstance();Object(I.assert)(null==n.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}function li(t){if(-1===t.indexOf(oi))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+ui.getSchemes().join(","));return{scheme:t.split(oi)[0],path:t.split(oi)[1]}}async function ci(t,e,n=!1){Object(I.assert)(t!==e,()=>`Old path and new path are the same: '${t}'`);const r=ni.getLoadHandlers(t);Object(I.assert)(r.length>0,()=>`Copying failed because no load handler is found for source URL ${t}.`),Object(I.assert)(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${t}.`);const s=r[0],a=ni.getSaveHandlers(e);Object(I.assert)(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),Object(I.assert)(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`);const i=a[0],o=li(t).scheme,u=li(t).path,l=o===li(t).scheme,c=await s.load();n&&l&&await ui.getManager(o).removeModel(u);const h=await i.save(c);return n&&!l&&await ui.getManager(o).removeModel(u),h.modelArtifactsInfo}async function hi(){const t=ui.getSchemes(),e={};for(const n of t){const t=await ui.getManager(n).listModels();for(const r in t){e[n+oi+r]=t[r]}}return e}async function di(t){const e=li(t);return ui.getManager(e.scheme).removeModel(e.path)}async function pi(t,e){return ci(t,e,!1)}async function fi(t,e){return ci(t,e,!0)}const mi="tensorflowjs",gi="models_store",bi="model_info_store";function yi(){if(!Object(b.c)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function xi(t){const e=t.result;e.createObjectStore(gi,{keyPath:"modelPath"}),e.createObjectStore(bi,{keyPath:"modelPath"})}class wi{constructor(t){if(this.indexedDB=yi(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((t,n)=>{const r=this.indexedDB.open(mi,1);r.onupgradeneeded=()=>xi(r),r.onsuccess=()=>{const s=r.result;if(null==e){const e=s.transaction(gi,"readonly"),r=e.objectStore(gi).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(s.close(),n(r.error)),e.oncomplete=()=>s.close()}else{const r=Object(ei.g)(e),a=s.transaction(bi,"readwrite");let i=a.objectStore(bi);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;o.onsuccess=()=>{u=s.transaction(gi,"readwrite");const o=u.objectStore(gi).put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});o.onsuccess=()=>t({modelArtifactsInfo:r}),o.onerror=t=>{i=a.objectStore(bi);const e=i.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(o.error)),e.onerror=t=>(s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=t=>n(r.error)})}}wi.URL_SCHEME="indexeddb://";const vi=t=>{return Object(b.c)().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(wi.URL_SCHEME)?(e=t.slice(wi.URL_SCHEME.length),new wi(e)):null;var e};ni.registerSaveRouter(vi),ni.registerLoadRouter(vi);class Oi{constructor(){this.indexedDB=yi()}async listModels(){return new Promise((t,e)=>{const n=this.indexedDB.open(mi,1);n.onupgradeneeded=()=>xi(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(bi,"readonly"),a=s.objectStore(bi).getAll();a.onsuccess=()=>{const e={};for(const t of a.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},a.onerror=t=>(r.close(),e(a.error)),s.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)})}async removeModel(t){var e;return t=(e=t).startsWith(wi.URL_SCHEME)?e.slice(wi.URL_SCHEME.length):e,new Promise((e,n)=>{const r=this.indexedDB.open(mi,1);r.onupgradeneeded=()=>xi(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(bi,"readwrite"),i=a.objectStore(bi),o=i.get(t);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const r=i.delete(t),a=()=>{u=s.transaction(gi,"readwrite");const r=u.objectStore(gi).delete(t);r.onsuccess=()=>e(o.result.modelArtifactsInfo),r.onerror=t=>n(o.error)};r.onsuccess=a,r.onerror=t=>(a(),s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=t=>n(r.error)})}}if(Object(b.c)().getBool("IS_BROWSER"))try{ui.registerManager(wi.URL_SCHEME,new Oi)}catch(t){}const ki="/",Si="tensorflowjs_models",Ci="info",Ni="model_topology",Ii="weight_specs",Ai="weight_data",Ei="model_metadata";function Ti(t){return{info:[Si,t,Ci].join(ki),topology:[Si,t,Ni].join(ki),weightSpecs:[Si,t,Ii].join(ki),weightData:[Si,t,Ai].join(ki),modelMetadata:[Si,t,Ei].join(ki)}}function Ri(t){const e=t.split(ki);if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join(ki)}class $i{constructor(t){if(!Object(b.c)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=Ti(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=Object(ei.g)(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,Object(ei.a)(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=Object(ei.b)(a),e}}$i.URL_SCHEME="localstorage://";const ji=t=>{return Object(b.c)().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith($i.URL_SCHEME)?(e=t.slice($i.URL_SCHEME.length),new $i(e)):null;var e};ni.registerSaveRouter(ji),ni.registerLoadRouter(ji);class Di{constructor(){Object(I.assert)(Object(b.c)().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),Object(I.assert)("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const t={},e=Si+ki,n=ki+Ci;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(e)&&s.endsWith(n)){t[Ri(s)]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){var e;const n=Ti(t=(e=t).startsWith($i.URL_SCHEME)?e.slice($i.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}if(Object(b.c)().getBool("IS_BROWSER"))try{ui.registerManager($i.URL_SCHEME,new Di)}catch(t){}function _i(t){return new Promise(t=>setTimeout(t)).then(t)}class Fi{constructor(t){if(!Object(b.c)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(Fi.URL_SCHEME)&&(t=t.slice(Fi.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await _i(()=>a.dispatchEvent(new MouseEvent("click"))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await _i(()=>t.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Object(ei.g)(t)}}}}Fi.URL_SCHEME="downloads://";class Mi{constructor(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}async load(){const t=this.files[0],e=this.files.slice(1);return new Promise((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),i=a.modelTopology;if(null==i)return void r(new Error("modelTopology field is missing from file "+t.name));0===e.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void r(new Error("weightManifest field is missing from file "+t.name));let u;try{u=this.checkManifestAndWeightFiles(o,e)}catch(t){return void r(t)}const l=[],c=[],h=[];o.forEach(t=>{t.paths.forEach(t=>{c.push(t),h.push(null)}),l.push(...t.weights)}),o.forEach(t=>{t.paths.forEach(t=>{const e=new FileReader;e.onload=e=>{const r=e.target.result,s=c.indexOf(t);h[s]=r,-1===h.indexOf(null)&&n({modelTopology:i,weightSpecs:l,weightData:Object(ei.d)(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},e.onerror=e=>r(`Failed to weights data from file of path '${t}'.`),e.readAsArrayBuffer(u[t])})})},s.onerror=e=>r(`Failed to read model topology and weights manifest JSON from file '${t.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(t)})}checkManifestAndWeightFiles(t,e){const n=[],r=e.map(t=>Object(ei.c)(t.name)),s={};for(const a of t)a.paths.forEach(t=>{const a=Object(ei.c)(t);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[t]=e[r.indexOf(a)]});if(n.length!==e.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${e.length}).`);return s}}function zi(t){return new Mi(t)}function Li(t,e,n,r){!function(t){Object(I.assert)(null!=t&&Array.isArray(t)&&t.length>0,()=>"promises must be a none empty array")}(t),function(t,e){Object(I.assert)(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+t),Object(I.assert)(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+e),Object(I.assert)(e>=t,()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction `+e)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(t.map(a=>(a.then(a=>{const i=n+ ++s/t.length*(r-n);return e(i),a}),a)))}ni.registerSaveRouter(t=>Object(b.c)().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Fi.URL_SCHEME)?function(t="model"){return new Fi(t)}(t.slice(Fi.URL_SCHEME.length)):null);var Bi=n(26);async function Pi(t,e){null==e&&(e={});const n=null==e.fetchFunc?Object(b.c)().platform.fetch:e.fetchFunc,r=t.map(t=>n(t,e.requestInit,{isBinary:!0})),s=(null==e.onProgress?await Promise.all(r):await Li(r,e.onProgress,0,.5)).map(t=>t.arrayBuffer());return null==e.onProgress?await Promise.all(s):await Li(s,e.onProgress,.5,1)}async function Wi(t,e="",n,r){return Vi(t=>Pi(t,{requestInit:r}))(t,e,n)}function Vi(t){return async(e,n="",r)=>{const s=e.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],o=[];if(e.forEach((t,e)=>{let n=0;t.weights.forEach(t=>{const u="quantization"in t?t.quantization.dtype:t.dtype,l=Bi.a[u]*I.sizeFromShape(t.shape),c=()=>{s[e]=!0,null==a[e]&&(a[e]=[]),a[e].push({manifestEntry:t,groupOffset:n,sizeBytes:l})};null!=r?r.forEach((e,n)=>{e===t.name&&(c(),i[n]=!0)}):c(),o.push(t.name),n+=l})}),!i.every(t=>t)){const t=r.filter((t,e)=>!i[e]);throw new Error("Could not find weights in manifest with names: "+t.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const u=s.reduce((t,e,n)=>(e&&t.push(n),t),[]),l=[];u.forEach(t=>{e[t].paths.forEach(t=>{const e=n+(n.endsWith("/")?"":"/")+t;l.push(e)})});const c=await t(l),h={};let d=0;return u.forEach(t=>{const n=e[t].paths.length;let r=0;for(let t=0;t<n;t++)r+=c[d+t].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[d+t]);i.set(e,o),o+=e.byteLength}a[t].forEach(t=>{const e=s.slice(t.groupOffset,t.groupOffset+t.sizeBytes),n=Object(ei.e)(e,[t.manifestEntry]);for(const t in n)h[t]=n[t]}),d+=n}),h}}class Ui{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(Object(I.assert)("function"==typeof e.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=Object(b.c)().platform.fetch,Object(I.assert)(null!=t&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&Object(I.assert)(2===t.length,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:Object(ei.g)(t),responses:[s]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+s.status+".")}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code `+t.status+". Please verify this URL points to the model JSON of the model to load.");let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,r=e.weightsManifest,s=e.generatedBy,a=e.convertedBy,i=e.format,o=e.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,l;if(null!=r){const t=await this.loadWeights(r);[u,l]=t}return{modelTopology:n,weightSpecs:u,weightData:l,userDefinedMetadata:o,generatedBy:s,convertedBy:a,format:i}}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),r=t.substring(0,e),s=n>e?t.substring(n):"";return[r+"/",s]}(e),s=this.weightPathPrefix||n,a=[];for(const e of t)a.push(...e.weights);const i=[];t.forEach(t=>{t.paths.forEach(t=>{i.push(s+t+r)})});const o=await Pi(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[a,Object(ei.d)(o)]}}function Gi(t){return null!=t.match(Ui.URL_SCHEME_REGEX)}Ui.URL_SCHEME_REGEX=/^https?:\/\//;const Hi=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every(t=>Gi(t)):Gi(t),n)return qi(t,e)}return null};function qi(t,e){return new Ui(t,e)}function Ki(t,e){return qi(t,e)}ni.registerSaveRouter(Hi),ni.registerLoadRouter(Hi);class Xi{constructor(t){this.modelArtifacts=t}async load(){return this.modelArtifacts}}class Yi{constructor(t){this.saveHandler=t}async save(t){return this.saveHandler(t)}}function Ji(t,e,n,r){if(1===arguments.length){return null!=t.modelTopology||null!=t.weightSpecs?new Xi(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Xi({modelTopology:t}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Xi({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r})}function Zi(t){return new Yi(t)}const Qi=Object(v.a)({confusionMatrix_:function(t,e,n){const r=Object(w.a)(t,"labels","confusionMatrix"),s=Object(w.a)(e,"predictions","confusionMatrix");I.assert(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, but got "+n),I.assert(1===r.rank,()=>"Expected the rank of labels to be 1, but got "+r.rank),I.assert(1===s.rank,()=>"Expected the rank of predictions to be 1, but got "+s.rank),I.assert(r.shape[0]===s.shape[0],()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`),I.assert(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+n);const a=sr(K(r,"int32"),n),i=sr(K(s,"int32"),n),o=z(a);return K(Ft(o,i),"int32")}});var to=n(17);let eo;async function no(t,e){let n=Object(w.a)(t,"img","toPixels");if(!(t instanceof lt.a)){const t=n;n=K(t,"int32"),t.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);const i=await n.data(),o=Yn(n),u=_n(n),l=await Promise.all([o.data(),u.data()]),c=l[0],h=l[1],d=c[0],p=h[0];if(o.dispose(),u.dispose(),"float32"===n.dtype){if(d<0||p>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [${d} - ${p}].`)}else{if("int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);if(d<0||p>255)throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [${d} - ${p}].`)}const f="float32"===n.dtype?255:1,m=new Uint8ClampedArray(s*r*4);for(let t=0;t<r*s;++t){let e,n,r,s;1===a?(e=i[t]*f,n=i[t]*f,r=i[t]*f,s=255):3===a?(e=i[3*t]*f,n=i[3*t+1]*f,r=i[3*t+2]*f,s=255):4===a&&(e=i[4*t]*f,n=i[4*t+1]*f,r=i[4*t+2]*f,s=i[4*t+3]*f);const o=4*t;m[o+0]=Math.round(e),m[o+1]=Math.round(n),m[o+2]=Math.round(r),m[o+3]=Math.round(s)}if(null!=e){e.width=s,e.height=r;const t=e.getContext("2d"),n=new ImageData(m,s,r);t.putImageData(n,0,0)}return n!==t&&n.dispose(),m}const ro=Object(v.a)({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);i=!0}if(s){const e=2;if(s&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Object(to.b)(x.eb,g.a.backendName)){const n={pixels:t},r={numChannels:e};return g.a.runKernel(x.eb,n,r)}const[o,u]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let l,c;if(i?l=t.getContext("2d").getImageData(0,0,o,u).data:r||n?l=t.data:(a||s)&&(null==eo&&(eo=document.createElement("canvas").getContext("2d")),eo.canvas.width=o,eo.canvas.height=u,eo.drawImage(t,0,0,o,u),l=eo.getImageData(0,0,o,u).data),4===e)c=new Int32Array(l);else{const t=o*u;c=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)c[n*e+t]=l[4*n+t]}return ms(c,[u,o,e],"int32")}});function so(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,r=n[n.length-1];let s=1;for(let t=0;t<n.length-1;++t)s*=n[t];const a=t.shape,i=n.slice();i.pop();let o=1;for(let e=r;e<t.rank;++e)o*=a[e],i.push(a[e]);const u=[...Object(I.computeStrides)(t.shape).map(t=>t/o),1].slice(0,r);return[i,s,o,u]}class ao{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class io{constructor(){this.classNameMap={}}static getMap(){return null==io.instance&&(io.instance=new io),io.instance}static register(t){io.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function oo(t){Object(I.assert)(null!=t.className,()=>"Class being registered does not have the static className property defined."),Object(I.assert)("string"==typeof t.className,()=>"className is required to be a string, but got type "+typeof t.className),Object(I.assert)(t.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),io.register(t)}class uo extends ao{minimize(t,e=!1,n){const{value:r,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map(t=>({name:t.name,tensor:s[t.name]}));this.applyGradients(t)}else this.applyGradients(s);return xt(s),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return En(t,e)}dispose(){null!=this.iterations_&&xt(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:dn(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(uo,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class lo extends uo{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=g.a.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=g.a.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:e+"/accum_grad",variable:yt(()=>Le(r).variable(false))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:e+"/accum_var",variable:yt(()=>Le(r).variable(false))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;yt(()=>{const t=N(Mt(a,this.rho),Mt(Qn(s),1-this.rho)),e=Mt(je(os(N(i,this.epsilon)),os(N(a,this.epsilon))),s),n=N(Mt(i,this.rho),Mt(Qn(e),1-this.rho));a.assign(t),i.assign(n);const o=N(Mt(e,-this.learningRate),r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(xt(this.accumulatedGrads.map(t=>t.variable)),xt(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(false)})),this.accumulatedUpdates=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(false)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}lo.className="Adadelta",oo(lo);class co extends uo{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=g.a.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:e+"/accumulator",variable:yt(()=>Ye(r.shape,this.initialAccumulatorValue).variable(t))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable;yt(()=>{const t=N(a,Qn(s));a.assign(t);const e=N(Mt(je(s,os(N(t,g.a.backend.epsilon()))),-this.learningRate),r);r.assign(e)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&xt(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map(t=>({originalName:t.name,variable:t.tensor.variable(false)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}co.className="Adagrad",oo(co);class ho extends uo{constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],yt(()=>{this.accBeta1=dn(e).variable(),this.accBeta2=dn(n).variable()}),null==r&&(this.epsilon=g.a.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);yt(()=>{const n=Fn(1,this.accBeta1),r=Fn(1,this.accBeta2);e.forEach((e,s)=>{const a=g.a.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:yt(()=>Le(a).variable(false))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:e+"/v",variable:yt(()=>Le(a).variable(false))});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=N(Mt(o,this.beta1),Mt(i,1-this.beta1)),c=N(Mt(u,this.beta2),Mt(Qn(i),1-this.beta2)),h=je(l,n),d=je(c,r);o.assign(l),u.assign(c);const p=N(Mt(je(h,N(os(d),this.epsilon)),-this.learningRate),a);a.assign(p)}),this.accBeta1.assign(Mt(this.accBeta1,this.beta1)),this.accBeta2.assign(Mt(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&xt(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&xt(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t),yt(()=>{this.accBeta1.assign(fr(this.beta1,this.iterations_+1)),this.accBeta2.assign(fr(this.beta2,this.iterations_+1))});const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(false)})),this.accumulatedSecondMoment=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(false)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}ho.className="Adam",oo(ho);class po extends uo{constructor(t,e,n,r=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],yt(()=>{this.iteration=dn(0).variable(),this.accBeta1=dn(e).variable()}),null==r&&(this.epsilon=g.a.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);yt(()=>{const n=Fn(1,this.accBeta1),r=je(-this.learningRate,N(Mt(this.iteration,this.decay),1));e.forEach((e,s)=>{const a=g.a.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:Le(a).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:e+"/v",variable:Le(a).variable(false)});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=N(Mt(o,this.beta1),Mt(i,1-this.beta1)),c=Mt(u,this.beta2),h=O(i),d=bn(c,h);o.assign(l),u.assign(d);const p=N(Mt(je(r,n),je(l,N(d,this.epsilon))),a);a.assign(p)}),this.iteration.assign(N(this.iteration,1)),this.accBeta1.assign(Mt(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&xt(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&xt(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}po.className="Adamax",oo(po);class fo extends uo{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const s=g.a.registeredVariables[e];yt(()=>{const t=N(Mt(this.c,r),s);s.assign(t)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=wt(dn(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}fo.className="SGD",oo(fo);class mo extends fo{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=dn(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=g.a.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:e+"/momentum",variable:yt(()=>Le(r).variable(t))}}const s=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[e];null!=a&&yt(()=>{let t;const e=N(Mt(this.m,s),a);t=this.useNesterov?N(Mt(this.c,N(a,Mt(e,this.m))),r):N(Mt(this.c,e),r),s.assign(e),r.assign(t)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&xt(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map(t=>({originalName:t.name,variable:t.tensor.variable(false)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}mo.className="Momentum",oo(mo);class go extends uo{constructor(t,e=.9,n=0,r=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=g.a.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=g.a.registeredVariables[e],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:e+"/rms",variable:yt(()=>Le(r).variable(s))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:e+"/momentum",variable:yt(()=>Le(r).variable(s))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:e+"/mg",variable:yt(()=>Le(r).variable(s))});const a=Array.isArray(t)?t[n].tensor:t[e];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;yt(()=>{const t=N(Mt(i,this.decay),Mt(Qn(a),1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,s=N(Mt(e,this.decay),Mt(a,1-this.decay)),u=je(Mt(a,this.learningRate),os(Fn(t,N(Qn(s),this.epsilon)))),l=N(Mt(o,this.momentum),u);i.assign(t),e.assign(s),o.assign(l);const c=Fn(r,l);r.assign(c)}else{const t=N(Mt(i,this.decay),Mt(Qn(a),1-this.decay)),e=N(Mt(o,this.momentum),je(Mt(a,this.learningRate),os(N(t,this.epsilon))));i.assign(t),o.assign(e);const n=Fn(r,e);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&xt(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&xt(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&xt(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2,n=!1;this.accumulatedMeanSquares=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(n)})),this.accumulatedMoments=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(n)})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map(t=>({originalName:t.name,variable:t.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}go.className="RMSProp",oo(go);var bo=n(21);class yo{static sgd(t){return new fo(t)}static momentum(t,e,n=!1){return new mo(t,e,n)}static rmsprop(t,e=.9,n=0,r=null,s=!1){return new go(t,e,n,r,s)}static adam(t=.001,e=.9,n=.999,r=null){return new ho(t,e,n,r)}static adadelta(t=.001,e=.95,n=null){return new lo(t,e,n)}static adamax(t=.002,e=.9,n=.999,r=null,s=0){return new po(t,e,n,r,s)}static adagrad(t,e=.1){return new co(t,e)}}const xo={sgd:yo.sgd,momentum:yo.momentum,adadelta:yo.adadelta,adagrad:yo.adagrad,rmsprop:yo.rmsprop,adamax:yo.adamax,adam:yo.adam};var wo=n(31);function vo(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function Oo(t,e,n,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(t[0]/n),s=s.concat(t.slice(1));else{s=s.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)s=s.concat([t[r+1]/e[r],e[r]]);s=s.concat(t.slice(n+1))}return s}function ko(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function So(t,e,n,r=!0){const s=[];r?s.push(t[0]/n):s.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?r?s.push(e[n-1]*t[n]):s.push(t[n]/e[n-1]):s.push(t[n]);return s}function Co(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function No(t,e,n){const r=t.slice(0,1);for(let s=0;s<n;++s)r.push(t[s+1]-e[s][0]-e[s][1]);return r}const Io=1.7580993408473768,Ao=1.0507009873554805,Eo=.3275911,To=.254829592,Ro=-.284496736,$o=1.421413741,jo=-1.453152027,Do=1.061405429;function _o(...t){Object(b.c)().getBool("IS_TEST")||console.warn(...t)}function Fo(...t){Object(b.c)().getBool("IS_TEST")||console.log(...t)}function Mo(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function zo(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}function Lo(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Bo(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Po(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Wo(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Vo(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const a=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function Uo(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function Go(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=qn(t.shape),r=K(t,"float32"),s=n.complex(r,e);return e.dispose(),r.dispose(),s}if(!Object(I.hasEncodingLoss)(t.dtype,e))return g.a.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const r=n.real(t),s=K(r,e);return r.dispose(),s}if("int32"===e)return n.int(t);if("bool"===e){const e=dn(0,t.dtype),r=n.notEqual(t,e);return e.dispose(),r}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function Ho(t,e){return g.a.makeTensorFromDataId(t.dataId,e,t.dtype)}function qo(t,e,n){const r=(e-t)/(n-1),s=Object(I.makeZerosTypedArray)(n,"float32");s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+r;return Fr(s,"float32")}var Ko=n(29);function Xo(t,e,n){const r=new Array(t.rank).fill(0),s=t.shape.slice();return e.map(e=>{const a=[...s];a[n]=e;const i=Qt(t,r,a);return r[n]+=e,i})}function Yo(t,e){const n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];const r=ce(n,t.dtype);for(let e=0;e<r.values.length;++e){const n=r.indexToLoc(e),s=new Array(t.rank);for(let e=0;e<s.length;e++)s[e]=n[e]%t.shape[e];const a=t.locToIndex(s);r.values[e]=t.values[a]}return r.toTensor()}function Jo(t,e,n,r,s){const a=e[e.length-1],[i,o]=[t.length/a,a],u=Object(I.getTypedArrayFromDType)(n,i*r),l=Object(I.getTypedArrayFromDType)("int32",i*r);for(let e=0;e<i;e++){const n=e*o,s=t.subarray(n,n+o),a=[];for(let t=0;t<s.length;t++)a.push({value:s[t],index:t});a.sort((t,e)=>e.value-t.value);const i=e*r,c=u.subarray(i,i+r),h=l.subarray(i,i+r);for(let t=0;t<r;t++)c[t]=a[t].value,h[t]=a[t].index}const c=e.slice();return c[c.length-1]=r,[Object(Dt.a)(u,c,n),Object(Dt.a)(l,c,"int32")]}class Zo{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class Qo{time(t){return tu("time")}read(t){return tu("read")}readSync(t){return tu("readSync")}numDataIds(){return tu("numDataIds")}disposeData(t){return tu("disposeData")}write(t,e,n){return tu("write")}move(t,e,n,r){return tu("move")}memory(){return tu("memory")}floatPrecision(){return tu("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return tu("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){return tu("fusedBatchMatMul")}slice(t,e,n){return tu("slice")}stridedSlice(t,e,n,r){return tu("stridedSlice")}unstack(t,e){return tu("unstack")}reverse(t,e){return tu("reverse")}concat(t,e){return tu("concat")}neg(t){return tu("neg")}add(t,e){return tu("add")}addN(t){return tu("addN")}subtract(t,e){return tu("subtract")}multiply(t,e){return tu("multiply")}realDivide(t,e){return tu("realDivide")}floorDiv(t,e){return tu("floorDiv")}sum(t,e){return tu("sum")}prod(t,e){return tu("prod")}unsortedSegmentSum(t,e,n){return tu("unsortedSegmentSum")}argMin(t,e){return tu("argMin")}argMax(t,e){return tu("argMax")}equal(t,e){return tu("equal")}notEqual(t,e){return tu("notEqual")}less(t,e){return tu("less")}lessEqual(t,e){return tu("lessEqual")}greater(t,e){return tu("greater")}greaterEqual(t,e){return tu("greaterEqual")}logicalNot(t){return tu("logicalNot")}logicalAnd(t,e){return tu("logicalAnd")}logicalOr(t,e){return tu("logicalOr")}where(t){return tu("where")}select(t,e,n){return tu("select")}topk(t,e,n){return tu("topk")}min(t,e){return tu("min")}minimum(t,e){return tu("minimum")}mod(t,e){return tu("mod")}max(t,e){return tu("max")}maximum(t,e){return tu("maximum")}all(t,e){return tu("all")}any(t,e){return tu("any")}squaredDifference(t,e){return tu("squaredDifference")}ceil(t){return tu("ceil")}floor(t){return tu("floor")}round(t){return tu("round")}sign(t){return tu("sign")}isNaN(t){return tu("isNaN")}isInf(t){return tu("isInf")}isFinite(t){return tu("isFinite")}pow(t,e){return tu("pow")}exp(t){return tu("exp")}expm1(t){return tu("expm1")}softmax(t,e){return tu("softmax")}log(t){return tu("log")}log1p(t){return tu("log1p")}sqrt(t){return tu("sqrt")}rsqrt(t){return tu("rsqrt")}square(t){return tu("square")}reciprocal(t){return tu("reciprocal")}relu(t){return tu("relu")}relu6(t){return tu("relu6")}prelu(t,e){return tu("prelu")}elu(t){return tu("elu")}eluDer(t,e){return tu("eluDer")}selu(t){return tu("selu")}int(t){return tu("int")}clip(t,e,n){return tu("clip")}abs(t){return tu("abs")}complexAbs(t){return tu("complexAbs")}sigmoid(t){return tu("sigmoid")}softplus(t){return tu("softplus")}sin(t){return tu("sin")}cos(t){return tu("cos")}tan(t){return tu("tan")}asin(t){return tu("asin")}acos(t){return tu("acos")}atan(t){return tu("atan")}atan2(t,e){return tu("atan2")}sinh(t){return tu("sinh")}cosh(t){return tu("cosh")}tanh(t){return tu("tanh")}asinh(t){return tu("asinh")}acosh(t){return tu("acosh")}atanh(t){return tu("atanh")}erf(t){return tu("erf")}step(t,e){return tu("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return tu("fusedConv2d")}conv2d(t,e,n){return tu("conv2d")}conv2dDerInput(t,e,n){return tu("conv2dDerInput")}conv2dDerFilter(t,e,n){return tu("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return tu("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return tu("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return tu("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return tu("depthwiseConv2DDerFilter")}conv3d(t,e,n){return tu("conv3d")}conv3dDerInput(t,e,n){return tu("conv3dDerInput")}conv3dDerFilter(t,e,n){return tu("conv3dDerFilter")}maxPool(t,e){return tu("maxPool")}maxPoolBackprop(t,e,n,r){return tu("maxPoolBackprop")}avgPool(t,e){return tu("avgPool")}avgPoolBackprop(t,e,n){return tu("avgPoolBackprop")}avgPool3d(t,e){return tu("avgPool3d")}avgPool3dBackprop(t,e,n){return tu("avgPool3dBackprop")}maxPool3d(t,e){return tu("maxPool3d")}maxPool3dBackprop(t,e,n,r){return tu("maxPool3dBackprop")}reshape(t,e){return tu("reshape")}cast(t,e){return tu("cast")}tile(t,e){return tu("tile")}pad(t,e,n){return tu("pad")}transpose(t,e){return tu("transpose")}gather(t,e,n){return tu("gather")}gatherND(t,e){return tu("gatherND")}scatterND(t,e,n){return tu("scatterND")}batchToSpaceND(t,e,n){return tu("batchToSpaceND")}spaceToBatchND(t,e,n){return tu("spaceToBatchND")}resizeBilinear(t,e,n,r){return tu("resizeBilinear")}resizeBilinearBackprop(t,e,n){return tu("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return tu("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return tu("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,s,a){return tu("batchNorm")}localResponseNormalization4D(t,e,n,r,s){return tu("localResponseNormalization4D")}LRNGrad(t,e,n,r,s,a,i){return tu("LRNGrad")}multinomial(t,e,n,r){return tu("multinomial")}oneHot(t,e,n,r){return tu("oneHot")}cumsum(t,e,n,r){return tu("cumsum")}nonMaxSuppression(t,e,n,r,s){return tu("nonMaxSuppression")}fft(t){return tu("fft")}ifft(t){return tu("ifft")}complex(t,e){return tu("complex")}real(t){return tu("real")}imag(t){return tu("imag")}cropAndResize(t,e,n,r,s,a){return tu("cropAndResize")}depthToSpace(t,e,n){return tu("depthToSpace")}split(t,e,n){return tu("split")}sparseToDense(t,e,n,r){return tu("sparseToDense")}diag(t){return tu("diag")}fill(t,e,n){return tu("fill")}onesLike(t){return tu("onesLike")}zerosLike(t){return tu("zerosLike")}linspace(t,e,n){return tu("linspace")}dispose(){return tu("dispose")}}function tu(t){throw new Error(`'${t}' not yet implemented or not found in the registry. Did you forget to import the kernel?`)}const eu={kernelName:x.a,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mt(t,hs(K(n,"float32"),-1))}}},nu={kernelName:x.b,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Qn(K(n,"float32")),r=os(Fn(dn(1),e));return $n(je(t,r))}}}},ru={kernelName:x.c,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=os(Fn(Qn(K(n,"float32")),1));return je(t,e)}}}},su={kernelName:x.d,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Fe(n.shape,r.shape);return{a:()=>{let e=t;const r=_e(n.shape,s);return r.length>0&&(e=Mn(e,r)),M(e,n.shape)},b:()=>{let e=t;const n=_e(r.shape,s);return n.length>0&&(e=Mn(e,n)),M(e,r.shape)}}}},au={kernelName:x.e,saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach((e,r)=>{n[r]=()=>t.clone()}),n}},iu={kernelName:x.h,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Le(n)}}},ou={kernelName:x.i,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Le(n)}}},uu={kernelName:x.j,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>je(t,os(Fn(dn(1),Qn(K(n,"float32")))))}}},lu={kernelName:x.k,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=os(N(dn(1),Qn(K(n,"float32"))));return je(t,e)}}}},cu={kernelName:x.m,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Fe(n.shape,r.shape);return{a:()=>{const e=N(Qn(n),Qn(r));let a=Mt(t,je(r,e));const i=_e(n.shape,s);return i.length>0&&(a=Mn(a,i)),M(a,n.shape)},b:()=>{const e=N(Qn(n),Qn(r));let a=$n(Mt(t,je(n,e)));const i=_e(r.shape,s);return i.length>0&&(a=Mn(a,i)),M(a,r.shape)}}}},hu={kernelName:x.l,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>je(t,N(Qn(K(n,"float32")),1))}}},du={kernelName:x.n,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>je(t,Fn(dn(1),Qn(K(n,"float32"))))}}};const pu=Object(v.a)({avgPool3dBackprop_:function(t,e,n,r,s=[1,1,1],a,i){const o=Object(w.a)(t,"dy","avgPool3dBackprop"),u=Object(w.a)(e,"input","avgPool3dBackprop");let l=o,c=u,h=!1;4===u.rank&&(h=!0,l=M(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=M(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),I.assert(5===l.rank,()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+l.rank+"."),I.assert(5===c.rank,()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+"."),I.assert(it(r,s),()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`),null!=i&&I.assert(I.isInt(a),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const d={dy:l,input:c},p={filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:i},f=g.a.runKernelFunc(t=>{const e=J(c.shape,n,r,s,a,i);return t.avgPool3dBackprop(l,c,e)},d,null,x.q,p);return h?M(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),fu={kernelName:x.p,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,dilations:i,pad:o,dimRoundingMode:u}=n,l=null==i?[1,1,1]:i;return{x:()=>pu(t,r,s,a,l,o,u)}}};const mu=Object(v.a)({avgPoolBackprop_:function(t,e,n,r,s){const a=Object(w.a)(t,"dy","avgPoolBackprop"),i=Object(w.a)(e,"input","avgPoolBackprop");I.assert(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,u=a,l=!1;3===i.rank&&(l=!0,o=M(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=M(a,[1,a.shape[0],a.shape[1],a.shape[2]])),I.assert(4===u.rank,()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."),I.assert(4===o.rank,()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+o.rank+".");const c={dy:u,input:o},h={filterSize:n,strides:r,pad:s},d=g.a.runKernelFunc(t=>{const e=Y(o.shape,n,r,1,s);return t.avgPoolBackprop(u,o,e)},c,null,x.r,h);return l?M(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),gu={kernelName:x.o,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,pad:i}=n;return{x:()=>mu(t,r,s,a,i)}}},bu={kernelName:x.s,inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[r,s]=e,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Ft(t,s,!1,!1),b:()=>Ft(t,r,!0,!1)}:a&&!i?{a:()=>Ft(s,t,!1,!0),b:()=>Ft(r,t,!1,!1)}:{a:()=>Ft(s,t,!0,!0),b:()=>Ft(t,r,!0,!0)}:{a:()=>Ft(t,s,!1,!0),b:()=>Ft(r,t,!0,!1)}}},yu={kernelName:x.t,gradFunc:(t,e,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>dr(t,r,s)}}},xu={kernelName:x.u,gradFunc:(t,e,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let t=s.length-1;t>=0;t--)if(s[t]===a[t])i[t]=1;else if(1!==s[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let t=0;t<i.length;t++)i[t]>1&&o.push(t);return{x:()=>Mn(t,o,!0)}}},wu={kernelName:x.v,gradFunc:t=>({x:()=>t.clone()})},vu={kernelName:x.w,gradFunc:t=>({x:()=>Le(t)})},Ou={kernelName:x.x,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>ze(Bn(an(r,s),wn(r,a)),t,Le(t))}}},ku={kernelName:x.z,saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map(t=>t.shape),{axis:s}=n,a=Object(I.parseAxisParam)(s,e[0].shape)[0],i=r.map(t=>t[a]);return Hr(t,i,a).map(t=>()=>t)}},Su={kernelName:x.A,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return I.assert(at(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>we(r.shape,t,s,i,o,u),filter:()=>ea(r,t,s.shape,i,o,u)}}},Cu={kernelName:x.C,inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>ye(t,s,a,i,o,1,u),filter:()=>ea(t,r,s.shape,a,i,o,u)}}};const Nu=Object(v.a)({conv3DBackpropFilter_:function(t,e,n,r,s){let a=t;4===t.rank&&(a=M(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let i=e;4===i.rank&&(i=M(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),I.assert(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),I.assert(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."),I.assert(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),I.assert(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),I.assert(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);const o={x:a,y:i},u={strides:r,pad:s};return g.a.runKernelFunc(t=>{const e=Q(a.shape,n,r,1,s);return t.conv3dDerFilter(a,i,e)},o,null,x.E,u)}}),Iu={kernelName:x.D,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a}=n;I.assert(at(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[i,o]=e;return{x:()=>ke(i.shape,t,o,s,a),filter:()=>Nu(i,t,o.shape,s,a)}}},Au={kernelName:x.G,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mt($n(ts(K(n,"float32"))),t)}}},Eu={kernelName:x.H,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mt(es(K(n,"float32")),t)}}},Tu={kernelName:x.J,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const e=D([s],r.rank);let n=Ie(t,s,a,!i);return null!=e&&(n=z(n,e)),n}}}},Ru={kernelName:x.L,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;I.assert(at(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[u,l]=e;I.assert(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`),I.assert(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`),I.assert(u.shape[3]===l.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),I.assert(it(s,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`),null!=i&&I.assert(I.isInt(a),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const c=Z(u.shape,l.shape,s,o,a,i,!0);return{x:()=>ua(u.shape,t,l,c),filter:()=>oa(u,t,l.shape,c)}}},$u={kernelName:x.P,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,a={x:r,filter:s,dy:t},i={x:r,filter:s,dy:t};return{x:()=>g.a.runKernel(x.R,a,n),filter:()=>g.a.runKernel(x.Q,i,n)}}},ju={kernelName:x.S,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Fe(n.shape,r.shape);return{a:()=>{const e=je(t,K(r,"float32")),a=_e(n.shape,s);return a.length>0?M(Mn(e,a),n.shape):e},b:()=>{let e=Mt(t,K(n,"float32"));const a=_e(r.shape,s);a.length>0&&(e=M(Mn(e,a),r.shape));const i=Qn(r);return $n(je(e,K(i,"float32")))}}}},Du={kernelName:x.T,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,r=e=>e.eluDer(t,n),s={dy:t,y:n};return{x:()=>g.a.runKernelFunc(r,s,null,x.U)}}},_u={kernelName:x.W,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=Mt(Ue($n(Qn(n))),2/Math.sqrt(Math.PI));return{x:()=>Mt(t,r)}}},Fu={kernelName:x.X,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mt(t,n)}}},Mu={kernelName:x.Y,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mt(t,Ue(n))}}},zu={kernelName:x.cb,gradFunc:t=>({x:()=>Le(t)})},Lu={kernelName:x.db,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Fe(n.shape,r.shape);return{a:()=>{const e=je(t,K(r,"float32")),a=_e(n.shape,s);return a.length>0?M(Mn(e,a),n.shape):e},b:()=>{let e=Mt(t,K(n,"float32"));const a=_e(r.shape,s);a.length>0&&(e=M(Mn(e,a),r.shape));const i=Qn(r);return $n(je(e,K(i,"float32")))}}}},Bu={kernelName:x.fb,inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=e,u=null==o?dn(1):o,l=_e(a.shape,s.shape),c=[];if(1===a.rank){for(let t=0;t<s.shape.length-1;++t)c.push(s.shape[t]);c.push(1)}const h=Fn(s,a),d=Mt(t,u),p=Xr(N(i,dn(r))),f=Mt(Mt(Mt(p,p),p),dn(-.5));return{x:()=>1===a.rank?M(Mt(Mt(t,qe(M(p,[1,1,1,a.shape[0]]),c)),u),s.shape):M(Mt(Mt(t,p),u),s.shape),mean:()=>{let t=Mt(Mt(p,dn(-1)),d);return 1===a.rank&&(t=Mn(t,l)),M(t,a.shape)},variance:()=>{let t=Mt(Mt(f,h),d);return 1===a.rank&&(t=Mn(t,l)),M(t,a.shape)},scale:()=>{const e=Mt(h,p);let n=Mt(t,e);return 1===a.rank&&(n=Mn(n,l)),M(n,a.shape)},offset:()=>{let e=t;return 1===a.rank&&(e=Mn(e,l)),M(e,a.shape)}}}},Pu={kernelName:x.jb,inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[r,s]=e,{axis:a}=n,i=Object(I.parseAxisParam)(a,r.shape)[0];return{x:()=>{const e=r.shape,n=s.size,o=e.slice(0,i),u=o.length,l=e.slice(a,e.length).slice(1),c=l.length,h=Wu(0,u),d=Wu(u+1,u+1+c),p=Vu([o,[n],l]),f=M(t,p),m=M(s,[n]),g=Vu([[u],h,d]),b=z(f,g);let y=vs(b,m,r.shape[i]);const x=_(g);return y=z(y,x),y},indices:()=>s}}};function Wu(t,e){const n=[];for(let r=t;r<e;++r)n.push(r);return n}function Vu(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t[n].length;++r)e.push(t[n][r]);return e}const Uu={kernelName:x.lb,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Le(n),b:()=>Le(r)}}},Gu={kernelName:x.nb,gradFunc:t=>({x:()=>K(t,"float32")})},Hu={kernelName:x.pb,gradFunc:t=>({x:()=>Le(t)})},qu={kernelName:x.qb,gradFunc:t=>({x:()=>Le(t)})},Ku={kernelName:x.rb,gradFunc:t=>({x:()=>Le(t)})},Xu={kernelName:x.yb,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>je(t,N(n,1))}}},Yu={kernelName:x.xb,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>je(t,K(n,"float32"))}}},Ju={kernelName:x.zb,inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{axis:s}=n;return{logits:()=>{const e=Ue(r);return Fn(t,Mt(Mn(t,s,!0),e))}}}};const Zu=Object(v.a)({localResponseNormalizationBackprop_:function(t,e,n,r=5,s=1,a=1,i=.5){const o={x:t,y:e,dy:n},u={depthRadius:r,bias:s,alpha:a,beta:i};return g.a.runKernelFunc(o=>o.LRNGrad(n,t,e,r,s,a,i),o,null,x.tb,u)}}),Qu={kernelName:x.sb,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>Zu(r,s,t,a,i,o,u)}}};function tl(t,e,n,r,s){return e.rank<n.rank&&(e=M(e,$(e.shape,r))),t.rank<n.rank&&(t=M(t,$(t.shape,r))),{x:()=>{const r=Mt(t,K(Me(n,e),t.dtype));return null==s?r:z(r,s)}}}const el={kernelName:x.Db,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{reductionIndices:s}=r,[a,i]=e,o=I.parseAxisParam(s,a.shape),u=D(o,a.rank),l=tl(t,i,a,o,u);return{x:()=>{let t=l.x();return null!=u&&(t=z(t)),t}}}},nl={kernelName:x.Jb,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Mt(t,K(an(n,r),"float32")),b:()=>Mt(t,K(xn(n,r),"float32"))}}};const rl=Object(v.a)({maxPool3dBackprop_:function(t,e,n,r,s,a=[1,1,1],i,o){const u=Object(w.a)(t,"dy","maxPool3dBackprop"),l=Object(w.a)(e,"input","maxPool3dBackprop"),c=Object(w.a)(n,"output","maxPool3dBackprop");let h=u,d=l,p=c,f=!1;4===l.rank&&(f=!0,h=M(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=M(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=M(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),I.assert(5===h.rank,()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."),I.assert(5===d.rank,()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+d.rank+"."),I.assert(5===p.rank,()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+p.rank+"."),I.assert(it(s,a),()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`),null!=o&&I.assert(I.isInt(i),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`);const m={dy:h,input:d,output:p},b={filterSize:r,strides:s,dilations:a,pad:i,dimRoundingMode:o},y=g.a.runKernelFunc(t=>{const e=J(d.shape,r,s,a,i,o);return t.maxPool3dBackprop(h,d,p,e)},m,null,x.Gb,b);return f?M(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),sl={kernelName:x.Fb,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,dilations:o,pad:u,dimRoundingMode:l}=n,c=null==o?[1,1,1]:o;return{x:()=>rl(t,r,s,a,i,c,u,l)}}};const al=Object(v.a)({maxPoolBackprop_:function(t,e,n,r,s,a,i){const o=Object(w.a)(t,"dy","maxPoolBackprop"),u=Object(w.a)(e,"input","maxPoolBackprop"),l=Object(w.a)(n,"output","maxPoolBackprop");I.assert(u.rank===o.rank,()=>`Rank of input (${u.rank}) does not match rank of dy (${o.rank})`),I.assert(4===o.rank,()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+o.rank+"."),I.assert(4===u.rank,()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+u.rank+"."),null!=i&&I.assert(I.isInt(a),()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const c={dy:o,input:u,output:l},h={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return g.a.runKernelFunc(t=>{const e=Y(u.shape,r,s,1,a,i);return t.maxPoolBackprop(o,u,l,e)},c,null,x.Hb,h)}}),il={kernelName:x.Eb,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,pad:o}=n;return{x:()=>al(t,r,s,a,i,o)}}},ol={kernelName:x.Lb,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{axis:s}=r,[a,i]=e,o=I.parseAxisParam(s,a.shape),u=D(o,a.rank),l=tl(t,i,a,o,u);return{x:()=>{let t=l.x();return null!=u&&(t=z(t)),t}}}},ul={kernelName:x.Mb,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Mt(t,K(wn(n,r),"float32")),b:()=>Mt(t,K(sn(n,r),"float32"))}}},ll={kernelName:x.Nb,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Fe(n.shape,r.shape);return{a:()=>{const e=_e(n.shape,s);return e.length>0?M(Mn(t,e),n.shape):t},b:()=>{const e=Mt(t,$n(Je(je(n,r)))),a=_e(r.shape,s);return a.length>0?M(Mn(e,a),r.shape):e}}}},cl={kernelName:x.Ob,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Fe(n.shape,r.shape);return{a:()=>{const e=Mt(t,K(r,"float32")),a=_e(n.shape,s);return a.length>0?M(Mn(e,a),n.shape):e},b:()=>{const e=Mt(t,K(n,"float32")),a=_e(r.shape,s);return a.length>0?M(Mn(e,a),r.shape):e}}}},hl={kernelName:x.Pb,gradFunc:t=>({x:()=>$n(t)})},dl={kernelName:x.Ub,inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>qn(n.shape,"float32")}}},pl={kernelName:x.Vb,gradFunc:t=>({x:()=>Le(t)})},fl={kernelName:x.Wb,inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,a=s.map(t=>t[0]);return{x:()=>Qt(t,a,r.shape)}}},ml={kernelName:x.Yb,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,r,s]=e,a=n,i=r,o=Fe(a.shape,i.shape);return{a:()=>{const e=K(i,"float32");let n=Mt(t,Mt(e,fr(a,Fn(e,dn(1)))));const r=_e(a.shape,o);return r.length>0&&(n=Mn(n,r)),M(n,a.shape)},b:()=>{const e=sn(a,0),n=ze(e,kn(a),Le(a));let r=Mt(t,Mt(s,n));const u=_e(i.shape,o);return u.length>0&&(r=Mn(r,u)),M(r,i.shape)}}}},gl={kernelName:x.Zb,inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,r]=e,s=sn(n,0);return{x:()=>ze(s,t,Mt(t,r)),alpha:()=>{let e=ze(s,Le(t),Mt(t,n));const a=_e(r.shape,t.shape);return a.length>0&&(e=Mn(e,a)),M(e,r.shape)}}}},bl={kernelName:x.dc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>je(t,$n(Qn(n)))}}},yl={kernelName:x.fc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=Mt(wn(n,6),hs(n));return{x:()=>Mt(t,K(r,"float32"))}}},xl={kernelName:x.ec,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mt(t,K(hs(n),"float32"))}}},wl={kernelName:x.gc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>M(t,n.shape)}}},vl={kernelName:x.hc,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeBilinearBackprop(t,r,s)},a={images:r};return{images:()=>g.a.runKernelFunc(s,a,null,x.ic,n)}}},Ol={kernelName:x.jc,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeNearestNeighborBackprop(t,r,s)},a={images:r};return{images:()=>g.a.runKernelFunc(s,a,null,x.kc,n)}}},kl={kernelName:x.lc,gradFunc:(t,e,n)=>{const{dims:r}=n,s=Object(I.parseAxisParam)(r,t.shape);return{x:()=>cn(t,s)}}},Sl={kernelName:x.nc,gradFunc:t=>({x:()=>Le(t)})},Cl={kernelName:x.oc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>$n(je(t,Mt(fr(n,1.5),2)))}}},Nl={kernelName:x.qc,inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>K(Le(n),"float32"),t:()=>Mt(t,K(n,t.dtype)),e:()=>Mt(t,K(Pn(n),t.dtype))}}},Il={kernelName:x.rc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=sn(n,dn(0)),r=dn(Io),s=dn(Ao),a=Mt(t,s),i=Mt(Mt(t,r),Ue(K(n,"float32")));return ze(e,a,i)}}}},Al={kernelName:x.sc,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mt(t,Mt(n,Fn(dn(1),n)))}}},El={kernelName:x.tc,gradFunc:t=>({x:()=>Le(t)})},Tl={kernelName:x.uc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mt(Ce(K(n,"float32")),t)}}},Rl={kernelName:x.vc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mt(Ne(K(n,"float32")),t)}}},$l={kernelName:x.wc,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{begin:s,size:a}=n,i=r.shape,[o,u]=Zt(r,s,a),l=[];for(let e=0;e<t.rank;e++)l.push([o[e],i[e]-o[e]-u[e]]);return{x:()=>or(t,l)}}},jl={kernelName:x.xc,outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{dim:s}=n,a=Mt(t,r);return{logits:()=>Fn(a,Mt(Mn(a,[s],true),r))}}},Dl={kernelName:x.yc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mt(t,zt(n))}}},_l={kernelName:x.zc,gradFunc:(t,e,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>ne(t,r,s)}}},Fl={kernelName:x.Bc,gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>_t(t,r)}}},Ml={kernelName:x.Cc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>je(t,Mt(os(K(n,"float32")),2))}}},zl={kernelName:x.Dc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mt(t,Mt(K(n,"float32"),2))}}};const Ll=[eu,nu,ru,su,au,iu,ou,uu,lu,cu,hu,du,fu,gu,bu,yu,xu,wu,vu,Ou,ku,Cu,Su,Iu,Au,Eu,Tu,Ru,$u,ju,Du,_u,Fu,Mu,Lu,zu,Bu,Pu,Uu,Gu,Hu,qu,Ku,Xu,Yu,Ju,Qu,el,el,nl,sl,il,ol,ul,ll,cl,hl,dl,pl,fl,fl,ml,gl,bl,yl,xl,wl,vl,Ol,kl,Sl,Cl,Nl,Il,Al,El,Tl,Rl,$l,jl,Dl,_l,_l,Fl,Fl,Ml,{kernelName:x.Ec,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=dn(2);return{a:()=>Mt(t,Mt(s,Fn(n,r))),b:()=>Mt(t,Mt(s,Fn(r,n)))}}},zl,{kernelName:x.Fc,gradFunc:t=>({x:()=>Le(t)})},{kernelName:x.Hc,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Fe(n.shape,r.shape);return{a:()=>{let e=t;const r=_e(n.shape,s);return r.length>0&&(e=Mn(e,r)),M(e,n.shape)},b:()=>{let e=t;const n=_e(r.shape,s);return n.length>0&&(e=Mn(e,n)),M($n(e),r.shape)}}}},{kernelName:x.Ic,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,s=r.shape.slice(),{axis:a}=n;Object(I.parseAxisParam)(a,r.shape).forEach(t=>{s[t]=1});const i=M(t,s),o=Mt(i,Kn(r.shape,"float32"));return{x:()=>o}}},{kernelName:x.Jc,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>je(t,Qn(Ce(n)))}}},{kernelName:x.Kc,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mt(Fn(dn(1),Qn(n)),t)}}},{kernelName:x.Lc,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{reps:s}=n;return{x:()=>{let e=Le(r);if(1===r.rank)for(let n=0;n<s[0];++n)e=N(e,Qt(t,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)e=N(e,Qt(t,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)e=N(e,Qt(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)e=N(e,Qt(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},{kernelName:x.Nc,gradFunc:(t,e,n)=>{const r=n,{perm:s}=r,a=_(s);return{x:()=>z(t,a)}}},{kernelName:x.Oc,gradFunc:(t,e,n)=>{const r=n,{axis:s}=r;return{value:()=>cs(t,s)}}},{kernelName:x.Pc,inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=bn(e,Le(e)),r=rn(t,n);let s=an(e,dn(0,"int32"));const a=r.rank-s.rank;for(let t=0;t<a;++t)s=Ge(s,t+1);s=Bn(s,Kn(r.shape,"bool"));const i=Le(r);return ze(s,r,i)}(t,n)}}},{kernelName:x.Qc,gradFunc:t=>({x:()=>Le(t)})}];for(const t of Ll)Object(to.d)(t);lt.a.prototype.abs=function(){return this.throwIfDisposed(),O(this)},lt.a.prototype.acos=function(){return this.throwIfDisposed(),k(this)},lt.a.prototype.acosh=function(){return this.throwIfDisposed(),S(this)},lt.a.prototype.addStrict=function(t){return this.throwIfDisposed(),js(this,t)},lt.a.prototype.add=function(t){return this.throwIfDisposed(),N(this,t)},lt.a.prototype.all=function(t,e){return this.throwIfDisposed(),L(this,t,e)},lt.a.prototype.any=function(t,e){return this.throwIfDisposed(),B(this,t,e)},lt.a.prototype.argMax=function(t){return this.throwIfDisposed(),P(this,t)},lt.a.prototype.argMin=function(t){return this.throwIfDisposed(),W(this,t)},lt.a.prototype.asScalar=function(){return this.throwIfDisposed(),Object(I.assert)(1===this.size,()=>"The array must have only 1 element."),M(this,[])},lt.a.prototype.asType=function(t){return this.throwIfDisposed(),K(this,t)},lt.a.prototype.as1D=function(){return this.throwIfDisposed(),M(this,[this.size])},lt.a.prototype.as2D=function(t,e){return this.throwIfDisposed(),M(this,[t,e])},lt.a.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),M(this,[t,e,n])},lt.a.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),M(this,[t,e,n,r])},lt.a.prototype.as5D=function(t,e,n,r,s){return this.throwIfDisposed(),M(this,[t,e,n,r,s])},lt.a.prototype.asin=function(){return this.throwIfDisposed(),V(this)},lt.a.prototype.asinh=function(){return this.throwIfDisposed(),U(this)},lt.a.prototype.atan=function(){return this.throwIfDisposed(),G(this)},lt.a.prototype.atan2=function(t){return this.throwIfDisposed(),H(this,t)},lt.a.prototype.atanh=function(){return this.throwIfDisposed(),q(this)},lt.a.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),ut(this,t,e,n,r)},lt.a.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),ne(this,t,e)},lt.a.prototype.batchNorm=function(t,e,n,r,s){return this.throwIfDisposed(),se(this,t,e,n,r,s)},lt.a.prototype.broadcastTo=function(t){return this.throwIfDisposed(),le(this,t)},lt.a.prototype.cast=function(t){return this.throwIfDisposed(),K(this,t)},lt.a.prototype.ceil=function(){return this.throwIfDisposed(),he(this)},lt.a.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),de(this,t,e)},lt.a.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof lt.a&&(t=[t]),_t([this,...t],e)},lt.a.prototype.conv1d=function(t,e,n,r,s,a){return this.throwIfDisposed(),xe(this,t,e,n,r,s,a)},lt.a.prototype.conv2dTranspose=function(t,e,n,r,s){return this.throwIfDisposed(),ve(this,t,e,n,r,s)},lt.a.prototype.conv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),ye(this,t,e,n,r,s,a)},lt.a.prototype.cos=function(){return this.throwIfDisposed(),Ce(this)},lt.a.prototype.cosh=function(){return this.throwIfDisposed(),Ne(this)},lt.a.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),Ie(this,t,e,n)},lt.a.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),Ae(this,t,e)},lt.a.prototype.depthwiseConv2D=function(t,e,n,r,s,a){return pt("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),Ee(this,t,e,n,r,s,a)},lt.a.prototype.depthwiseConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Ee(this,t,e,n,r,s,a)},lt.a.prototype.dilation2d=function(t,e,n,r,s){return this.throwIfDisposed(),Re(this,t,e,n,r,s)},lt.a.prototype.divNoNan=function(t){return this.throwIfDisposed(),Be(this,t)},lt.a.prototype.divStrict=function(t){return this.throwIfDisposed(),Ds(this,t)},lt.a.prototype.div=function(t){return this.throwIfDisposed(),je(this,t)},lt.a.prototype.dot=function(t){return this.throwIfDisposed(),Pe(this,t)},lt.a.prototype.elu=function(){return this.throwIfDisposed(),We(this)},lt.a.prototype.equalStrict=function(t){return this.throwIfDisposed(),Is(this,t)},lt.a.prototype.equal=function(t){return this.throwIfDisposed(),Me(this,t)},lt.a.prototype.erf=function(){return this.throwIfDisposed(),Ve(this)},lt.a.prototype.exp=function(){return this.throwIfDisposed(),Ue(this)},lt.a.prototype.expandDims=function(t){return this.throwIfDisposed(),Ge(this,t)},lt.a.prototype.expm1=function(){return this.throwIfDisposed(),He(this)},lt.a.prototype.fft=function(){return this.throwIfDisposed(),Xe(this)},lt.a.prototype.flatten=function(){return this.throwIfDisposed(),M(this,[this.size])},lt.a.prototype.floor=function(){return this.throwIfDisposed(),Je(this)},lt.a.prototype.floorDiv=function(t){return this.throwIfDisposed(),$e(this,t)},lt.a.prototype.gather=function(t,e){return this.throwIfDisposed(),rn(this,t,e)},lt.a.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),As(this,t)},lt.a.prototype.greaterEqual=function(t){return this.throwIfDisposed(),an(this,t)},lt.a.prototype.greaterStrict=function(t){return this.throwIfDisposed(),Es(this,t)},lt.a.prototype.greater=function(t){return this.throwIfDisposed(),sn(this,t)},lt.a.prototype.ifft=function(){return this.throwIfDisposed(),on(this)},lt.a.prototype.irfft=function(){return this.throwIfDisposed(),pn(this)},lt.a.prototype.isFinite=function(){return this.throwIfDisposed(),fn(this)},lt.a.prototype.isInf=function(){return this.throwIfDisposed(),mn(this)},lt.a.prototype.isNaN=function(){return this.throwIfDisposed(),gn(this)},lt.a.prototype.leakyRelu=function(t){return this.throwIfDisposed(),yn(this,t)},lt.a.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),Ts(this,t)},lt.a.prototype.lessEqual=function(t){return this.throwIfDisposed(),wn(this,t)},lt.a.prototype.lessStrict=function(t){return this.throwIfDisposed(),Rs(this,t)},lt.a.prototype.less=function(t){return this.throwIfDisposed(),xn(this,t)},lt.a.prototype.localResponseNormalization=function(t,e,n,r){return this.throwIfDisposed(),On(this,t,e,n,r)},lt.a.prototype.logSigmoid=function(){return this.throwIfDisposed(),Dn(this)},lt.a.prototype.logSoftmax=function(t){return this.throwIfDisposed(),zn(this,t)},lt.a.prototype.logSumExp=function(t,e){return this.throwIfDisposed(),Ln(this,t,e)},lt.a.prototype.log=function(){return this.throwIfDisposed(),kn(this)},lt.a.prototype.log1p=function(){return this.throwIfDisposed(),Sn(this)},lt.a.prototype.logicalAnd=function(t){return this.throwIfDisposed(),Bn(this,t)},lt.a.prototype.logicalNot=function(){return this.throwIfDisposed(),Pn(this)},lt.a.prototype.logicalOr=function(t){return this.throwIfDisposed(),Wn(this,t)},lt.a.prototype.logicalXor=function(t){return this.throwIfDisposed(),Vn(this,t)},lt.a.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),Ft(this,t,e,n)},lt.a.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),Un(this,t,e,n,r)},lt.a.prototype.max=function(t,e){return this.throwIfDisposed(),_n(this,t,e)},lt.a.prototype.maximumStrict=function(t){return this.throwIfDisposed(),_s(this,t)},lt.a.prototype.maximum=function(t){return this.throwIfDisposed(),bn(this,t)},lt.a.prototype.mean=function(t,e){return this.throwIfDisposed(),Xn(this,t,e)},lt.a.prototype.min=function(t,e){return this.throwIfDisposed(),Yn(this,t,e)},lt.a.prototype.minimumStrict=function(t){return this.throwIfDisposed(),Fs(this,t)},lt.a.prototype.minimum=function(t){return this.throwIfDisposed(),Jn(this,t)},lt.a.prototype.modStrict=function(t){return this.throwIfDisposed(),Ms(this,t)},lt.a.prototype.mod=function(t){return this.throwIfDisposed(),Zn(this,t)},lt.a.prototype.mulStrict=function(t){return this.throwIfDisposed(),zs(this,t)},lt.a.prototype.mul=function(t){return this.throwIfDisposed(),Mt(this,t)},lt.a.prototype.neg=function(){return this.throwIfDisposed(),$n(this)},lt.a.prototype.norm=function(t,e,n){return this.throwIfDisposed(),Vs(this,t,e,n)},lt.a.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),$s(this,t)},lt.a.prototype.notEqual=function(t){return this.throwIfDisposed(),rr(this,t)},lt.a.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),sr(this,t,e,n)},lt.a.prototype.onesLike=function(){return this.throwIfDisposed(),ar(this)},lt.a.prototype.pad=function(t,e){return this.throwIfDisposed(),or(this,t,e)},lt.a.prototype.pool=function(t,e,n,r,s){return this.throwIfDisposed(),pr(this,t,e,n,r,s)},lt.a.prototype.powStrict=function(t){return this.throwIfDisposed(),Ls(this,t)},lt.a.prototype.pow=function(t){return this.throwIfDisposed(),fr(this,t)},lt.a.prototype.prelu=function(t){return this.throwIfDisposed(),mr(this,t)},lt.a.prototype.prod=function(t,e){return this.throwIfDisposed(),br(this,t,e)},lt.a.prototype.reciprocal=function(){return this.throwIfDisposed(),zr(this)},lt.a.prototype.relu=function(){return this.throwIfDisposed(),Lr(this)},lt.a.prototype.relu6=function(){return this.throwIfDisposed(),Br(this)},lt.a.prototype.reshapeAs=function(t){return this.throwIfDisposed(),M(this,t.shape)},lt.a.prototype.reshape=function(t){return this.throwIfDisposed(),M(this,t)},lt.a.prototype.resizeBilinear=function(t,e){return this.throwIfDisposed(),Da(this,t,e)},lt.a.prototype.resizeNearestNeighbor=function(t,e){return this.throwIfDisposed(),_a(this,t,e)},lt.a.prototype.reverse=function(t){return this.throwIfDisposed(),cn(this,t)},lt.a.prototype.rfft=function(){return this.throwIfDisposed(),qr(this)},lt.a.prototype.round=function(){return this.throwIfDisposed(),Kr(this)},lt.a.prototype.rsqrt=function(){return this.throwIfDisposed(),Xr(this)},lt.a.prototype.selu=function(){return this.throwIfDisposed(),Yr(this)},lt.a.prototype.separableConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Jr(this,t,e,n,r,s,a)},lt.a.prototype.sigmoid=function(){return this.throwIfDisposed(),zt(this)},lt.a.prototype.sign=function(){return this.throwIfDisposed(),Qr(this)},lt.a.prototype.sin=function(){return this.throwIfDisposed(),ts(this)},lt.a.prototype.sinh=function(){return this.throwIfDisposed(),es(this)},lt.a.prototype.slice=function(t,e){return this.throwIfDisposed(),Qt(this,t,e)},lt.a.prototype.softmax=function(t){return this.throwIfDisposed(),is(this,t)},lt.a.prototype.softplus=function(){return this.throwIfDisposed(),jn(this)},lt.a.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),dr(this,t,e)},lt.a.prototype.split=function(t,e){return this.throwIfDisposed(),Hr(this,t,e)},lt.a.prototype.sqrt=function(){return this.throwIfDisposed(),os(this)},lt.a.prototype.square=function(){return this.throwIfDisposed(),Qn(this)},lt.a.prototype.squaredDifference=function(t){return this.throwIfDisposed(),us(this,t)},lt.a.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),Bs(this,t)},lt.a.prototype.squeeze=function(t){return this.throwIfDisposed(),ls(this,t)},lt.a.prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof lt.a?[this,t]:[this,...t];return cs(n,e)},lt.a.prototype.step=function(t){return this.throwIfDisposed(),hs(this,t)},lt.a.prototype.stridedSlice=function(t,e,n,r,s,a,i,o){return this.throwIfDisposed(),ds(this,t,e,n,r,s,a,i,o)},lt.a.prototype.subStrict=function(t){return this.throwIfDisposed(),Ps(this,t)},lt.a.prototype.sub=function(t){return this.throwIfDisposed(),Fn(this,t)},lt.a.prototype.sum=function(t,e){return this.throwIfDisposed(),Mn(this,t,e)},lt.a.prototype.tan=function(){return this.throwIfDisposed(),ps(this)},lt.a.prototype.tanh=function(){return this.throwIfDisposed(),te(this)},lt.a.prototype.tile=function(t){return this.throwIfDisposed(),qe(this,t)},lt.a.prototype.toBool=function(){return this.throwIfDisposed(),K(this,"bool")},lt.a.prototype.toFloat=function(){return this.throwIfDisposed(),K(this,"float32")},lt.a.prototype.toInt=function(){return this.throwIfDisposed(),K(this,"int32")},lt.a.prototype.topk=function(t,e){return this.throwIfDisposed(),xs(this,t,e)},lt.a.prototype.transpose=function(t){return this.throwIfDisposed(),z(this,t)},lt.a.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),vs(this,t,e)},lt.a.prototype.unstack=function(t){return this.throwIfDisposed(),Os(this,t)},lt.a.prototype.where=function(t,e){return this.throwIfDisposed(),ze(t,this,e)},lt.a.prototype.zerosLike=function(){return this.throwIfDisposed(),Le(this)},n.d(e,"AdadeltaOptimizer",(function(){return lo})),n.d(e,"AdagradOptimizer",(function(){return co})),n.d(e,"AdamOptimizer",(function(){return ho})),n.d(e,"AdamaxOptimizer",(function(){return po})),n.d(e,"MomentumOptimizer",(function(){return mo})),n.d(e,"Optimizer",(function(){return uo})),n.d(e,"RMSPropOptimizer",(function(){return go})),n.d(e,"SGDOptimizer",(function(){return fo})),n.d(e,"Tensor",(function(){return lt.a})),n.d(e,"TensorBuffer",(function(){return lt.b})),n.d(e,"Variable",(function(){return lt.c})),n.d(e,"Rank",(function(){return bo.a})),n.d(e,"sumOutType",(function(){return bo.b})),n.d(e,"upcastType",(function(){return bo.c})),n.d(e,"abs",(function(){return O})),n.d(e,"acos",(function(){return k})),n.d(e,"acosh",(function(){return S})),n.d(e,"add",(function(){return N})),n.d(e,"addN",(function(){return A})),n.d(e,"all",(function(){return L})),n.d(e,"any",(function(){return B})),n.d(e,"argMax",(function(){return P})),n.d(e,"argMin",(function(){return W})),n.d(e,"asin",(function(){return V})),n.d(e,"asinh",(function(){return U})),n.d(e,"atan",(function(){return G})),n.d(e,"atan2",(function(){return H})),n.d(e,"atanh",(function(){return q})),n.d(e,"avgPool",(function(){return ut})),n.d(e,"avgPool3d",(function(){return Rt})),n.d(e,"basicLSTMCell",(function(){return ee})),n.d(e,"batchToSpaceND",(function(){return ne})),n.d(e,"batchNorm",(function(){return se})),n.d(e,"batchNorm2d",(function(){return ae})),n.d(e,"batchNorm3d",(function(){return ie})),n.d(e,"batchNorm4d",(function(){return oe})),n.d(e,"broadcastTo",(function(){return le})),n.d(e,"buffer",(function(){return ce})),n.d(e,"cast",(function(){return K})),n.d(e,"ceil",(function(){return he})),n.d(e,"clipByValue",(function(){return de})),n.d(e,"clone",(function(){return ue})),n.d(e,"complex",(function(){return pe.a})),n.d(e,"concat",(function(){return _t})),n.d(e,"concat1d",(function(){return fe})),n.d(e,"concat2d",(function(){return me})),n.d(e,"concat3d",(function(){return ge})),n.d(e,"concat4d",(function(){return be})),n.d(e,"conv1d",(function(){return xe})),n.d(e,"conv2d",(function(){return ye})),n.d(e,"conv2dTranspose",(function(){return ve})),n.d(e,"conv3d",(function(){return Oe})),n.d(e,"conv3dTranspose",(function(){return Se})),n.d(e,"cos",(function(){return Ce})),n.d(e,"cosh",(function(){return Ne})),n.d(e,"cumsum",(function(){return Ie})),n.d(e,"depthToSpace",(function(){return Ae})),n.d(e,"depthwiseConv2d",(function(){return Ee})),n.d(e,"diag",(function(){return Te})),n.d(e,"dilation2d",(function(){return Re})),n.d(e,"div",(function(){return je})),n.d(e,"divNoNan",(function(){return Be})),n.d(e,"dot",(function(){return Pe})),n.d(e,"elu",(function(){return We})),n.d(e,"equal",(function(){return Me})),n.d(e,"erf",(function(){return Ve})),n.d(e,"exp",(function(){return Ue})),n.d(e,"expandDims",(function(){return Ge})),n.d(e,"expm1",(function(){return He})),n.d(e,"eye",(function(){return Ke})),n.d(e,"fft",(function(){return Xe})),n.d(e,"fill",(function(){return Ye})),n.d(e,"floor",(function(){return Je})),n.d(e,"floorDiv",(function(){return $e})),n.d(e,"gather",(function(){return rn})),n.d(e,"greater",(function(){return sn})),n.d(e,"greaterEqual",(function(){return an})),n.d(e,"ifft",(function(){return on})),n.d(e,"imag",(function(){return un})),n.d(e,"irfft",(function(){return pn})),n.d(e,"isFinite",(function(){return fn})),n.d(e,"isInf",(function(){return mn})),n.d(e,"isNaN",(function(){return gn})),n.d(e,"leakyRelu",(function(){return yn})),n.d(e,"less",(function(){return xn})),n.d(e,"lessEqual",(function(){return wn})),n.d(e,"linspace",(function(){return vn})),n.d(e,"localResponseNormalization",(function(){return On})),n.d(e,"log",(function(){return kn})),n.d(e,"log1p",(function(){return Sn})),n.d(e,"logSigmoid",(function(){return Dn})),n.d(e,"logSoftmax",(function(){return zn})),n.d(e,"logSumExp",(function(){return Ln})),n.d(e,"logicalAnd",(function(){return Bn})),n.d(e,"logicalNot",(function(){return Pn})),n.d(e,"logicalOr",(function(){return Wn})),n.d(e,"logicalXor",(function(){return Vn})),n.d(e,"matMul",(function(){return Ft})),n.d(e,"max",(function(){return _n})),n.d(e,"maxPool",(function(){return Un})),n.d(e,"maxPool3d",(function(){return Gn})),n.d(e,"maxPoolWithArgmax",(function(){return Hn})),n.d(e,"maximum",(function(){return bn})),n.d(e,"mean",(function(){return Xn})),n.d(e,"min",(function(){return Yn})),n.d(e,"minimum",(function(){return Jn})),n.d(e,"mod",(function(){return Zn})),n.d(e,"moments",(function(){return tr})),n.d(e,"mul",(function(){return Mt})),n.d(e,"multiRNNCell",(function(){return er})),n.d(e,"multinomial",(function(){return nr})),n.d(e,"neg",(function(){return $n})),n.d(e,"notEqual",(function(){return rr})),n.d(e,"oneHot",(function(){return sr})),n.d(e,"ones",(function(){return Kn})),n.d(e,"onesLike",(function(){return ar})),n.d(e,"outerProduct",(function(){return ir})),n.d(e,"pad",(function(){return or})),n.d(e,"pad1d",(function(){return ur})),n.d(e,"pad2d",(function(){return lr})),n.d(e,"pad3d",(function(){return cr})),n.d(e,"pad4d",(function(){return hr})),n.d(e,"pool",(function(){return pr})),n.d(e,"pow",(function(){return fr})),n.d(e,"prelu",(function(){return mr})),n.d(e,"print",(function(){return gr})),n.d(e,"prod",(function(){return br})),n.d(e,"rand",(function(){return yr})),n.d(e,"randomGamma",(function(){return jr})),n.d(e,"randomNormal",(function(){return Dr})),n.d(e,"randomUniform",(function(){return _r})),n.d(e,"range",(function(){return Mr})),n.d(e,"real",(function(){return ln})),n.d(e,"reciprocal",(function(){return zr})),n.d(e,"relu",(function(){return Lr})),n.d(e,"relu6",(function(){return Br})),n.d(e,"reshape",(function(){return M})),n.d(e,"reverse",(function(){return cn})),n.d(e,"reverse1d",(function(){return Pr})),n.d(e,"reverse2d",(function(){return Wr})),n.d(e,"reverse3d",(function(){return Vr})),n.d(e,"reverse4d",(function(){return Ur})),n.d(e,"rfft",(function(){return qr})),n.d(e,"round",(function(){return Kr})),n.d(e,"rsqrt",(function(){return Xr})),n.d(e,"scalar",(function(){return dn})),n.d(e,"selu",(function(){return Yr})),n.d(e,"separableConv2d",(function(){return Jr})),n.d(e,"setdiff1dAsync",(function(){return Zr})),n.d(e,"sigmoid",(function(){return zt})),n.d(e,"sign",(function(){return Qr})),n.d(e,"sin",(function(){return ts})),n.d(e,"sinh",(function(){return es})),n.d(e,"slice",(function(){return Qt})),n.d(e,"slice1d",(function(){return ns})),n.d(e,"slice2d",(function(){return rs})),n.d(e,"slice3d",(function(){return ss})),n.d(e,"slice4d",(function(){return as})),n.d(e,"softmax",(function(){return is})),n.d(e,"softplus",(function(){return jn})),n.d(e,"spaceToBatchND",(function(){return dr})),n.d(e,"split",(function(){return Hr})),n.d(e,"sqrt",(function(){return os})),n.d(e,"square",(function(){return Qn})),n.d(e,"squaredDifference",(function(){return us})),n.d(e,"squeeze",(function(){return ls})),n.d(e,"stack",(function(){return cs})),n.d(e,"step",(function(){return hs})),n.d(e,"stridedSlice",(function(){return ds})),n.d(e,"sub",(function(){return Fn})),n.d(e,"sum",(function(){return Mn})),n.d(e,"tan",(function(){return ps})),n.d(e,"tanh",(function(){return te})),n.d(e,"tensor",(function(){return Dt.a})),n.d(e,"tensor1d",(function(){return Fr})),n.d(e,"tensor2d",(function(){return fs})),n.d(e,"tensor3d",(function(){return ms})),n.d(e,"tensor4d",(function(){return gs})),n.d(e,"tensor5d",(function(){return bs})),n.d(e,"tensor6d",(function(){return ys})),n.d(e,"tile",(function(){return qe})),n.d(e,"topk",(function(){return xs})),n.d(e,"truncatedNormal",(function(){return ws})),n.d(e,"unsortedSegmentSum",(function(){return vs})),n.d(e,"unstack",(function(){return Os})),n.d(e,"variable",(function(){return ks})),n.d(e,"where",(function(){return ze})),n.d(e,"whereAsync",(function(){return Cs})),n.d(e,"zeros",(function(){return qn})),n.d(e,"zerosLike",(function(){return Le})),n.d(e,"booleanMaskAsync",(function(){return Ns})),n.d(e,"equalStrict",(function(){return Is})),n.d(e,"greaterEqualStrict",(function(){return As})),n.d(e,"greaterStrict",(function(){return Es})),n.d(e,"lessEqualStrict",(function(){return Ts})),n.d(e,"lessStrict",(function(){return Rs})),n.d(e,"notEqualStrict",(function(){return $s})),n.d(e,"addStrict",(function(){return js})),n.d(e,"divStrict",(function(){return Ds})),n.d(e,"maximumStrict",(function(){return _s})),n.d(e,"minimumStrict",(function(){return Fs})),n.d(e,"modStrict",(function(){return Ms})),n.d(e,"mulStrict",(function(){return zs})),n.d(e,"powStrict",(function(){return Ls})),n.d(e,"squaredDifferenceStrict",(function(){return Bs})),n.d(e,"subStrict",(function(){return Ps})),n.d(e,"transpose",(function(){return z})),n.d(e,"norm",(function(){return Vs})),n.d(e,"movingAverage",(function(){return Us})),n.d(e,"scatterND",(function(){return Ks})),n.d(e,"sparseToDense",(function(){return Xs})),n.d(e,"gatherND",(function(){return Ys})),n.d(e,"dropout",(function(){return Js})),n.d(e,"enclosingPowerOfTwo",(function(){return Zs})),n.d(e,"cosineWindow",(function(){return Qs})),n.d(e,"inTopKAsync",(function(){return ta})),n.d(e,"op",(function(){return v.a})),n.d(e,"image",(function(){return Za})),n.d(e,"linalg",(function(){return Qa})),n.d(e,"losses",(function(){return ti})),n.d(e,"spectral",(function(){return Ya})),n.d(e,"fused",(function(){return o})),n.d(e,"signal",(function(){return Ja})),n.d(e,"Reduction",(function(){return Ba})),n.d(e,"train",(function(){return xo})),n.d(e,"enableProdMode",(function(){return ct})),n.d(e,"enableDebugMode",(function(){return ht})),n.d(e,"disableDeprecationWarnings",(function(){return dt})),n.d(e,"deprecationWarn",(function(){return pt})),n.d(e,"disposeVariables",(function(){return ft})),n.d(e,"engine",(function(){return mt})),n.d(e,"memory",(function(){return gt})),n.d(e,"profile",(function(){return bt})),n.d(e,"tidy",(function(){return yt})),n.d(e,"dispose",(function(){return xt})),n.d(e,"keep",(function(){return wt})),n.d(e,"time",(function(){return vt})),n.d(e,"setBackend",(function(){return Ot})),n.d(e,"ready",(function(){return kt})),n.d(e,"getBackend",(function(){return St})),n.d(e,"removeBackend",(function(){return Ct})),n.d(e,"findBackend",(function(){return Nt})),n.d(e,"findBackendFactory",(function(){return It})),n.d(e,"registerBackend",(function(){return At})),n.d(e,"backend",(function(){return Et})),n.d(e,"setPlatform",(function(){return Tt})),n.d(e,"getKernel",(function(){return to.b})),n.d(e,"getGradient",(function(){return to.a})),n.d(e,"getKernelsForBackend",(function(){return to.c})),n.d(e,"registerKernel",(function(){return to.e})),n.d(e,"registerGradient",(function(){return to.d})),n.d(e,"unregisterKernel",(function(){return to.g})),n.d(e,"unregisterGradient",(function(){return to.f})),n.d(e,"customGrad",(function(){return Tn})),n.d(e,"grad",(function(){return Cn})),n.d(e,"grads",(function(){return Nn})),n.d(e,"valueAndGrad",(function(){return In})),n.d(e,"valueAndGrads",(function(){return An})),n.d(e,"variableGrads",(function(){return En})),n.d(e,"Environment",(function(){return b.b})),n.d(e,"env",(function(){return b.c})),n.d(e,"ENV",(function(){return b.a})),n.d(e,"version_core",(function(){return"2.3.0"})),n.d(e,"nextFrame",(function(){return wo.a})),n.d(e,"browser",(function(){return h})),n.d(e,"io",(function(){return l})),n.d(e,"math",(function(){return c})),n.d(e,"serialization",(function(){return p})),n.d(e,"test_util",(function(){return a})),n.d(e,"util",(function(){return I})),n.d(e,"backend_util",(function(){return f})),n.d(e,"tensor_util",(function(){return C})),n.d(e,"slice_util",(function(){return r})),n.d(e,"gather_util",(function(){return d})),n.d(e,"scatter_util",(function(){return i})),n.d(e,"device_util",(function(){return Ko})),n.d(e,"kernel_impls",(function(){return m})),n.d(e,"KernelBackend",(function(){return Qo})),n.d(e,"DataStorage",(function(){return Zo})),n.d(e,"Abs",(function(){return x.a})),n.d(e,"Acos",(function(){return x.b})),n.d(e,"Acosh",(function(){return x.c})),n.d(e,"Add",(function(){return x.d})),n.d(e,"AddN",(function(){return x.e})),n.d(e,"All",(function(){return x.f})),n.d(e,"Any",(function(){return x.g})),n.d(e,"ArgMax",(function(){return x.h})),n.d(e,"ArgMin",(function(){return x.i})),n.d(e,"Asin",(function(){return x.j})),n.d(e,"Asinh",(function(){return x.k})),n.d(e,"Atan",(function(){return x.l})),n.d(e,"Atanh",(function(){return x.n})),n.d(e,"Atan2",(function(){return x.m})),n.d(e,"AvgPool",(function(){return x.o})),n.d(e,"AvgPoolBackprop",(function(){return x.r})),n.d(e,"AvgPool3D",(function(){return x.p})),n.d(e,"AvgPool3DBackprop",(function(){return x.q})),n.d(e,"BatchMatMul",(function(){return x.s})),n.d(e,"BatchToSpaceND",(function(){return x.t})),n.d(e,"BroadcastTo",(function(){return x.u})),n.d(e,"Cast",(function(){return x.v})),n.d(e,"Ceil",(function(){return x.w})),n.d(e,"ClipByValue",(function(){return x.x})),n.d(e,"Complex",(function(){return x.y})),n.d(e,"Concat",(function(){return x.z})),n.d(e,"Conv2D",(function(){return x.A})),n.d(e,"Conv2DBackpropFilter",(function(){return x.B})),n.d(e,"Conv2DBackpropInput",(function(){return x.C})),n.d(e,"Conv3D",(function(){return x.D})),n.d(e,"Conv3DBackpropFilterV2",(function(){return x.E})),n.d(e,"Conv3DBackpropInputV2",(function(){return x.F})),n.d(e,"Cos",(function(){return x.G})),n.d(e,"Cosh",(function(){return x.H})),n.d(e,"Cumsum",(function(){return x.J})),n.d(e,"CropAndResize",(function(){return x.I})),n.d(e,"DepthToSpace",(function(){return x.K})),n.d(e,"DepthwiseConv2dNative",(function(){return x.L})),n.d(e,"DepthwiseConv2dNativeBackpropFilter",(function(){return x.M})),n.d(e,"DepthwiseConv2dNativeBackpropInput",(function(){return x.N})),n.d(e,"Diag",(function(){return x.O})),n.d(e,"Dilation2D",(function(){return x.P})),n.d(e,"Dilation2DBackpropInput",(function(){return x.R})),n.d(e,"Dilation2DBackpropFilter",(function(){return x.Q})),n.d(e,"Div",(function(){return x.S})),n.d(e,"Elu",(function(){return x.T})),n.d(e,"EluGrad",(function(){return x.U})),n.d(e,"Erf",(function(){return x.W})),n.d(e,"Equal",(function(){return x.V})),n.d(e,"Exp",(function(){return x.X})),n.d(e,"Expm1",(function(){return x.Y})),n.d(e,"FFT",(function(){return x.Z})),n.d(e,"Fill",(function(){return x.ab})),n.d(e,"FlipLeftRight",(function(){return x.bb})),n.d(e,"Floor",(function(){return x.cb})),n.d(e,"FloorDiv",(function(){return x.db})),n.d(e,"FusedBatchNorm",(function(){return x.fb})),n.d(e,"GatherV2",(function(){return x.jb})),n.d(e,"GatherNd",(function(){return x.ib})),n.d(e,"Greater",(function(){return x.kb})),n.d(e,"GreaterEqual",(function(){return x.lb})),n.d(e,"Identity",(function(){return x.nb})),n.d(e,"IFFT",(function(){return x.mb})),n.d(e,"Imag",(function(){return x.ob})),n.d(e,"IsFinite",(function(){return x.pb})),n.d(e,"IsInf",(function(){return x.qb})),n.d(e,"IsNan",(function(){return x.rb})),n.d(e,"Less",(function(){return x.ub})),n.d(e,"LessEqual",(function(){return x.vb})),n.d(e,"LinSpace",(function(){return x.wb})),n.d(e,"Log",(function(){return x.xb})),n.d(e,"Log1p",(function(){return x.yb})),n.d(e,"LogicalAnd",(function(){return x.Ab})),n.d(e,"LogicalNot",(function(){return x.Bb})),n.d(e,"LogicalOr",(function(){return x.Cb})),n.d(e,"LogSoftmax",(function(){return x.zb})),n.d(e,"LRN",(function(){return x.sb})),n.d(e,"LRNBackprop",(function(){return x.tb})),n.d(e,"Max",(function(){return x.Db})),n.d(e,"Maximum",(function(){return x.Jb})),n.d(e,"MaxPool",(function(){return x.Eb})),n.d(e,"MaxPoolBackprop",(function(){return x.Hb})),n.d(e,"MaxPool3D",(function(){return x.Fb})),n.d(e,"MaxPool3DBackprop",(function(){return x.Gb})),n.d(e,"MaxPoolWithArgmax",(function(){return x.Ib})),n.d(e,"Mean",(function(){return x.Kb})),n.d(e,"Min",(function(){return x.Lb})),n.d(e,"Minimum",(function(){return x.Mb})),n.d(e,"Mod",(function(){return x.Nb})),n.d(e,"Multiply",(function(){return x.Ob})),n.d(e,"Negate",(function(){return x.Pb})),n.d(e,"NotEqual",(function(){return x.Tb})),n.d(e,"NonMaxSuppressionV3",(function(){return x.Qb})),n.d(e,"NonMaxSuppressionV4",(function(){return x.Rb})),n.d(e,"NonMaxSuppressionV5",(function(){return x.Sb})),n.d(e,"OnesLike",(function(){return x.Vb})),n.d(e,"OneHot",(function(){return x.Ub})),n.d(e,"PadV2",(function(){return x.Wb})),n.d(e,"Pool",(function(){return x.Xb})),n.d(e,"Pow",(function(){return x.Yb})),n.d(e,"Prelu",(function(){return x.Zb})),n.d(e,"Prod",(function(){return x.ac})),n.d(e,"Range",(function(){return x.bc})),n.d(e,"Real",(function(){return x.cc})),n.d(e,"Reciprocal",(function(){return x.dc})),n.d(e,"Relu",(function(){return x.ec})),n.d(e,"Reshape",(function(){return x.gc})),n.d(e,"ResizeNearestNeighbor",(function(){return x.jc})),n.d(e,"ResizeNearestNeighborGrad",(function(){return x.kc})),n.d(e,"ResizeBilinear",(function(){return x.hc})),n.d(e,"ResizeBilinearGrad",(function(){return x.ic})),n.d(e,"Relu6",(function(){return x.fc})),n.d(e,"Reverse",(function(){return x.lc})),n.d(e,"Round",(function(){return x.nc})),n.d(e,"Rsqrt",(function(){return x.oc})),n.d(e,"ScatterNd",(function(){return x.pc})),n.d(e,"SelectV2",(function(){return x.qc})),n.d(e,"Selu",(function(){return x.rc})),n.d(e,"Slice",(function(){return x.wc})),n.d(e,"Sin",(function(){return x.uc})),n.d(e,"Sinh",(function(){return x.vc})),n.d(e,"Sign",(function(){return x.tc})),n.d(e,"Sigmoid",(function(){return x.sc})),n.d(e,"Softplus",(function(){return x.yc})),n.d(e,"Sqrt",(function(){return x.Cc})),n.d(e,"Sum",(function(){return x.Ic})),n.d(e,"SpaceToBatchND",(function(){return x.zc})),n.d(e,"SplitV",(function(){return x.Bc})),n.d(e,"Softmax",(function(){return x.xc})),n.d(e,"SquaredDifference",(function(){return x.Ec})),n.d(e,"Square",(function(){return x.Dc})),n.d(e,"Sub",(function(){return x.Hc})),n.d(e,"SparseToDense",(function(){return x.Ac})),n.d(e,"StridedSlice",(function(){return x.Gc})),n.d(e,"Tan",(function(){return x.Jc})),n.d(e,"Tanh",(function(){return x.Kc})),n.d(e,"Tile",(function(){return x.Lc})),n.d(e,"TopK",(function(){return x.Mc})),n.d(e,"Transpose",(function(){return x.Nc})),n.d(e,"Unpack",(function(){return x.Oc})),n.d(e,"UnsortedSegmentSum",(function(){return x.Pc})),n.d(e,"ZerosLike",(function(){return x.Qc})),n.d(e,"Step",(function(){return x.Fc})),n.d(e,"FromPixels",(function(){return x.eb})),n.d(e,"RotateWithOffset",(function(){return x.mc})),n.d(e,"_FusedMatMul",(function(){return x.Rc})),n.d(e,"FusedConv2D",(function(){return x.gb})),n.d(e,"FusedDepthwiseConv2D",(function(){return x.hb}))},function(t,e,n){"use strict";n.r(e),n.d(e,"shuffle",(function(){return s})),n.d(e,"clamp",(function(){return a})),n.d(e,"nearestLargerEven",(function(){return i})),n.d(e,"sum",(function(){return o})),n.d(e,"randUniform",(function(){return u})),n.d(e,"distSquared",(function(){return l})),n.d(e,"assert",(function(){return c})),n.d(e,"assertShapesMatch",(function(){return h})),n.d(e,"assertNonNull",(function(){return d})),n.d(e,"flatten",(function(){return p})),n.d(e,"sizeFromShape",(function(){return f})),n.d(e,"isScalarShape",(function(){return m})),n.d(e,"arraysEqual",(function(){return g})),n.d(e,"isInt",(function(){return b})),n.d(e,"tanh",(function(){return y})),n.d(e,"sizeToSquarishShape",(function(){return x})),n.d(e,"createShuffledIndices",(function(){return w})),n.d(e,"rightPad",(function(){return v})),n.d(e,"repeatedTry",(function(){return O})),n.d(e,"inferFromImplicitShape",(function(){return k})),n.d(e,"parseAxisParam",(function(){return S})),n.d(e,"squeezeShape",(function(){return C})),n.d(e,"getTypedArrayFromDType",(function(){return N})),n.d(e,"getArrayFromDType",(function(){return I})),n.d(e,"checkConversionForErrors",(function(){return A})),n.d(e,"isValidDtype",(function(){return E})),n.d(e,"hasEncodingLoss",(function(){return T})),n.d(e,"isTypedArray",(function(){return R})),n.d(e,"bytesPerElement",(function(){return $})),n.d(e,"bytesFromStringArray",(function(){return j})),n.d(e,"isString",(function(){return D})),n.d(e,"isBoolean",(function(){return _})),n.d(e,"isNumber",(function(){return F})),n.d(e,"inferDtype",(function(){return M})),n.d(e,"isFunction",(function(){return z})),n.d(e,"nearestDivisor",(function(){return L})),n.d(e,"computeStrides",(function(){return B})),n.d(e,"toTypedArray",(function(){return P})),n.d(e,"toNestedArray",(function(){return V})),n.d(e,"makeOnesTypedArray",(function(){return U})),n.d(e,"makeZerosTypedArray",(function(){return G})),n.d(e,"makeZerosNestedTypedArray",(function(){return H})),n.d(e,"now",(function(){return q})),n.d(e,"assertNonNegativeIntegerDimensions",(function(){return K})),n.d(e,"fetch",(function(){return X})),n.d(e,"encodeString",(function(){return Y})),n.d(e,"decodeString",(function(){return J})),n.d(e,"locToIndex",(function(){return Z})),n.d(e,"indexToLoc",(function(){return Q}));var r=n(9);function s(t){let e=t.length,n=0,r=0;for(;e>0;)r=Math.random()*e|0,e--,n=t[e],t[e]=t[r],t[r]=n}function a(t,e,n){return Math.max(t,Math.min(e,n))}function i(t){return t%2==0?t:t+1}function o(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}function u(t,e){const n=Math.random();return e*n+(1-n)*t}function l(t,e){let n=0;for(let r=0;r<t.length;r++){const s=Number(t[r])-Number(e[r]);n+=s*s}return n}function c(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function h(t,e,n=""){c(g(t,e),()=>n+` Shapes ${t} and ${e} must match`)}function d(t){c(null!=t,()=>"The input to the tensor constructor must be a non-null value.")}function p(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||R(t)&&!n)for(let r=0;r<t.length;++r)p(t[r],e,n);else e.push(t);return e}function f(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function m(t){return 0===t.length}function g(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function b(t){return t%1==0}function y(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function x(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function w(t){const e=new Uint32Array(t);for(let n=0;n<t;++n)e[n]=n;return s(e),e}function v(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function O(t,e=(t=>0),n){return new Promise((r,s)=>{let a=0;const i=()=>{if(t())return void r();a++;const o=e(a);null!=n&&a>=n?s():setTimeout(i,o)};i()})}function k(t,e){let n=1,r=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`);r=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const s=t.slice();return s[r]=e/n,s}function S(t,e){const n=e.length;return c((t=null==t?e.map((t,e)=>e):[].concat(t)).every(t=>t>=-n&&t<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t),c(t.every(t=>b(t)),()=>"All values in axis param must be integers but got axis "+t),t.map(t=>t<0?n+t:t)}function C(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||s?null:S(e,t).sort();let i=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[i]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[i]||a[i]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),a[i]<=e&&i++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function N(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function I(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function A(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}function E(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function T(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function R(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function $(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function j(t){if(null==t)return 0;let e=0;return t.forEach(t=>e+=t.length),e}function D(t){return"string"==typeof t||t instanceof String}function _(t){return"boolean"==typeof t}function F(t){return"number"==typeof t}function M(t){return Array.isArray(t)?M(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":F(t)?"float32":D(t)?"string":_(t)?"bool":"float32"}function z(t){return!!(t&&t.constructor&&t.call&&t.apply)}function L(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function B(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function P(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=p(t)),Object(r.c)().getBool("DEBUG")&&A(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type "+e)}function W(t,e,n){const r=new Array;if(1===e.length){const s=e[0];for(let e=0;e<s;e++)r[e]=n[t+e]}else{const s=e[0],a=e.slice(1),i=a.reduce((t,e)=>t*e);for(let e=0;e<s;e++)r[e]=W(t+e*i,a,n)}return r}function V(t,e){if(0===t.length)return e[0];const n=t.reduce((t,e)=>t*e);if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}.`);return W(0,t,e)}function U(t,e){const n=G(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function G(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function H(t,e){const n=t.reduce((t,e)=>t*e,1);if(null==e||"float32"===e)return V(t,new Float32Array(n));if("int32"===e)return V(t,new Int32Array(n));if("bool"===e)return V(t,new Uint8Array(n));throw new Error("Unknown data type "+e)}function q(){return Object(r.c)().platform.now()}function K(t){t.forEach(e=>{c(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`)})}function X(t,e){return Object(r.c)().platform.fetch(t,e)}function Y(t,e="utf-8"){return e=e||"utf-8",Object(r.c)().platform.encode(t,e)}function J(t,e="utf-8"){return e=e||"utf-8",Object(r.c)().platform.decode(t,e)}function Z(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let e=0;e<t.length-1;++e)r+=n[e]*t[e];return r}function Q(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let e=0;e<r.length-1;++e)r[e]=Math.floor(t/n[e]),t-=r[e]*n[e];return r[r.length-1]=t,r}},function(t,e,n){"use strict";n.d(e,"c",(function(){return o})),n.d(e,"a",(function(){return c})),n.d(e,"b",(function(){return h}));var r=n(6),s=n(9),a=n(7),i=n(1);function o(t,e){let n=t;if(Object(i.isTypedArray)(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||Object(i.isTypedArray)(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&Object(s.c)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&u(t,r,[]),r}function u(t,e,n){if(n=n||[],!Array.isArray(t)&&!Object(i.isTypedArray)(t))return void Object(i.assert)(0===e.length,()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);Object(i.assert)(e.length>0,()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${t.length} elements`),Object(i.assert)(t.length===e[0],()=>`Element arr[${n.join("][")}] should have ${e[0]} elements, but has ${t.length} elements`);const r=e.slice(1);for(let e=0;e<t.length;++e)u(t[e],r,n.concat(e))}function l(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}function c(t,e,n,s="numeric"){if(t instanceof a.a)return l(s,t.dtype,e,n),t;let u=Object(i.inferDtype)(t);if("string"!==u&&["bool","int32","float32"].indexOf(s)>=0&&(u=s),l(s,u,e,n),null==t||!Object(i.isTypedArray)(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const c=o(t,u);Object(i.isTypedArray)(t)||Array.isArray(t)||(t=[t]);const h="string"!==u?Object(i.toTypedArray)(t,u):Object(i.flatten)(t,[],!0);return r.a.makeTensor(h,c,u)}function h(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map((t,r)=>c(t,`${e}[${r}]`,n),r)}},function(t,e,n){"use strict";n.d(e,"d",(function(){return s})),n.d(e,"e",(function(){return a})),n.d(e,"f",(function(){return i})),n.d(e,"b",(function(){return o})),n.d(e,"g",(function(){return l})),n.d(e,"c",(function(){return c})),n.d(e,"a",(function(){return h}));var r=n(0);function s(t,e,n,s){const i=e.inputParams[t];if(i&&void 0!==i.inputIndexStart){const t=i.inputIndexStart,o=0===i.inputIndexEnd?void 0:void 0===i.inputIndexEnd?t+1:i.inputIndexEnd;if("tensor"===i.type)return a(e.inputNames[i.inputIndexStart],n,s);if("tensors"===i.type){return e.inputNames.slice(t,o).map(t=>a(t,n,s))}const u=a(e.inputNames.slice(t)[0],n,s),l=u.dataSync();return"number"===i.type?l[0]:r.util.toNestedArray(u.shape,l)}const o=e.attrParams[t];return o&&o.value}function a(t,e,n){const[r,s]=l(t),a=n.currentContextIds.find(t=>!!e[u(r,t)]);return void 0!==a?e[u(r,a)][s]:void 0}function i(t,e,n){return e[u(t,n.currentContextId)]}function o(t,e){const[n,r]=l(t);return[u(n,e&&e.currentContextId),r]}function u(t,e){return e?`${t}-${e}`:t}function l(t){const e=t.split(":");if(1===e.length)return[t,0];return[e[0],Number(e[e.length-1])]}function c(t,e,n){let r=s("pad",t,e,n);if("explicit"===r){r=s("explicitPaddings",t,e,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)a[t][0]=r[2*t],a[t][1]=r[2*t+1];return a}return r}function h(t){return t.kept?t:r.clone(t)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return s})),n.d(e,"c",(function(){return a})),n.d(e,"d",(function(){return i})),n.d(e,"e",(function(){return o})),n.d(e,"f",(function(){return u})),n.d(e,"g",(function(){return l})),n.d(e,"h",(function(){return c})),n.d(e,"i",(function(){return h})),n.d(e,"j",(function(){return d})),n.d(e,"k",(function(){return p})),n.d(e,"l",(function(){return f})),n.d(e,"n",(function(){return m})),n.d(e,"m",(function(){return g})),n.d(e,"o",(function(){return b})),n.d(e,"r",(function(){return y})),n.d(e,"p",(function(){return x})),n.d(e,"q",(function(){return w})),n.d(e,"s",(function(){return v})),n.d(e,"t",(function(){return O})),n.d(e,"u",(function(){return k})),n.d(e,"v",(function(){return S})),n.d(e,"w",(function(){return C})),n.d(e,"x",(function(){return N})),n.d(e,"y",(function(){return I})),n.d(e,"z",(function(){return A})),n.d(e,"A",(function(){return E})),n.d(e,"B",(function(){return T})),n.d(e,"C",(function(){return R})),n.d(e,"D",(function(){return $})),n.d(e,"E",(function(){return j})),n.d(e,"F",(function(){return D})),n.d(e,"G",(function(){return _})),n.d(e,"H",(function(){return F})),n.d(e,"J",(function(){return M})),n.d(e,"I",(function(){return z})),n.d(e,"K",(function(){return L})),n.d(e,"L",(function(){return B})),n.d(e,"M",(function(){return P})),n.d(e,"N",(function(){return W})),n.d(e,"O",(function(){return V})),n.d(e,"P",(function(){return U})),n.d(e,"R",(function(){return G})),n.d(e,"Q",(function(){return H})),n.d(e,"S",(function(){return q})),n.d(e,"T",(function(){return K})),n.d(e,"U",(function(){return X})),n.d(e,"W",(function(){return Y})),n.d(e,"V",(function(){return J})),n.d(e,"X",(function(){return Z})),n.d(e,"Y",(function(){return Q})),n.d(e,"Z",(function(){return tt})),n.d(e,"ab",(function(){return et})),n.d(e,"bb",(function(){return nt})),n.d(e,"cb",(function(){return rt})),n.d(e,"db",(function(){return st})),n.d(e,"fb",(function(){return at})),n.d(e,"jb",(function(){return it})),n.d(e,"ib",(function(){return ot})),n.d(e,"kb",(function(){return ut})),n.d(e,"lb",(function(){return lt})),n.d(e,"nb",(function(){return ct})),n.d(e,"mb",(function(){return ht})),n.d(e,"ob",(function(){return dt})),n.d(e,"pb",(function(){return pt})),n.d(e,"qb",(function(){return ft})),n.d(e,"rb",(function(){return mt})),n.d(e,"ub",(function(){return gt})),n.d(e,"vb",(function(){return bt})),n.d(e,"wb",(function(){return yt})),n.d(e,"xb",(function(){return xt})),n.d(e,"yb",(function(){return wt})),n.d(e,"Ab",(function(){return vt})),n.d(e,"Bb",(function(){return Ot})),n.d(e,"Cb",(function(){return kt})),n.d(e,"zb",(function(){return St})),n.d(e,"sb",(function(){return Ct})),n.d(e,"tb",(function(){return Nt})),n.d(e,"Db",(function(){return It})),n.d(e,"Jb",(function(){return At})),n.d(e,"Eb",(function(){return Et})),n.d(e,"Hb",(function(){return Tt})),n.d(e,"Fb",(function(){return Rt})),n.d(e,"Gb",(function(){return $t})),n.d(e,"Ib",(function(){return jt})),n.d(e,"Kb",(function(){return Dt})),n.d(e,"Lb",(function(){return _t})),n.d(e,"Mb",(function(){return Ft})),n.d(e,"Nb",(function(){return Mt})),n.d(e,"Ob",(function(){return zt})),n.d(e,"Pb",(function(){return Lt})),n.d(e,"Tb",(function(){return Bt})),n.d(e,"Qb",(function(){return Pt})),n.d(e,"Rb",(function(){return Wt})),n.d(e,"Sb",(function(){return Vt})),n.d(e,"Vb",(function(){return Ut})),n.d(e,"Ub",(function(){return Gt})),n.d(e,"Wb",(function(){return Ht})),n.d(e,"Xb",(function(){return qt})),n.d(e,"Yb",(function(){return Kt})),n.d(e,"Zb",(function(){return Xt})),n.d(e,"ac",(function(){return Yt})),n.d(e,"bc",(function(){return Jt})),n.d(e,"cc",(function(){return Zt})),n.d(e,"dc",(function(){return Qt})),n.d(e,"ec",(function(){return te})),n.d(e,"gc",(function(){return ee})),n.d(e,"jc",(function(){return ne})),n.d(e,"kc",(function(){return re})),n.d(e,"hc",(function(){return se})),n.d(e,"ic",(function(){return ae})),n.d(e,"fc",(function(){return ie})),n.d(e,"lc",(function(){return oe})),n.d(e,"nc",(function(){return ue})),n.d(e,"oc",(function(){return le})),n.d(e,"pc",(function(){return ce})),n.d(e,"qc",(function(){return he})),n.d(e,"rc",(function(){return de})),n.d(e,"wc",(function(){return pe})),n.d(e,"uc",(function(){return fe})),n.d(e,"vc",(function(){return me})),n.d(e,"tc",(function(){return ge})),n.d(e,"sc",(function(){return be})),n.d(e,"yc",(function(){return ye})),n.d(e,"Cc",(function(){return xe})),n.d(e,"Ic",(function(){return we})),n.d(e,"zc",(function(){return ve})),n.d(e,"Bc",(function(){return Oe})),n.d(e,"xc",(function(){return ke})),n.d(e,"Ec",(function(){return Se})),n.d(e,"Dc",(function(){return Ce})),n.d(e,"Hc",(function(){return Ne})),n.d(e,"Ac",(function(){return Ie})),n.d(e,"Gc",(function(){return Ae})),n.d(e,"Jc",(function(){return Ee})),n.d(e,"Kc",(function(){return Te})),n.d(e,"Lc",(function(){return Re})),n.d(e,"Mc",(function(){return $e})),n.d(e,"Nc",(function(){return je})),n.d(e,"Oc",(function(){return De})),n.d(e,"Pc",(function(){return _e})),n.d(e,"Qc",(function(){return Fe})),n.d(e,"Fc",(function(){return Me})),n.d(e,"eb",(function(){return ze})),n.d(e,"mc",(function(){return Le})),n.d(e,"Rc",(function(){return Be})),n.d(e,"gb",(function(){return Pe})),n.d(e,"hb",(function(){return We}));const r="Abs",s="Acos",a="Acosh",i="Add",o="AddN",u="All",l="Any",c="ArgMax",h="ArgMin",d="Asin",p="Asinh",f="Atan",m="Atanh",g="Atan2",b="AvgPool",y="AvgPoolBackprop",x="AvgPool3D",w="AvgPool3DBackprop",v="BatchMatMul",O="BatchToSpaceND",k="BroadcastTo",S="Cast",C="Ceil",N="ClipByValue",I="Complex",A="Concat",E="Conv2D",T="Conv2DBackpropFilter",R="Conv2DBackpropInput",$="Conv3D",j="Conv3DBackpropFilterV2",D="Conv3DBackpropInputV2",_="Cos",F="Cosh",M="Cumsum",z="CropAndResize",L="DepthToSpace",B="DepthwiseConv2dNative",P="DepthwiseConv2dNativeBackpropFilter",W="DepthwiseConv2dNativeBackpropInput",V="Diag",U="Dilation2D",G="Dilation2DBackpropInput",H="Dilation2DBackpropFilter",q="Div",K="Elu",X="EluGrad",Y="Erf",J="Equal",Z="Exp",Q="Expm1",tt="FFT",et="Fill",nt="FlipLeftRight",rt="Floor",st="FloorDiv",at="FusedBatchNorm",it="GatherV2",ot="GatherNd",ut="Greater",lt="GreaterEqual",ct="Identity",ht="IFFT",dt="Imag",pt="IsFinite",ft="IsInf",mt="IsNan",gt="Less",bt="LessEqual",yt="LinSpace",xt="Log",wt="Log1p",vt="LogicalAnd",Ot="LogicalNot",kt="LogicalOr",St="LogSoftmax",Ct="LRN",Nt="LRNBackprop",It="Max",At="Maximum",Et="MaxPool",Tt="MaxPoolBackprop",Rt="MaxPool3D",$t="MaxPool3DBackprop",jt="MaxPoolWithArgmax",Dt="Mean",_t="Min",Ft="Minimum",Mt="Mod",zt="Multiply",Lt="Negate",Bt="NotEqual",Pt="NonMaxSuppressionV3",Wt="NonMaxSuppressionV4",Vt="NonMaxSuppressionV5",Ut="OnesLike",Gt="OneHot",Ht="PadV2",qt="Pool",Kt="Pow",Xt="Prelu",Yt="Prod",Jt="Range",Zt="Real",Qt="Reciprocal",te="Relu",ee="Reshape",ne="ResizeNearestNeighbor",re="ResizeNearestNeighborGrad",se="ResizeBilinear",ae="ResizeBilinearGrad",ie="Relu6",oe="Reverse",ue="Round",le="Rsqrt",ce="ScatterNd",he="SelectV2",de="Selu",pe="Slice",fe="Sin",me="Sinh",ge="Sign",be="Sigmoid",ye="Softplus",xe="Sqrt",we="Sum",ve="SpaceToBatchND",Oe="SplitV",ke="Softmax",Se="SquaredDifference",Ce="Square",Ne="Sub",Ie="SparseToDense",Ae="StridedSlice",Ee="Tan",Te="Tanh",Re="Tile",$e="TopK",je="Transpose",De="Unpack",_e="UnsortedSegmentSum",Fe="ZerosLike",Me="Step",ze="FromPixels",Le="RotateWithOffset",Be="_FusedMatMul",Pe="FusedConv2D",We="FusedDepthwiseConv2D"},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n(6);function s(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const s=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));const a=(...t)=>{r.a.startScope(n);try{const e=s(...t);return e instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),r.a.endScope(e),e}catch(t){throw r.a.endScope(null),t}};return Object.defineProperty(a,"name",{value:n,configurable:!0}),a}},function(t,e,n){"use strict";var r=n(9),s=n(25),a=n(4),i=n(17),o=n(1);class u{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new l)}profileKernel(t,e,n){let r;const s=this.backendTimer.time(()=>{r=n()});r.map(e=>{e.data().then(n=>{!function(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}}(n,e.dtype,t)})});return{kernelName:t,outputs:r,inputs:e,timeMs:s.then(t=>t.kernelMs),extraInfo:s.then(t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:s,extraInfo:a}=t;n.forEach(t=>{Promise.all([t.data(),r,a]).then(n=>{this.logger.logKernelProfile(e,t,n[0],n[1],s,n[2])})})}}class l{logKernelProfile(t,e,n,r,s,a){const i="number"==typeof r?o.rightPad(r+"ms",9):r.error,u=o.rightPad(t,25),l=e.rank,c=e.size,h=o.rightPad(e.shape.toString(),14);let d="";for(const t in s){const n=s[t];if(null!=n){const r=n.shape||e.shape,s=r.length;d+=`${t}: ${s}D ${s>0?r:""} `}}console.log(`%c${u}\t%c${i}\t%c${l}D ${h}\t%c${c}\t%c${d}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var c=n(7),h=n(8);n.d(e,"a",(function(){return f}));class d{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class p{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new d}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new u(this.backendInstance),!0}setupRegisteredKernels(){Object(i.c)(this.backendName).forEach(t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){Object(i.c)(t).forEach(e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])})}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(Promise.resolve(n)===n){const e=++this.pendingBackendInitId,r=n.then(n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0)).catch(n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}return this.registry[t]=n,{success:!0,asyncInit:!1}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return p.nextTensorId++}nextVariableId(){return p.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],t=>({x:()=>{const e="float32",n={x:t},r={dtype:e};return f.runKernelFunc(n=>n.cast(t,e),n,null,a.v,r)}}),[],{}),e}runKernel(t,e,n,r,s){return this.runKernelFunc(null,e,null,t,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach(t=>{s+="complex64"===t.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,s,a,o){let u,l=[];const c=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const h=this.state.numBytes,d=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const f=Object(i.b)(r,this.backendName);let m,g;if(null!=f)p=()=>{const t=this.backend.numDataIds();m=f.kernelFunc({inputs:e,attrs:s,backend:this.backend});const n=Array.isArray(m)?m:[m];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const i=n.map(({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n));if(c){let t=this.getTensorsForGradient(r,e,i);if(null==t){null==o&&(o=[]);const e=i.filter((t,e)=>o[e]);t=(a||[]).slice().concat(e)}l=this.saveTensorsForBackwardMode(t)}return i};else{const e=t=>{c&&(l=t.map(t=>this.keep(this.clone(t))))};p=()=>{const n=this.backend.numDataIds();m=this.tidy(()=>t(this.backend,e));const s=Array.isArray(m)?m:[m];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(g=this.profiler.profileKernel(r,e,()=>p()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(g),u=g.outputs):u=p()}),c&&this.addTapeNode(r,e,u,n,l,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-h,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-d,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map(t=>null!=e[t]?e[t].shape:null),outputShapes:u.map(t=>t.shape),kernelTimeMs:g.timeMs,extraInfo:g.extraInfo}),Array.isArray(m)?u:u[0]}saveTensorsForBackwardMode(t){return t.map(t=>this.keep(this.clone(t)))}getTensorsForGradient(t,e,n){const r=Object(i.a)(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(o.assert(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(t=>e[t])):a=t.map(t=>e[t]);const i=n.filter((t,e)=>s[e]);return a.concat(i)}return null}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=t;"string"===n&&o.isString(t[0])&&(s=t.map(t=>o.encodeString(t)));const a=r.write(s,e,n),i=new c.a(e,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const t=this.state.tensorInfo.get(a),e=Object(o.bytesFromStringArray)(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return i}makeTensorFromDataId(t,e,n,r){n=n||"float32";const s=new c.a(e,n,t,this.nextTensorId());return this.incRef(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const s=new c.c(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*o.bytesPerElement(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof c.c||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(t=>t.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,a){const u={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},l=Object(i.a)(t);null!=l&&(r=l.gradFunc),null!=r&&(u.gradient=t=>(t=t.map((t,e)=>{if(null==t){const t=n[e],r=o.makeZerosTypedArray(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t}),r(t.length>1?t:t[0],s,a))),this.state.activeTape.push(u)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=Object(h.getTensorsInContainer)(t),n=new Set(e.map(t=>t.id));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(t=>{t.kept||t.scopeId!==r.id||this.track(t)})}gradients(t,e,n,r=!1){if(o.assert(e.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));o.assert(s instanceof c.a,()=>"The result y returned by f() must be a tensor.");const a=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],i=a.inputs;for(const t in i){const n=i[t];let o=!1;for(let t=0;t<e.length;t++)if(r[n.id]){a.outputs.forEach(t=>r[t.id]=!0),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in r)a[r[t].id]=!0,i[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&i[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,s);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const t={};t[s.id]=null==n?function(t){const e=Object(o.makeOnesTypedArray)(Object(o.sizeFromShape)(t),"float32");return f.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n,r){for(let s=e.length-1;s>=0;s--){const a=e[s],i=[];if(a.outputs.forEach(e=>{const n=t[e.id];null!=n?i.push(n):i.push(null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const u=a.gradient(i);for(const e in a.inputs){if(!(e in u))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(u)}.`);const s=n(()=>u[e]());if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[e];if(!o.arraysEqual(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${e}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==t[i.id])t[i.id]=s;else{const e=t[i.id];t[i.id]=r(e,s),e.dispose()}}}}(t,a,t=>this.tidy(t),m);const r=e.map(e=>t[e.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(t=>{for(const e of t.saved)e.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(t){return o.assert(o.isFunction(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{let n;o.assert(e.every(t=>t instanceof c.a),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return e.forEach((t,e)=>{r[e]=t}),this.runKernelFunc((r,s)=>(n=t(...e,s),o.assert(n.value instanceof c.a,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),o.assert(o.isFunction(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(t,r)=>{const s=n.gradFunc(t,r),a=Array.isArray(s)?s:[s];o.assert(a.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),o.assert(a.every(t=>t instanceof c.a),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((t,e)=>{i[e]=()=>t}),i})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=Object(o.now)(),n=await this.backend.time(t);return n.wallMs=Object(o.now)()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new d;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}p.nextTensorId=0,p.nextVariableId=0;const f=function(){const t=Object(s.b)();if(null==t._tfengine){const e=new r.b(t);t._tfengine=new p(e)}return Object(r.d)(t._tfengine.ENV),Object(c.f)(()=>t._tfengine),t._tfengine}();function m(t,e){const n={a:t,b:e};return f.runKernelFunc((n,r)=>{const s=n.add(t,e);return r([t,e]),s},n,null,a.d)}},function(t,e,n){"use strict";var r=n(1);function s(t,e,n,s){const i=Object(r.computeStrides)(e),l=function(t,e,n,s){const i=Object(r.sizeFromShape)(e),o=s[s.length-1],l=new Array(o).fill(0),c=e.length,h="complex64"===n?u(t):t;if(c>1)for(let t=0;t<i/o;t++){const e=t*o;for(let t=0;t<o;t++)l[t]=Math.max(l[t],a(h[e+t],0,n).length)}return l}(t,e,n,i),c=e.length,h=o(t,e,n,i,l),d=["Tensor"];return s&&(d.push("  dtype: "+n),d.push("  rank: "+c),d.push(`  shape: [${e}]`),d.push("  values:")),d.push(h.map(t=>"    "+t).join("\n")),d.join("\n")}function a(t,e,n){let s;return s=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":Object(r.isString)(t)?`'${t}'`:"bool"===n?i(t):parseFloat(t.toFixed(7)).toString(),Object(r.rightPad)(s,e)}function i(t){return 0===t?"false":"true"}function o(t,e,n,r,s,l=!0){const c="complex64"===n?2:1,h=e[0],d=e.length;if(0===d){if("complex64"===n){return[a(u(t)[0],0,n)]}return"bool"===n?[i(t[0])]:[t[0].toString()]}if(1===d){if(h>20){const e=3*c;let r=Array.from(t.slice(0,e)),i=Array.from(t.slice((h-3)*c,h*c));return"complex64"===n&&(r=u(r),i=u(i)),["["+r.map((t,e)=>a(t,s[e],n)).join(", ")+", ..., "+i.map((t,e)=>a(t,s[h-3+e],n)).join(", ")+"]"]}return["["+("complex64"===n?u(t):Array.from(t)).map((t,e)=>a(t,s[e],n)).join(", ")+"]"]}const p=e.slice(1),f=r.slice(1),m=r[0]*c,g=[];if(h>20){for(let e=0;e<3;e++){const r=e*m,a=r+m;g.push(...o(t.slice(r,a),p,n,f,s,!1))}g.push("...");for(let e=h-3;e<h;e++){const r=e*m,a=r+m;g.push(...o(t.slice(r,a),p,n,f,s,e===h-1))}}else for(let e=0;e<h;e++){const r=e*m,a=r+m;g.push(...o(t.slice(r,a),p,n,f,s,e===h-1))}const b=2===d?",":"";g[0]="["+g[0]+b;for(let t=1;t<g.length-1;t++)g[t]=" "+g[t]+b;let y=",\n";for(let t=2;t<d;t++)y+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(l?"":y),g}function u(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}n.d(e,"b",(function(){return l})),n.d(e,"f",(function(){return p})),n.d(e,"e",(function(){return f})),n.d(e,"d",(function(){return m})),n.d(e,"a",(function(){return g})),n.d(e,"c",(function(){return b}));class l{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=r.sizeFromShape(t),null!=n){const t=n.length;r.assert(t===this.size,()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||r.getArrayFromDType(e,this.size),this.strides=Object(r.computeStrides)(t)}set(t,...e){0===e.length&&(e=[0]),r.assert(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=`+this.shape;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return c().makeTensor(this.values,this.shape,this.dtype)}}let c=null,h=null,d=null;function p(t){c=t}function f(t){h=t}function m(t){d=t}class g{constructor(t,e,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=r.sizeFromShape(t),this.strides=Object(r.computeStrides)(t),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return h.buffer(this.shape,this.dtype,t)}bufferSync(){return h.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return Object(r.toNestedArray)(this.shape,t)}arraySync(){return Object(r.toNestedArray)(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=c().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map(t=>r.decodeString(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=c().readSync(this.dataId);if("string"===this.dtype)try{return t.map(t=>r.decodeString(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await c().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(c().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return h.print(this,t)}clone(){return this.throwIfDisposed(),h.clone(this)}toString(t=!1){return s(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),h.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),c().makeVariable(this,t,e,n)}}Object.defineProperty(g,Symbol.hasInstance,{value:t=>!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype});class b extends g{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!r.arraysEqual(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);c().disposeTensor(this),this.dataId=t.dataId,c().incRef(this,null)}dispose(){c().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(b,Symbol.hasInstance,{value:t=>t instanceof g&&null!=t.assign&&t.assign instanceof Function})},function(t,e,n){"use strict";n.r(e),n.d(e,"makeTypesMatch",(function(){return i})),n.d(e,"assertTypesMatch",(function(){return o})),n.d(e,"isTensorInList",(function(){return u})),n.d(e,"getTensorsInContainer",(function(){return l}));var r=n(7),s=n(21),a=n(1);function i(t,e){if(t.dtype===e.dtype)return[t,e];const n=Object(s.c)(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function o(t,e){Object(a.assert)(t.dtype===e.dtype,()=>`The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`)}function u(t,e){return e.some(e=>e.id===t.id)}function l(t){const e=[];return c(t,e,new Set),e}function c(t,e,n){if(null==t)return;if(t instanceof r.a)return void e.push(t);if(s=t,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=t;for(const t in a){const r=a[t];n.has(r)||(n.add(r),c(r,e,n))}}},function(t,e,n){"use strict";n.d(e,"b",(function(){return s})),n.d(e,"c",(function(){return a})),n.d(e,"a",(function(){return i})),n.d(e,"d",(function(){return o}));const r="tfjsflags";class s{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(e instanceof Promise)throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("="))),e}(this.global.location.search);if(r in t){t.tfjsflags.split(",").forEach(t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)})}}}function a(){return i}let i=null;function o(t){i=t}},function(t,e,n){"use strict";(function(t){n.d(e,"f",(function(){return o})),n.d(e,"e",(function(){return u})),n.d(e,"a",(function(){return d})),n.d(e,"b",(function(){return p})),n.d(e,"d",(function(){return f})),n.d(e,"c",(function(){return m})),n.d(e,"g",(function(){return g}));var r=n(13),s=n(14),a=n(1),i=n(26);async function o(t,e){const n=[],r=[],s=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(t)?t[a].tensor:t[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise(async t=>{const e=await o.bytes(),n=e.reduce((t,e)=>t+e.length,0)+4*e.length,r=new Uint8Array(n);let s=0;for(let t=0;t<e.length;t++){const n=e[t],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}t(r)});r.push(t)}else r.push(o.data());null!=e&&(u.group=e),n.push(u)}return{data:l(await Promise.all(r)),specs:n}}function u(t,e){const n={};let o,u=0;for(const l of e){const e=l.name,c=l.dtype,h=l.shape,d=Object(a.sizeFromShape)(h);let p;if("quantization"in l){const n=l.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${l.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${l.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==c)throw new Error(`Weight ${l.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${c}.`)}const r=i.a[n.dtype],s=t.slice(u,u+d*r),a="uint8"===n.dtype?new Uint8Array(s):new Uint16Array(s);if("float32"===c)if("uint8"===n.dtype||"uint16"===n.dtype){p=new Float32Array(a.length);for(let t=0;t<a.length;t++){const e=a[t];p[t]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===o&&(o=b()),p=o(a)}else{if("int32"!==c)throw new Error(`Unsupported dtype in weight '${e}': ${c}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);p=new Int32Array(a.length);for(let t=0;t<a.length;t++){const e=a[t];p[t]=Math.round(e*n.scale+n.min)}}u+=d*r}else if("string"===c){const e=Object(a.sizeFromShape)(l.shape);p=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(u,u+4))[0];u+=4;const n=new Uint8Array(t.slice(u,u+e));p.push(n),u+=e}}else{const a=i.a[c],o=t.slice(u,u+d*a);if("float32"===c)p=new Float32Array(o);else if("int32"===c)p=new Int32Array(o);else if("bool"===c)p=new Uint8Array(o);else{if("complex64"!==c)throw new Error(`Unsupported dtype in weight '${e}': ${c}`);{p=new Float32Array(o);const t=new Float32Array(p.length/2),a=new Float32Array(p.length/2);for(let e=0;e<t.length;e++)t[e]=p[2*e],a[e]=p[2*e+1];const i=Object(s.a)(t,h,"float32"),u=Object(s.a)(a,h,"float32");n[e]=Object(r.a)(i,u)}}u+=d*a}"complex64"!==c&&(n[e]=Object(s.a)(p,h,c))}return n}function l(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));let e=0;const n=[];t.forEach(t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)});const r=new Uint8Array(e);let s=0;return n.forEach(t=>{r.set(new Uint8Array(t.buffer),s),s+=t.byteLength}),r.buffer}const c=void 0!==t&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function h(e){return c?t.byteLength(e):new Blob([e]).size}function d(e){if(c)return t.from(e).toString("base64");const n=new Uint8Array(e);let r="";for(let t=0,e=n.length;t<e;t++)r+=String.fromCharCode(n[t]);return btoa(r)}function p(e){if(c){const n=t.from(e,"base64");return n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength)}const n=atob(e),r=new Uint8Array(n.length);for(let t=0;t<n.length;++t)r.set([n.charCodeAt(t)],t);return r.buffer}function f(t){if(1===t.length)return t[0];let e=0;t.forEach(t=>{e+=t.byteLength});const n=new Uint8Array(e);let r=0;return t.forEach(t=>{n.set(new Uint8Array(t),r),r+=t.byteLength}),n.buffer}function m(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);const e=t.split("/");return e[e.length-1]}function g(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:h(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:h(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function b(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const i=r[s],o=t[n[i>>10]+(1023&i)]+e[i>>10];a[s]=o}return new Float32Array(s)}}}).call(this,n(30).Buffer)},function(t,e,n){"use strict";var r,s=n(0),a=n(19),i=n(18);function o(t){return t instanceof s.Tensor?{value:t.clone(),recurse:!1}:Object(i.e)(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class u{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class l extends u{constructor(){super(l.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let t=0;t<n;t++)e[t]=this.get(this.wrap(this.begin+t));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function c(t){return new m(t)}function h(t){return new g(t)}function d(t,e){return new I(t,e)}function p(t,e=r.FAIL){return new A(t,e)}l.INITIAL_CAPACITY=32,n.d(e,"f",(function(){return c})),n.d(e,"e",(function(){return h})),n.d(e,"d",(function(){return d})),n.d(e,"g",(function(){return p})),n.d(e,"a",(function(){return f})),n.d(e,"b",(function(){return C})),n.d(e,"c",(function(){return r}));class f{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new k(this,t)}filter(t){return new v(this,t)}map(t){return new O(this,t)}mapAsync(t){return new S(this,t)}serialMapAsync(t){return new S(this,t).serial()}flatmap(t){return new N(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(t=>!0===t)}rowMajorBatch(t,e=!0){return new w(this,t,e)}columnMajorBatch(t,e=!0,n=i.f){return this.rowMajorBatch(t,e).map(t=>Object(i.d)(t,n))}concatenate(t,e){return new I(c([this,t]),e)}take(t){return t<0||null==t?this:new x(this,t)}skip(t){return t<0||null==t?this:new y(this,t)}prefetch(t){return new E(this,t)}shuffle(t,e){return new T(this,t,e)}serial(){return new b(this)}}class m extends f{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:(e=t,Object(i.b)(e,o)),done:!1};var e}}class g extends f{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message="Error thrown while iterating through a dataset: "+t.message,t}}}class b extends f{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Serial"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class y extends f{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Skip"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;s.dispose(t.value)}return this.upstream.next()}}class x extends f{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return this.upstream.summary()+" -> Take"}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class w extends f{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> RowMajorBatch"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class v extends f{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Filter"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;s.dispose(t.value)}}}class O extends f{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Map"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=s.tensor_util.getTensorsInContainer(t.value),n=this.transform(t.value),r=s.tensor_util.getTensorsInContainer(n);for(const t of e)s.tensor_util.isTensorInList(t,r)||t.dispose();return{value:n,done:!1}}}class k extends f{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> handleErrors"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class S extends f{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> AsyncMap"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=s.tensor_util.getTensorsInContainer(t.value),n=await this.transform(t.value),r=s.tensor_util.getTensorsInContainer(n);for(const t of e)s.tensor_util.isTensorInList(t,r)||t.dispose();return{value:n,done:!1}}}class C extends f{constructor(){super(),this.outputQueue=new l,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class N extends C{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Flatmap"}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=s.tensor_util.getTensorsInContainer(t.value),n=this.transform(t.value),r=s.tensor_util.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const t of e)s.tensor_util.isTensorInList(t,r)||t.dispose();return!0}}class I extends f{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}!function(t){t[t.FAIL=0]="FAIL",t[t.SHORTEST=1]="SHORTEST",t[t.LONGEST=2]="LONGEST"}(r||(r={}));class A extends f{constructor(t,e=r.FAIL){super(),this.iterators=t,this.mismatchMode=e,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(t){await t;let e=0,n=0;const s=await Object(i.c)(this.iterators,(function(t){if(t instanceof f){return{value:t.next().then(t=>(e++,t.done&&n++,t.value)),recurse:!1}}return{value:null,recurse:!0}}));if(e===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case r.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case r.SHORTEST:return{value:null,done:!0};case r.LONGEST:}return this.count++,{value:s,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class E extends f{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new u(e)}summary(){return this.upstream.summary()+" -> Prefetch"}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class T extends E{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=a.alea(n||s.util.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var r=n(6),s=n(1);function a(t,e,n,a){if(null==a&&(a=Object(s.inferDtype)(t)),"complex64"===a)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Object(s.isTypedArray)(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Object(s.assertNonNegativeIntegerDimensions)(e);const t=Object(s.sizeFromShape)(e),r=Object(s.sizeFromShape)(n);Object(s.assert)(t===r,()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`);for(let t=0;t<n.length;++t){const r=n[t],a=t!==n.length-1||r!==Object(s.sizeFromShape)(e.slice(t));Object(s.assert)(n[t]===e[t]||!a,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `)}}return Object(s.isTypedArray)(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==a?Object(s.toTypedArray)(t,a):Object(s.flatten)(t,[],!0),r.a.makeTensor(t,e,a)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(6),s=n(4),a=n(2),i=n(1),o=n(5);const u=Object(o.a)({complex_:function(t,e){const n=Object(a.a)(t,"real","complex"),o=Object(a.a)(e,"imag","complex");i.assertShapesMatch(n.shape,o.shape,`real and imag shapes, ${n.shape} and ${o.shape}, must match in call to tf.complex().`);const u={real:n,imag:o};return r.a.runKernelFunc(t=>t.complex(n,o),u,null,s.y)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var r=n(2),s=n(12);function a(t,e,n){const a=Object(r.c)(t,n);return Object(s.a)(t,e,a,n)}},function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return k})),n.d(e,"i",(function(){return C})),n.d(e,"c",(function(){return N})),n.d(e,"f",(function(){return I})),n.d(e,"e",(function(){return T})),n.d(e,"d",(function(){return R})),n.d(e,"k",(function(){return j})),n.d(e,"g",(function(){return D})),n.d(e,"h",(function(){return _})),n.d(e,"j",(function(){return F})),n.d(e,"b",(function(){return M}));var r=n(0),s=n(20),a=n(22),i=n(3),o=n(32),u=n(33),l=n(34),c=n(35),h=n(36),d=n(37),p=n(38),f=n(39),m=n(40),g=n(41),b=n(42),y=n(43),x=n(44),w=n(45),v=n(46),O=n(47);class k{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[o,u,l,c,h,d,p,g,m,f,b,y,x,w,v,O].map(t=>t.json));this.opMappers=t.reduce((t,e)=>(t[e.tfOpName]=e,t),{})}transformGraph(t,e={}){const n=t.node,r=[],s=[],a=n.reduce((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")&&r.push(t[e.name]),"Const"===e.op&&s.push(t[e.name]),t),{});let o=[];const u=[];let l={},c={};null!=e&&(l=this.mapSignatureEntries(e.inputs),c=this.mapSignatureEntries(e.outputs));const h=Object.keys(a);h.forEach(t=>{const e=a[t];e.inputNames.forEach(t=>{const[n]=Object(i.b)(t);e.inputs.push(a[n]),a[n].children.push(e)})}),0===Object.keys(c).length?h.forEach(t=>{const e=a[t];0===e.children.length&&u.push(e)}):Object.keys(c).forEach(t=>{const[e]=Object(i.b)(t),n=a[e];null!=n&&(n.signatureKey=c[t],u.push(n))}),Object.keys(l).length>0?Object.keys(l).forEach(t=>{const[e]=Object(i.b)(t),n=a[e];n&&(n.signatureKey=l[t],o.push(n))}):o=r;let d={};return null!=t.library&&null!=t.library.function&&(d=t.library.function.reduce((t,e)=>(t[e.signature.name]=this.mapFunction(e),t),{})),{nodes:a,inputs:o,outputs:u,weights:s,placeholders:r,signature:e,functions:d}}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,n)=>(e[t[n].name]=n,e),{})}mapNode(t){const e=Object(a.a)(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(t=>t.startsWith("^")?t.substr(1):t),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce((e,n)=>{const r=n.type;let s=void 0;switch(n.type){case"string":s=C(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=C(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=_(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=_(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=I(t.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=I(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=D(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=D(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=N(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=N(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=M(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=M(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=j(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=j(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=F(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=F(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=T(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=T(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=R(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=R(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=E(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=E(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:s,type:r},e},{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t),{}));const s=[],a=[];t.signature.inputArg.forEach(t=>{const[e]=Object(i.b)(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:A(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,s.push(n),r[e]=n});Object.keys(r).forEach(t=>{const e=r[t];e.inputNames.forEach(t=>{const[n]=Object(i.b)(t);e.inputs.push(r[n]),r[n].children.push(e)})});const o=t.ret;t.signature.outputArg.forEach(t=>{const[e,n]=Object(i.b)(o[t.name]),s=r[e];null!=s&&(s.defaultOutput=n,a.push(s))});const u=this.mapArgsToSignature(t);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:u}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t),{}),outputs:t.signature.outputArg.reduce((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function S(e,n){const s=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const n=Object(r.env)().global;if(void 0!==n.atob)return n.atob(e);if(void 0!==t)return new t(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return n?s:s.toLowerCase()}function C(t,e,n,r=!1){const s=t[e];return null!=s?S(s.s,r):n}function N(t,e,n){const r=t[e];return r?r.b:n}function I(t,e,n){const r=t[e]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function A(t){switch("string"==typeof t&&(t=s.a[t]),t){case s.a.DT_FLOAT:return"float32";case s.a.DT_INT32:case s.a.DT_INT64:case s.a.DT_INT8:case s.a.DT_UINT8:return"int32";case s.a.DT_BOOL:return"bool";case s.a.DT_DOUBLE:return"float32";case s.a.DT_STRING:return"string";default:return null}}function E(t,e,n){const r=t[e];return r&&r.func?r.func.name:n}function T(t,e,n){const r=t[e];return r&&r.type?A(r.type):n}function R(t,e,n){const r=t[e];return r&&r.list&&r.list.type?r.list.type.map(t=>A(t)):n}function $(t){if(!t.unknownRank)return null!=t.dim?t.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function j(t,e,n){const r=t[e];return r&&r.shape?$(r.shape):n}function D(t,e,n){const r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(t=>"number"==typeof t?t:parseInt(t,10)):n}function _(t,e,n,r=!1){const s=t[e];return s&&s.list&&s.list.s?s.list.s.map(t=>S(t,r)):n}function F(t,e,n){const r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map(t=>$(t)):n}function M(t,e,n){const r=t[e];return r&&r.list&&r.list.b?r.list.b:n}}).call(this,n(30).Buffer)},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e,n){"use strict";n.d(e,"b",(function(){return o})),n.d(e,"a",(function(){return u})),n.d(e,"c",(function(){return l})),n.d(e,"e",(function(){return c})),n.d(e,"d",(function(){return h})),n.d(e,"g",(function(){return d})),n.d(e,"f",(function(){return p}));var r=n(9),s=n(25);const a=Object(s.a)("kernelRegistry",()=>new Map),i=Object(s.a)("gradRegistry",()=>new Map);function o(t,e){const n=f(t,e);return a.get(n)}function u(t){return i.get(t)}function l(t){const e=a.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===t&&n.push(i)}return n}function c(t){const{kernelName:e,backendName:n}=t,r=f(e,n);a.has(r)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),a.set(r,t)}function h(t){const{kernelName:e}=t;i.has(e)&&Object(r.c)().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${e}'`),i.set(e,t)}function d(t,e){const n=f(t,e);if(!a.has(n))throw new Error(`The kernel '${t}' for backend '${e}' is not registered`);a.delete(n)}function p(t){if(!i.has(t))throw new Error(`The gradient '${t}' for backend is not registered`);i.delete(t)}function f(t,e){return`${e}_${t}`}},function(t,e,n){"use strict";n.d(e,"b",(function(){return s})),n.d(e,"d",(function(){return i})),n.d(e,"f",(function(){return u})),n.d(e,"c",(function(){return l})),n.d(e,"e",(function(){return c})),n.d(e,"a",(function(){return h}));var r=n(0);function s(t,e){return a(t,e)}function a(t,e,n=new Map,r=new Set){if(null==t)return null;if(r.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(c(t)){const s=Array.isArray(t)?[]:{};r.add(t);for(const i in t){const o=a(t[i],e,n,r);s[i]=o}return r.delete(t),s}throw new Error("Can't recurse into non-iterable type: "+t)}return n.set(t,s.value),s.value}function i(t,e=u){return o(t,e)}function o(t,e,n=new Set){const r=t[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(c(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=o(t.map(t=>t[a]),e,n);s[a]=r}return n.delete(r),s}throw new Error("Can't recurse into non-iterable type: "+r)}return s.value}function u(t){return null===t?null:c(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}async function l(t,e){const n=new Map;a(t,e,n);for(const t of Array.from(n.keys())){const e=n.get(t);if(e instanceof Promise){const r=await e;n.set(t,r)}}return a(t,e,n)}function c(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof r.Tensor))}function h(t){return null==t||(null===(e=t)||"object"!=typeof e&&"function"!=typeof e)||Array.isArray(t)||"object"==typeof t&&t instanceof r.Tensor||r.util.isTypedArray(t);var e}},function(t,e,n){var r=n(54),s=n(55),a=n(56),i=n(57),o=n(58),u=n(59),l=n(60);l.alea=r,l.xor128=s,l.xorwow=a,l.xorshift7=i,l.xor4096=o,l.tychei=u,t.exports=l},function(t,e,n){"use strict";var r,s;n.d(e,"a",(function(){return r})),function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(r||(r={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(s||(s={}))},function(t,e,n){"use strict";var r,s,a,i,o;n.d(e,"a",(function(){return r})),n.d(e,"c",(function(){return l})),n.d(e,"b",(function(){return c})),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(r||(r={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(s||(s={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(a||(a={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(i||(i={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(o||(o={}));const u={float32:i,int32:s,bool:a,complex64:o};function l(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return u[t][e]}function c(t){return l(t,"int32")}},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));const r={};function s(t){return r[t]}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){(function(e){t.exports=e}).call(this,{})},function(t,e,n){"use strict";(function(t,r){let s;function a(){if(null==s){let e;if("undefined"!=typeof window)e=window;else if(void 0!==t)e=t;else if(void 0!==r)e=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}s=e}return s}function i(t,e){const n=function(){const t=a();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}n.d(e,"b",(function(){return a})),n.d(e,"a",(function(){return i}))}).call(this,n(27),n(28))},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));const r={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){var n,r,s=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function o(t){if(n===setTimeout)return setTimeout(t,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(t){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(t){r=i}}();var u,l=[],c=!1,h=-1;function d(){c&&u&&(c=!1,u.length?l=u.concat(l):h=-1,l.length&&p())}function p(){if(!c){var t=o(d);c=!0;for(var e=l.length;e;){for(u=l,l=[];++h<e;)u&&u[h].run();h=-1,e=l.length}u=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function f(t,e){this.fun=t,this.array=e}function m(){}s.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new f(t,e)),1!==l.length||c||o(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=m,s.addListener=m,s.once=m,s.off=m,s.removeListener=m,s.removeAllListeners=m,s.emit=m,s.prependListener=m,s.prependOnceListener=m,s.listeners=function(t){return[]},s.binding=function(t){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(t){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(t,e,n){"use strict";function r(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function s(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}n.r(e),n.d(e,"isMobile",(function(){return r})),n.d(e,"isBrowser",(function(){return s}))},function(t,e,n){"use strict";(function(t){var r=n(62),s=n(63),a=n(64);function i(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(t,e){if(i()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return l(this,t,e,n)}function l(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=d(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|f(e,n),s=(t=o(t,r)).write(e,n);s!==r&&(t=t.slice(0,s));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|p(e.length);return 0===(t=o(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?o(t,0):d(t,e);if("Buffer"===e.type&&a(e.data))return d(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(c(e),t=o(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function d(t,e){var n=e.length<0?0:0|p(e.length);t=o(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|t}function f(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return P(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return W(t).length;default:if(r)return P(t).length;e=(""+e).toLowerCase(),r=!0}}function m(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return T(this,e,n);case"utf8":case"utf-8":return N(this,e,n);case"ascii":return A(this,e,n);case"latin1":case"binary":return E(this,e,n);case"base64":return C(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function b(t,e,n,r,s){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=s?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(s)return-1;n=t.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,s);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,s);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,s){var a,i=1,o=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;i=2,o/=2,u/=2,n/=2}function l(t,e){return 1===i?t[e]:t.readUInt16BE(e*i)}if(s){var c=-1;for(a=n;a<o;a++)if(l(t,a)===l(e,-1===c?0:a-c)){if(-1===c&&(c=a),a-c+1===u)return c*i}else-1!==c&&(a-=a-c),c=-1}else for(n+u>o&&(n=o-u),a=n;a>=0;a--){for(var h=!0,d=0;d<u;d++)if(l(t,a+d)!==l(e,d)){h=!1;break}if(h)return a}return-1}function x(t,e,n,r){n=Number(n)||0;var s=t.length-n;r?(r=Number(r))>s&&(r=s):r=s;var a=e.length;if(a%2!=0)throw new TypeError("Invalid hex string");r>a/2&&(r=a/2);for(var i=0;i<r;++i){var o=parseInt(e.substr(2*i,2),16);if(isNaN(o))return i;t[n+i]=o}return i}function w(t,e,n,r){return V(P(e,t.length-n),t,n,r)}function v(t,e,n,r){return V(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function O(t,e,n,r){return v(t,e,n,r)}function k(t,e,n,r){return V(W(e),t,n,r)}function S(t,e,n,r){return V(function(t,e){for(var n,r,s,a=[],i=0;i<t.length&&!((e-=2)<0);++i)r=(n=t.charCodeAt(i))>>8,s=n%256,a.push(s),a.push(r);return a}(e,t.length-n),t,n,r)}function C(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function N(t,e,n){n=Math.min(t.length,n);for(var r=[],s=e;s<n;){var a,i,o,u,l=t[s],c=null,h=l>239?4:l>223?3:l>191?2:1;if(s+h<=n)switch(h){case 1:l<128&&(c=l);break;case 2:128==(192&(a=t[s+1]))&&(u=(31&l)<<6|63&a)>127&&(c=u);break;case 3:a=t[s+1],i=t[s+2],128==(192&a)&&128==(192&i)&&(u=(15&l)<<12|(63&a)<<6|63&i)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:a=t[s+1],i=t[s+2],o=t[s+3],128==(192&a)&&128==(192&i)&&128==(192&o)&&(u=(15&l)<<18|(63&a)<<12|(63&i)<<6|63&o)>65535&&u<1114112&&(c=u)}null===c?(c=65533,h=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),s+=h}return function(t){var e=t.length;if(e<=I)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=I));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=i(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return l(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?o(t,e):void 0!==n?"string"==typeof r?o(t,e).fill(n,r):o(t,e).fill(n):o(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return h(null,t)},u.allocUnsafeSlow=function(t){return h(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,s=0,a=Math.min(n,r);s<a;++s)if(t[s]!==e[s]){n=t[s],r=e[s];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!a(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),s=0;for(n=0;n<t.length;++n){var i=t[n];if(!u.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(r,s),s+=i.length}return r},u.byteLength=f,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?N(this,0,t):m.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,s){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),e<0||n>t.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&e>=n)return 0;if(r>=s)return-1;if(e>=n)return 1;if(this===t)return 0;for(var a=(s>>>=0)-(r>>>=0),i=(n>>>=0)-(e>>>=0),o=Math.min(a,i),l=this.slice(r,s),c=t.slice(e,n),h=0;h<o;++h)if(l[h]!==c[h]){a=l[h],i=c[h];break}return a<i?-1:i<a?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return b(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return b(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var s=this.length-e;if((void 0===n||n>s)&&(n=s),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var a=!1;;)switch(r){case"hex":return x(this,t,e,n);case"utf8":case"utf-8":return w(this,t,e,n);case"ascii":return v(this,t,e,n);case"latin1":case"binary":return O(this,t,e,n);case"base64":return k(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var I=4096;function A(t,e,n){var r="";n=Math.min(t.length,n);for(var s=e;s<n;++s)r+=String.fromCharCode(127&t[s]);return r}function E(t,e,n){var r="";n=Math.min(t.length,n);for(var s=e;s<n;++s)r+=String.fromCharCode(t[s]);return r}function T(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var s="",a=e;a<n;++a)s+=B(t[a]);return s}function R(t,e,n){for(var r=t.slice(e,n),s="",a=0;a<r.length;a+=2)s+=String.fromCharCode(r[a]+256*r[a+1]);return s}function $(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function j(t,e,n,r,s,a){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>s||e<a)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function D(t,e,n,r){e<0&&(e=65535+e+1);for(var s=0,a=Math.min(t.length-n,2);s<a;++s)t[n+s]=(e&255<<8*(r?s:1-s))>>>8*(r?s:1-s)}function _(t,e,n,r){e<0&&(e=4294967295+e+1);for(var s=0,a=Math.min(t.length-n,4);s<a;++s)t[n+s]=e>>>8*(r?s:3-s)&255}function F(t,e,n,r,s,a){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function M(t,e,n,r,a){return a||F(t,0,n,4),s.write(t,e,n,r,23,4),n+4}function z(t,e,n,r,a){return a||F(t,0,n,8),s.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var s=e-t;n=new u(s,void 0);for(var a=0;a<s;++a)n[a]=this[a+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||$(t,e,this.length);for(var r=this[t],s=1,a=0;++a<e&&(s*=256);)r+=this[t+a]*s;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||$(t,e,this.length);for(var r=this[t+--e],s=1;e>0&&(s*=256);)r+=this[t+--e]*s;return r},u.prototype.readUInt8=function(t,e){return e||$(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||$(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||$(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||$(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||$(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||$(t,e,this.length);for(var r=this[t],s=1,a=0;++a<e&&(s*=256);)r+=this[t+a]*s;return r>=(s*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||$(t,e,this.length);for(var r=e,s=1,a=this[t+--r];r>0&&(s*=256);)a+=this[t+--r]*s;return a>=(s*=128)&&(a-=Math.pow(2,8*e)),a},u.prototype.readInt8=function(t,e){return e||$(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||$(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||$(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||$(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||$(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||$(t,4,this.length),s.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||$(t,4,this.length),s.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||$(t,8,this.length),s.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||$(t,8,this.length),s.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||j(this,t,e,n,Math.pow(2,8*n)-1,0);var s=1,a=0;for(this[e]=255&t;++a<n&&(s*=256);)this[e+a]=t/s&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||j(this,t,e,n,Math.pow(2,8*n)-1,0);var s=n-1,a=1;for(this[e+s]=255&t;--s>=0&&(a*=256);)this[e+s]=t/a&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||j(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||j(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):D(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||j(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):D(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||j(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):_(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||j(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):_(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var s=Math.pow(2,8*n-1);j(this,t,e,n,s-1,-s)}var a=0,i=1,o=0;for(this[e]=255&t;++a<n&&(i*=256);)t<0&&0===o&&0!==this[e+a-1]&&(o=1),this[e+a]=(t/i>>0)-o&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var s=Math.pow(2,8*n-1);j(this,t,e,n,s-1,-s)}var a=n-1,i=1,o=0;for(this[e+a]=255&t;--a>=0&&(i*=256);)t<0&&0===o&&0!==this[e+a+1]&&(o=1),this[e+a]=(t/i>>0)-o&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||j(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||j(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):D(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||j(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):D(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||j(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):_(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||j(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):_(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return M(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return M(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return z(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return z(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var s,a=r-n;if(this===t&&n<e&&e<r)for(s=a-1;s>=0;--s)t[s+e]=this[s+n];else if(a<1e3||!u.TYPED_ARRAY_SUPPORT)for(s=0;s<a;++s)t[s+e]=this[s+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+a),e);return a},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var s=t.charCodeAt(0);s<256&&(t=s)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var a;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(a=e;a<n;++a)this[a]=t;else{var i=u.isBuffer(t)?t:P(new u(t,r).toString()),o=i.length;for(a=0;a<n-e;++a)this[a+e]=i[a%o]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function B(t){return t<16?"0"+t.toString(16):t.toString(16)}function P(t,e){var n;e=e||1/0;for(var r=t.length,s=null,a=[],i=0;i<r;++i){if((n=t.charCodeAt(i))>55295&&n<57344){if(!s){if(n>56319){(e-=3)>-1&&a.push(239,191,189);continue}if(i+1===r){(e-=3)>-1&&a.push(239,191,189);continue}s=n;continue}if(n<56320){(e-=3)>-1&&a.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(e-=3)>-1&&a.push(239,191,189);if(s=null,n<128){if((e-=1)<0)break;a.push(n)}else if(n<2048){if((e-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function W(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(L,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function V(t,e,n,r){for(var s=0;s<r&&!(s+n>=e.length||s>=t.length);++s)e[s+n]=t[s];return s}}).call(this,n(27))},function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return s}));const r="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:void 0!==t?t:t=>t();function s(){return new Promise(t=>r(()=>t()))}}).call(this,n(65).setImmediate)},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]},function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return i}));var r=n(0),s=n(11),a=n(49);class i extends s.a{decodeUTF8(){return new o(this)}}class o extends a.a{constructor(t){super(),this.upstream=t,this.impl=new u(t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class u extends s.b{constructor(t){if(super(),this.upstream=t,Object(r.env)().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:t}=n(67);this.decoder=new t("utf8")}}summary(){return this.upstream.summary()+" -> Utf8"}async pump(){const e=await this.upstream.next();let n,s;return!e.done&&(n=e.value,s=Object(r.env)().get("IS_BROWSER")?this.decoder.decode(n,{stream:!0}):this.decoder.write(t.from(n.buffer)),this.outputQueue.push(s),!0)}}}).call(this,n(30).Buffer)},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n(11);class s extends r.a{split(t){return new a(this,t)}}class a extends s{constructor(t,e){super(),this.upstream=t,this.impl=new i(t,e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class i extends r.b{constructor(t,e){super(),this.upstream=t,this.separator=e,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const t=await this.upstream.next();if(t.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const e=t.value.split(this.separator);e[0]=this.carryover+e[0];for(const t of e.slice(0,-1))this.outputQueue.push(t);return this.carryover=e[e.length-1],!0}}},function(t,e,n){"use strict";(function(t){var e=n(29),r=n(9);const s=Object(r.c)();s.registerFlag("DEBUG",()=>!1,t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),s.registerFlag("IS_BROWSER",()=>e.isBrowser()),s.registerFlag("IS_NODE",()=>void 0!==t&&void 0!==t.versions&&void 0!==t.versions.node),s.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),s.registerFlag("PROD",()=>!1),s.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>s.getBool("DEBUG")),s.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),s.registerFlag("IS_TEST",()=>!1)}).call(this,n(28))},function(t,e,n){"use strict";(function(t){var e=n(9);const r=()=>n(52);let s;class a{constructor(){this.util=n(53),this.textEncoder=new this.util.TextEncoder}fetch(t,n){return null!=Object(e.c)().global.fetch?Object(e.c)().global.fetch(t,n):(null==s&&(s=r()),s(t,n))}now(){const e=t.hrtime();return 1e3*e[0]+e[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}Object(e.c)().get("IS_NODE")&&Object(e.c)().setPlatform("node",new a)}).call(this,n(28))},function(t,e){},function(t,e){},function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function u(t,e){var n=new i(t),r=e&&e.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n(16)&&n(24)?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.alea=u}(0,t,n(16))}).call(this,n(23)(t))},function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function u(t,e){var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n(16)&&n(24)?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xor128=u}(0,t,n(16))}).call(this,n(23)(t))},function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function u(t,e){var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n(16)&&n(24)?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xorwow=u}(0,t,n(16))}).call(this,n(23)(t))},function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function u(t,e){null==t&&(t=+new Date);var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n(16)&&n(24)?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xorshift7=u}(0,t,n(16))}).call(this,n(23)(t))},function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,a=e.i;return e.w=r=r+1640531527|0,n=s[a+34&127],t=s[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,s,a,i,o=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),s=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(e&&e.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;t.w=i,t.X=o,t.i=s}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function u(t,e){null==t&&(t=+new Date);var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n(16)&&n(24)?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xor4096=u}(0,t,n(16))}).call(this,n(23)(t))},function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function u(t,e){var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n(16)&&n(24)?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.tychei=u}(0,t,n(16))}).call(this,n(23)(t))},function(t,e,n){var r;!function(s,a){var i,o=this,u=256,l=a.pow(u,6),c=a.pow(2,52),h=2*c,d=255;function p(t,e,n){var r=[],d=b(g((e=1==e?{entropy:!0}:e||{}).entropy?[t,y(s)]:null==t?function(){try{var t;return i&&(t=i.randomBytes)?t=t(u):(t=new Uint8Array(u),(o.crypto||o.msCrypto).getRandomValues(t)),y(t)}catch(t){var e=o.navigator,n=e&&e.plugins;return[+new Date,o,n,o.screen,y(s)]}}():t,3),r),p=new f(r),x=function(){for(var t=p.g(6),e=l,n=0;t<c;)t=(t+n)*u,e*=u,n=p.g(1);for(;t>=h;)t/=2,e/=2,n>>>=1;return(t+n)/e};return x.int32=function(){return 0|p.g(4)},x.quick=function(){return p.g(4)/4294967296},x.double=x,b(y(p.S),s),(e.pass||n||function(t,e,n,r){return r&&(r.S&&m(r,p),t.state=function(){return m(p,{})}),n?(a.random=t,e):t})(x,d,"global"in e?e.global:this==a,e.state)}function f(t){var e,n=t.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(t=[n++]);s<u;)i[s]=s++;for(s=0;s<u;s++)i[s]=i[a=d&a+t[s%n]+(e=i[s])],i[a]=e;(r.g=function(t){for(var e,n=0,s=r.i,a=r.j,i=r.S;t--;)e=i[s=d&s+1],n=n*u+i[d&(i[s]=i[a=d&a+e])+(i[a]=e)];return r.i=s,r.j=a,n})(u)}function m(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function g(t,e){var n,r=[],s=typeof t;if(e&&"object"==s)for(n in t)try{r.push(g(t[n],e-1))}catch(t){}return r.length?r:"string"==s?t:t+"\0"}function b(t,e){for(var n,r=t+"",s=0;s<r.length;)e[d&s]=d&(n^=19*e[d&s])+r.charCodeAt(s++);return y(e)}function y(t){return String.fromCharCode.apply(0,t)}if(a.seedrandom=p,b(a.random(),s),t.exports){t.exports=p;try{i=n(61)}catch(t){}}else void 0===(r=function(){return p}.call(e,n,e,t))||(t.exports=r)}([],Math)},function(t,e){},function(t,e,n){"use strict";e.byteLength=function(t){var e=l(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=l(t),i=r[0],o=r[1],u=new a(function(t,e,n){return 3*(e+n)/4-n}(0,i,o)),c=0,h=o>0?i-4:i;for(n=0;n<h;n+=4)e=s[t.charCodeAt(n)]<<18|s[t.charCodeAt(n+1)]<<12|s[t.charCodeAt(n+2)]<<6|s[t.charCodeAt(n+3)],u[c++]=e>>16&255,u[c++]=e>>8&255,u[c++]=255&e;2===o&&(e=s[t.charCodeAt(n)]<<2|s[t.charCodeAt(n+1)]>>4,u[c++]=255&e);1===o&&(e=s[t.charCodeAt(n)]<<10|s[t.charCodeAt(n+1)]<<4|s[t.charCodeAt(n+2)]>>2,u[c++]=e>>8&255,u[c++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,s=n%3,a=[],i=16383,o=0,u=n-s;o<u;o+=i)a.push(c(t,o,o+i>u?u:o+i));1===s?(e=t[n-1],a.push(r[e>>2]+r[e<<4&63]+"==")):2===s&&(e=(t[n-2]<<8)+t[n-1],a.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return a.join("")};for(var r=[],s=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,u=i.length;o<u;++o)r[o]=i[o],s[i.charCodeAt(o)]=o;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t,e,n){for(var s,a,i=[],o=e;o<n;o+=3)s=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),i.push(r[(a=s)>>18&63]+r[a>>12&63]+r[a>>6&63]+r[63&a]);return i.join("")}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,s){var a,i,o=8*s-r-1,u=(1<<o)-1,l=u>>1,c=-7,h=n?s-1:0,d=n?-1:1,p=t[e+h];for(h+=d,a=p&(1<<-c)-1,p>>=-c,c+=o;c>0;a=256*a+t[e+h],h+=d,c-=8);for(i=a&(1<<-c)-1,a>>=-c,c+=r;c>0;i=256*i+t[e+h],h+=d,c-=8);if(0===a)a=1-l;else{if(a===u)return i?NaN:1/0*(p?-1:1);i+=Math.pow(2,r),a-=l}return(p?-1:1)*i*Math.pow(2,a-r)},e.write=function(t,e,n,r,s,a){var i,o,u,l=8*a-s-1,c=(1<<l)-1,h=c>>1,d=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:a-1,f=r?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(o=isNaN(e)?1:0,i=c):(i=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-i))<1&&(i--,u*=2),(e+=i+h>=1?d/u:d*Math.pow(2,1-h))*u>=2&&(i++,u/=2),i+h>=c?(o=0,i=c):i+h>=1?(o=(e*u-1)*Math.pow(2,s),i+=h):(o=e*Math.pow(2,h-1)*Math.pow(2,s),i=0));s>=8;t[n+p]=255&o,p+=f,o/=256,s-=8);for(i=i<<s|o,l+=s;l>0;t[n+p]=255&i,p+=f,i/=256,l-=8);t[n+p-f]|=128*m}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,s=Function.prototype.apply;function a(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new a(s.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new a(s.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(66),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(27))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,s,a,i,o,u=1,l={},c=!1,h=t.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(t);d=d&&d.setTimeout?d:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){f(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((a=new MessageChannel).port1.onmessage=function(t){f(t.data)},r=function(t){a.port2.postMessage(t)}):h&&"onreadystatechange"in h.createElement("script")?(s=h.documentElement,r=function(t){var e=h.createElement("script");e.onreadystatechange=function(){f(t),e.onreadystatechange=null,s.removeChild(e),e=null},s.appendChild(e)}):r=function(t){setTimeout(f,0,t)}:(i="setImmediate$"+Math.random()+"$",o=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(i)&&f(+e.data.slice(i.length))},t.addEventListener?t.addEventListener("message",o,!1):t.attachEvent("onmessage",o),r=function(e){t.postMessage(i+e,"*")}),d.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var s={callback:t,args:e};return l[u]=s,r(u),u++},d.clearImmediate=p}function p(t){delete l[t]}function f(t){if(c)setTimeout(f,0,t);else{var e=l[t];if(e){c=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(void 0,n)}}(e)}finally{p(t),c=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(27),n(28))},function(t,e){},function(t,e){},function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"maxImpl",(function(){return za})),n.d(r,"transposeImpl",(function(){return La}));const s=Symbol("Comlink.proxy"),a=Symbol("Comlink.endpoint"),i=Symbol("Comlink.releaseProxy"),o=Symbol("Comlink.thrown"),u=t=>"object"==typeof t&&null!==t||"function"==typeof t,l=new Map([["proxy",{canHandle:t=>u(t)&&t[s],serialize(t){const{port1:e,port2:n}=new MessageChannel;return c(t,e),[n,[n]]},deserialize(t){return t.start(),p(t,[],e);var e}}],["throw",{canHandle:t=>u(t)&&o in t,serialize({value:t}){let e;return e=t instanceof Error?{isError:!0,value:{message:t.message,name:t.name,stack:t.stack}}:{isError:!1,value:t},[e,[]]},deserialize(t){if(t.isError)throw Object.assign(new Error(t.value.message),t.value);throw t.value}}]]);function c(t,e=self){e.addEventListener("message",(function n(r){if(!r||!r.data)return;const{id:a,type:i,path:u}=Object.assign({path:[]},r.data),l=(r.data.argumentList||[]).map(b);let d;try{const e=u.slice(0,-1).reduce((t,e)=>t[e],t),n=u.reduce((t,e)=>t[e],t);switch(i){case 0:d=n;break;case 1:e[u.slice(-1)[0]]=b(r.data.value),d=!0;break;case 2:d=n.apply(e,l);break;case 3:d=function(t){return Object.assign(t,{[s]:!0})}(new n(...l));break;case 4:{const{port1:e,port2:n}=new MessageChannel;c(t,n),d=function(t,e){return m.set(t,e),t}(e,[e])}break;case 5:d=void 0}}catch(t){d={value:t,[o]:0}}Promise.resolve(d).catch(t=>({value:t,[o]:0})).then(t=>{const[r,s]=g(t);e.postMessage(Object.assign(Object.assign({},r),{id:a}),s),5===i&&(e.removeEventListener("message",n),h(e))})})),e.start&&e.start()}function h(t){(function(t){return"MessagePort"===t.constructor.name})(t)&&t.close()}function d(t){if(t)throw new Error("Proxy has been released and is not useable")}function p(t,e=[],n=function(){}){let r=!1;const s=new Proxy(n,{get(n,a){if(d(r),a===i)return()=>y(t,{type:5,path:e.map(t=>t.toString())}).then(()=>{h(t),r=!0});if("then"===a){if(0===e.length)return{then:()=>s};const n=y(t,{type:0,path:e.map(t=>t.toString())}).then(b);return n.then.bind(n)}return p(t,[...e,a])},set(n,s,a){d(r);const[i,o]=g(a);return y(t,{type:1,path:[...e,s].map(t=>t.toString()),value:i},o).then(b)},apply(n,s,i){d(r);const o=e[e.length-1];if(o===a)return y(t,{type:4}).then(b);if("bind"===o)return p(t,e.slice(0,-1));const[u,l]=f(i);return y(t,{type:2,path:e.map(t=>t.toString()),argumentList:u},l).then(b)},construct(n,s){d(r);const[a,i]=f(s);return y(t,{type:3,path:e.map(t=>t.toString()),argumentList:a},i).then(b)}});return s}function f(t){const e=t.map(g);return[e.map(t=>t[0]),(n=e.map(t=>t[1]),Array.prototype.concat.apply([],n))];var n}const m=new WeakMap;function g(t){for(const[e,n]of l)if(n.canHandle(t)){const[r,s]=n.serialize(t);return[{type:3,name:e,value:r},s]}return[{type:0,value:t},m.get(t)||[]]}function b(t){switch(t.type){case 3:return l.get(t.name).deserialize(t.value);case 0:return t.value}}function y(t,e,n){return new Promise(r=>{const s=new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-");t.addEventListener("message",(function e(n){n.data&&n.data.id&&n.data.id===s&&(t.removeEventListener("message",e),r(n.data))})),t.start&&t.start(),t.postMessage(Object.assign({id:s},e),n)})}var x=n(0);let w;function v(){return null==w&&(w=Object(x.backend)().epsilon()),w}class O extends Error{constructor(t){super(t),Object.setPrototypeOf(this,O.prototype)}}class k extends Error{constructor(t){super(t),Object.setPrototypeOf(this,k.prototype)}}class S extends Error{constructor(t){super(t),Object.setPrototypeOf(this,S.prototype)}}class C extends Error{constructor(t){super(t),Object.setPrototypeOf(this,C.prototype)}}class N extends Error{constructor(t){super(t),Object.setPrototypeOf(this,N.prototype)}}Error;function I(t,e){if(Array.isArray(t)){let n=[];for(let r=0;r<e;r++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function A(t,e){if(!t)throw new N(e)}function E(t,e){let n=0;for(const r of t)r===e&&n++;return n}function T(t){return 1===t.length?t[0]:t}function R(t){return Array.isArray(t)?t:[t]}function $(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function j(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let D={};function _(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function F(t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))t.forEach(t=>F(t));else{const e=Object.keys(t);for(const n of e){const e=t[n];null!=e&&"object"==typeof e&&(Array.isArray(e)||"ndarray"!==e.type||"number"!=typeof e.value?F(e):t[n]=e.value)}}}function M(t,e={},n={},r="object",s=!1){if("string"==typeof t){const s=t;let a;if(s in n)a=n[s];else if(s in D)a=D[s];else if(a=e[s],null==a)throw new S(`Unknown ${r}: ${t}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=t;if(null==a.className||null==a.config)throw new S(r+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,u;if(i in n?[o,u]=n[i]:i in D?[o,u]=D.className:i in e&&([o,u]=e[i]),null==o)throw new S(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const t={};for(const e of Object.keys(D))t[e]=D[e];for(const e of Object.keys(n))t[e]=n[e];a.config.customObjects=t;const e=Object.assign({},D);for(const t of Object.keys(n))D[t]=n[t];F(a.config);const r=u(o,a.config,n,s);return D=Object.assign({},e),r}{const t=Object.assign({},D);for(const t of Object.keys(n))D[t]=n[t];const e=new o(a.config);return D=Object.assign({},t),e}}}function z(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function L(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function B(t){if(null==t)throw new S("Invalid value in obj: "+JSON.stringify(t));for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function P(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new S(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function W(t,e,n=0,r=1/0){return A(n>=0),A(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every(t=>typeof t===e)}function V(t,e){Array.isArray(t)?(x.util.assert(t.length>0,()=>e+" is unexpectedly an empty array."),t.forEach((t,n)=>V(t,`element ${n+1} of ${e}`))):x.util.assert(Number.isInteger(t)&&t>0,()=>`Expected ${e} to be a positive integer, but got `+U(t)+".")}function U(t){return null===t?"null":Array.isArray(t)?"["+t.map(t=>U(t)).join(",")+"]":"string"==typeof t?`"${t}"`:""+t}function G(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function H(t,e){return Object(x.tidy)(()=>x.sqrt(x.sum(x.mul(t,t),e,!0)))}class q extends x.serialization.Serializable{getConfig(){return{}}}class K extends q{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Object(x.tidy)(()=>{const e=H(t,this.axis),n=x.clipByValue(e,0,this.maxValue);return x.mul(t,x.div(n,x.add(v(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}K.className="MaxNorm",x.serialization.registerClass(K);class X extends q{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Object(x.tidy)(()=>x.div(t,x.add(v(),H(t,this.axis))))}getConfig(){return{axis:this.axis}}}X.className="UnitNorm",x.serialization.registerClass(X);class Y extends q{apply(t){return x.relu(t)}}Y.className="NonNeg",x.serialization.registerClass(Y);class J extends q{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Object(x.tidy)(()=>{const e=H(t,this.axis),n=x.add(x.mul(this.rate,x.clipByValue(e,this.minValue,this.maxValue)),x.mul(1-this.rate,e));return x.mul(t,x.div(n,x.add(v(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}J.className="MinMaxNorm",x.serialization.registerClass(J);const Z={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Q(t){return _(t)}function tt(t,e={}){return M(t,x.serialization.SerializationMap.getMap().classNameMap,e,"constraint")}function et(t){if(null==t)return null;if("string"==typeof t){return tt({className:t in Z?Z[t]:t,config:{}})}return t instanceof q?t:tt(t)}const nt=["channelsFirst","channelsLast"],rt=["valid","same","causal"],st=["max","avg"],at=["sum","mul","concat","ave"],it=new Map;function ot(t){P(nt,"DataFormat",t)}function ut(t){P(rt,"PaddingMode",t)}function lt(t){P(st,"PoolMode",t)}const ct=[];function ht(t,e){ct.push(t);try{const t=e();return ct.pop(),t}catch(t){throw ct.pop(),t}}function dt(t){if(!mt(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===ct.length?"":ct.join("/")+"/")+t}function pt(t){if(!mt(t))throw new Error("Not a valid tensor name: '"+t+"'");it.has(t)||it.set(t,0);const e=it.get(t);if(it.set(t,it.get(t)+1),e>0){const n=`${t}_${e}`;return it.set(n,1),n}return t}const ft=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function mt(t){return!!t.match(ft)}function gt(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let r=1;for(let s=e;s<n;++s)r*=t[s];return r}function bt(t){return t=Array.isArray(t)?new Float32Array(t):t,Object(x.tensor1d)(t)}function yt(t){return x.min(bt(t)).dataSync()[0]}function xt(t){return x.max(bt(t)).dataSync()[0]}function wt(t,e){if(e<t)throw new S(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let r=t;r<e;++r)n.push(r);return n}function vt(t,e){return t.asType(e)}function Ot(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function kt(t,e,n){return Object(x.tidy)(()=>{switch(t.rank){case 1:return x.slice1d(t,e,n);case 2:return x.slice2d(t,[e,0],[n,t.shape[1]]);case 3:return x.slice3d(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return x.slice4d(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return x.slice(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return x.slice(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new S("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}})}function St(t,e,n){return Object(x.tidy)(()=>{switch(t.rank){case 1:return x.slice1d(t,e,n);case 2:return x.slice2d(t,[0,e],[t.shape[0],n]);case 3:return x.slice3d(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return x.slice4d(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new S("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function Ct(t,e,n,r){return Object(x.tidy)(()=>{switch(t.rank){case 1:return x.slice1d(t,e,n);case 2:switch(r){case 1:return kt(t,e,n);case 2:return St(t,e,n);default:throw new S("The axis is not within the rank of the tensor "+r)}case 3:switch(r){case 1:return kt(t,e,n);case 2:return x.slice3d(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return St(t,e,n);default:throw new S("The axis is not within the rank of the tensor "+r)}case 4:switch(r){case 1:return kt(t,e,n);case 2:return x.slice4d(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return x.slice4d(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return St(t,e,n);default:throw new S("The axis is not within the rank of the tensor "+r)}default:throw new S("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function Nt(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),x.concat(t,e)}function It(t,e){switch(t.rank){case 1:return x.concat1d([t,e]);case 2:return x.concat2d([t,e],0);case 3:return x.concat3d([t,e],0);case 4:return x.concat4d([t,e],0);default:throw new S("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function At(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new S(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return x.tile(t,e)}function Et(t,e=0,n=1,r,s){return x.randomNormal(t,e,n,r,s)}function Tt(t,e,n,r){if(t.rank<2||e.rank<2)throw new C(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3){if(t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new C(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = `+e.shape)}if(2===t.rank&&2===e.rank){const s=!1,a=!1;return x.fused.matMul({a:t,b:e,transposeA:s,transposeB:a,bias:r?jt(t.rank,r,"channelsLast"):null,activation:n})}{const s=t.shape.slice(),a=s.pop();t=t.reshape([-1,a]);const i=e.shape.slice(),o=i.pop(),u=i.pop(),l=[...i,o],c=Array.from({length:e.rank},(t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n);e=e.transpose(c).reshape([u,-1]);const h=[...s,...l],d=!1,p=!1;return x.fused.matMul({a:t,b:e,transposeA:d,transposeB:p,bias:r?jt(t.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function Rt(t,e,n){return Object(x.tidy)(()=>(e=Array.isArray(e)?Object(x.tensor1d)(e,"int32"):e.toInt(),x.gather(t,e,n)))}function $t(t){return x.mul(t,t)}function jt(t,e,n){const r=e.shape;if(1!==e.rank&&e.rank!==t)throw new S("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t);if(5===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1,1]):e.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,1,r[0]]):e.reshape([1].concat(r))}else if(4===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1]):e.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,r[0]]):e.reshape([1].concat(r))}else if(3===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1]):e.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,r[0]]):e.reshape([1].concat(r))}else if(t<3)return e;throw new S("Unsupported input rank by biasAdd: "+e.rank)}function Dt(t,e,n){return Object(x.tidy)(()=>(null==n&&(n="channelsLast"),ot(n),t.add(jt(t.rank,e,n))))}function _t(t,e,n,r){return Object(x.tidy)(()=>x.dropout(t,e,n,r))}function Ft(t,e,n=!1){return n?t():e()}const Mt=["fanIn","fanOut","fanAvg"],zt=["normal","uniform","truncatedNormal"];class Lt extends x.serialization.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Bt extends Lt{apply(t,e){return Object(x.zeros)(t,e)}}Bt.className="Zeros",x.serialization.registerClass(Bt);class Pt extends Lt{apply(t,e){return Object(x.ones)(t,e)}}Pt.className="Ones",x.serialization.registerClass(Pt);class Wt extends Lt{constructor(t){if(super(),"object"!=typeof t)throw new S("Expected argument of type ConstantConfig but got "+t);if(void 0===t.value)throw new S("config must have value set but got "+t);this.value=t.value}apply(t,e){return Object(x.tidy)(()=>Object(x.mul)(Object(x.scalar)(this.value),Object(x.ones)(t,e)))}getConfig(){return{value:this.value}}}Wt.className="Constant",x.serialization.registerClass(Wt);class Vt extends Lt{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return Object(x.randomUniform)(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Vt.className="RandomUniform",x.serialization.registerClass(Vt);class Ut extends Lt{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new C(`randomNormal does not support dType ${e}.`);return Et(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Ut.className="RandomNormal",x.serialization.registerClass(Ut);class Gt extends Lt{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new C(`truncatedNormal does not support dType ${e}.`);return Object(x.truncatedNormal)(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Gt.className="TruncatedNormal",x.serialization.registerClass(Gt);class Ht extends Lt{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return Object(x.tidy)(()=>{if(2!==t.length||t[0]!==t[1])throw new S("Identity matrix initializer can only be used for 2D square matrices.");return Object(x.mul)(this.gain,Object(x.eye)(t[0]))})}getConfig(){return{gain:this.gain}}}Ht.className="Identity",x.serialization.registerClass(Ht);class qt extends Lt{constructor(t){if(super(),t.scale<0)throw new S("scale must be a positive float. Got: "+t.scale);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,P(Mt,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){P(zt,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,r;if(ot(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=gt(t,2);n=t[1]*e,r=t[0]*e}else if("channelsLast"===e){const e=gt(t,0,t.length-2);n=t[t.length-2]*e,r=t[t.length-1]*e}}else{const e=gt(t);n=Math.sqrt(e),r=Math.sqrt(e)}return[n,r]}(t),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new C(`${this.getClassName()} does not support dType ${e}.`);return Object(x.truncatedNormal)(t,0,n,e,this.seed)}{const n=Math.sqrt(3*a);return Object(x.randomUniform)(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}qt.className="VarianceScaling",x.serialization.registerClass(qt);class Kt extends qt{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return qt.className}}Kt.className="GlorotUniform",x.serialization.registerClass(Kt);class Xt extends qt{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return qt.className}}Xt.className="GlorotNormal",x.serialization.registerClass(Xt);class Yt extends qt{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return qt.className}}Yt.className="HeNormal",x.serialization.registerClass(Yt);class Jt extends qt{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return qt.className}}Jt.className="HeUniform",x.serialization.registerClass(Jt);class Zt extends qt{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return qt.className}}Zt.className="LeCunNormal",x.serialization.registerClass(Zt);class Qt extends qt{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return qt.className}}Qt.className="LeCunNormal",x.serialization.registerClass(Qt);class te extends Lt{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new C("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return Object(x.tidy)(()=>{if(2!==t.length)throw new C("The Orthogonal Initializer does not support non-2D shapes yet.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=Et(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=x.linalg.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),Object(x.mul)(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}te.className="Orthogonal",x.serialization.registerClass(te);const ee={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function ne(t,e={}){return M(t,x.serialization.SerializationMap.getMap().classNameMap,e,"initializer")}function re(t){return _(t)}function se(t){if("string"==typeof t){const e=t in ee?ee[t]:t;if("GlorotNormal"===e)return new Xt;if("GlorotUniform"===e)return new Kt;if("HeNormal"===e)return new Yt;if("HeUniform"===e)return new Jt;if("LeCunNormal"===e)return new Zt;if("LeCunUniform"===e)return new Qt;{const t={};return t.className=e,t.config={},ne(t)}}return t instanceof Lt?t:ne(t)}let ae=0;function ie(){return ae++}const oe={};function ue(t=""){return t in oe||(oe[t]=0),oe[t]+=1,t+oe[t].toString()}function le(t){return Array.isArray(t)&&Array.isArray(t[0])}function ce(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function he(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new S("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function de(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new S("Expected exactly 1 Shape; got "+t.length)}return t}function pe(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce((t,e)=>t*e);return e}const fe="Variable";class me{constructor(t,e="float32",n="Variable",r=!0,s=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=ie(),n=null==n?fe:n,this.originalName=dt(n),this.name=pt(this.originalName),this.trainable_=r,this.constraint=s,this.val=x.variable(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function ge(t){return t.map(t=>t.read())}function be(t){t.forEach(t=>{t[0].write(t[1])})}class ye{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class xe{constructor(t,e,n,r,s,a,i){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=ie(),null!=a&&(this.originalName=dt(a),this.name=pt(this.originalName)),this.rank=e.length}}let we=0;class ve{constructor(t,e){this.callArgs=e,this.id=we++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Oe=0;class ke extends x.serialization.Serializable{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Oe++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=$(t)+"_"+ue(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new k(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new S(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return T(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return T(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new O("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new O("Layer "+this.name+" is not connected, no input to return.");return T(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new O("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new O("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return T(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=R(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=R(this.inputSpec);if(t.length!==e.length)throw new S(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: `+t);for(let n=0;n<t.length;n++){const r=t[n],s=e[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new S(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new S(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new S(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new S(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const e in s.axes){const r=Number(e),a=s.axes[e],i=r>=0?t[r]:t[t.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new S(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const e=s.shape[t],a=r.shape[t];if(null!=e&&null!=a&&e!==a)throw new S(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=R(t);let r=!0;for(const t of n)if(!(t instanceof xe)){r=!1;break}let s=!0;for(const t of n)if(t instanceof xe){s=!1;break}if(r===s)throw new S("Arguments to apply() must be all SymbolicTensors or all Tensors");return ht(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of R(t))e.push(n.shape);this.build(T(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let r=this.call(t,e);const s=R(r),a=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),a.push(t);if(r=T(a),null!=this.activityRegularizer)throw new C("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(t){t=R(t);const e=[];for(const n of t)e.push(n.shape);return T(e)}(t),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map((n,r)=>new xe(a,n,this,R(t),e,this.name,r)):new xe(a,r,this,R(t),e,this.name),this.addInboundNode(t,s,null,null,n,r,e),this._refCount++,null!=this.activityRegularizer)throw new C("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let e=!1;this.batchInputShape.forEach((n,r)=>{null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new O(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new O(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new k(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return pe(this.weights)}build(t){this.built=!0}getWeights(t=!1){return ge(t?this.trainableWeights:this.weights)}setWeights(t){Object(x.tidy)(()=>{const e=this.weights;if(e.length!==t.length)throw new S(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],r=ge(e);for(let s=0;s<r.length;++s){const a=r[s],i=e[s],o=t[s];if(!x.util.arraysEqual(a.shape,o.shape))throw new S(`Layer weight shape ${a.shape} not compatible with provided weight shape `+o.shape);n.push([i,o])}be(n)})}addWeight(t,e,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new S(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=se("zeros"));const o=r.apply(e,n),u=new me(o,n,t,a,i);return o.dispose(),null!=s&&this.addLoss(()=>s.apply(u.read())),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=R(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,n,r,s,a,i=null){const o=R(t);e=R(e),n=R(n),r=R(r),s=ce(s),a=ce(a);const u=[],l=[],c=[];for(const t of o)u.push(t.sourceLayer),l.push(t.nodeIndex),c.push(t.tensorIndex);new ve({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function Se(t,e,n){if((null==e||null!=n&&n>0)&&(e=t.sourceLayer,n=t.nodeIndex),0===e.inboundNodes.length)return[t];{const t=e.inboundNodes[n];if(0===t.inboundLayers.length)return t.inputTensors;{const e=[];for(let n=0;n<t.inboundLayers.length;n++){const r=Se(t.inputTensors[n],t.inboundLayers[n],t.nodeIndices[n]);for(const t of r)-1===e.indexOf(t)&&e.push(t)}return e}}}class Ce extends ke{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:ue("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new S("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new S("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new S("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const r=new xe(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new ve({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new S("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function Ne(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new S("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;null==n&&(n="float32");return new Ce({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}async function Ie(t){if(null==t)return;const e=[],n=[],r=[];for(const s in t){const a=t[s];if("number"!=typeof a){const t=a;e.push(t.data()),n.push(s),r.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];Object(x.dispose)(r)}}function Ae(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var Ee;Ce.className="InputLayer",x.serialization.registerClass(Ce),function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(Ee||(Ee={}));class Te{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class Re{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class $e extends Te{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const r=e[t];if("number"==typeof r)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+r*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const s=Object(x.tidy)(()=>Object(x.add)(this.totals[t],Object(x.mul)(r,n)));this.totals[t]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:Object(x.tidy)(()=>{const n=Object(x.mul)(Object(x.div)(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),Object(x.keep)(e[t])}))}}class je extends Te{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];t.push(i.data()),e.push(r),n.push(a)}}const r=await Promise.all(t);for(let t=0;t<r.length;++t){this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=r[t][0]}}}class De extends Te{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");x.util.isNumber(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,r=x.util.now();return(...s)=>{const a=x.util.now();return a-r<e||(r=a,n=t(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const r=[];null!=this.yield&&(await Ie(n),r.push(this.yield(t,e,n))),r.push(Object(x.nextFrame)()),await Promise.all(r)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await Ie(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await Ie(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(Object(x.nextFrame)()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await Ie(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await Ie(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(Object(x.nextFrame)()):x.util.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await Ie(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await Ie(t),await this.trainEnd(t))}}function _e(t,e){if(null==t&&(t={}),t instanceof Te)return[t];if(Array.isArray(t)&&t[0]instanceof Te)return t;return R(t).map(t=>new De(t,e))}class Fe{constructor(){}static registerCallbackConstructor(t,e){x.util.assert(t>=0&&Number.isInteger(t),()=>"Verbosity level is expected to be an integer >= 0, but got "+t),Fe.checkForDuplicate(e),null==Fe.constructors[t]&&(Fe.constructors[t]=[]),Fe.constructors[t].push(e)}static checkForDuplicate(t){for(const e in Fe.constructors){Fe.constructors[+e].forEach(e=>{if(e===t)throw new S("Duplicate callback constructor.")})}}static clear(){Fe.constructors={}}static createCallbacks(t){const e=[];for(const n in Fe.constructors){const r=+n;t>=r&&e.push(...Fe.constructors[r])}return e.map(t=>new t)}}function Me(t,e,n,r,s,a,i,o,u){const l=new je,c=[new $e,...Fe.createCallbacks(e)];null!=t&&c.push(...t),c.push(l);const h=new Re(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:e,doValidation:o,metrics:u}),{callbackList:h,history:l}}function ze(t,e={},n=!1){return M(t,x.serialization.SerializationMap.getMap().classNameMap,e,"layer",n)}function Le(t,e){return Object(x.tidy)(()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=x.sum($t(t),e,!0),r=x.fill(n.shape,v()),s=x.sqrt(x.maximum(n,r));return x.div(t,s)})}function Be(t,e){return Object(x.tidy)(()=>x.mean($t(x.sub(e,t)),-1))}function Pe(t,e){return Object(x.tidy)(()=>x.mean(x.abs(x.sub(e,t)),-1))}function We(t,e){return Object(x.tidy)(()=>{const n=x.sub(t,e),r=x.clipByValue(x.abs(t),v(),Number.MAX_VALUE),s=x.abs(x.div(n,r));return x.mul(100,x.mean(s,-1))})}function Ve(t,e){return Object(x.tidy)(()=>{const n=x.clipByValue(e,v(),Number.MAX_VALUE),r=x.log(x.add(1,n)),s=x.clipByValue(t,v(),Number.MAX_VALUE),a=x.log(x.add(1,s));return x.mean($t(x.sub(r,a)),-1)})}function Ue(t,e,n=!1){return Object(x.tidy)(()=>{if(n)e=x.softmax(e);else{const t=x.sum(e,e.shape.length-1,!0);e=x.div(e,t)}return e=x.clipByValue(e,v(),1-v()),x.neg(x.sum(x.mul(t.toFloat(),x.log(e)),e.shape.length-1))})}function Ge(t,e,n=!1){return Object(x.tidy)(()=>{const r=x.floor(function(t){const e=[gt(t.shape)];return t.reshape(e)}(t)).toInt(),s=(e=x.clipByValue(e,v(),1-v())).shape;return Ue(x.oneHot(r,s[s.length-1]).reshape(s),e,n)})}function He(t,e){return Object(x.tidy)(()=>{let n;return n=x.clipByValue(e,v(),1-v()),n=x.log(x.div(n,x.sub(1,n))),x.mean(function(t,e){if(!x.util.arraysEqual(t.shape,e.shape))throw new S(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return Object(x.tidy)(()=>{const n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())})}(t,n),-1)})}function qe(t,e){return Object(x.tidy)(()=>{const n=x.clipByValue(t,v(),1),r=x.clipByValue(e,v(),1);return x.sum(x.mul(t,x.log(x.div(n,r))),-1)})}function Ke(t,e){return Object(x.tidy)(()=>{const n=Le(t,-1),r=Le(e,-1),s=x.mul(n,r);return x.neg(x.sum(s,-1))})}Fe.constructors={};const Xe={meanSquaredError:Be,meanAbsoluteError:Pe,meanAbsolutePercentageError:We,meanSquaredLogarithmicError:Ve,squaredHinge:function(t,e){return Object(x.tidy)(()=>{const n=x.maximum(0,x.sub(1,x.mul(t,e)));return x.mean($t(n),-1)})},hinge:function(t,e){return Object(x.tidy)(()=>{const n=x.maximum(0,x.sub(1,x.mul(t,e)));return x.mean(n,-1)})},categoricalHinge:function(t,e){return Object(x.tidy)(()=>{const n=x.sum(x.mul(t,e),-1),r=x.max(x.mul(x.sub(1,t),e),-1);return x.maximum(0,x.add(1,x.sub(r,n)))})},logcosh:function(t,e){return Object(x.tidy)(()=>{const n=Math.log(2),r=x.sub(e,t),s=x.sub(x.add(r,x.softplus(x.mul(-2,r))),n);return x.mean(s,-1)})},categoricalCrossentropy:Ue,sparseCategoricalCrossentropy:Ge,binaryCrossentropy:He,kullbackLeiblerDivergence:qe,poisson:function(t,e){return Object(x.tidy)(()=>{const n=x.log(x.add(v(),e));return x.mean(x.sub(e,x.mul(t,n)),-1)})},cosineProximity:Ke};function Ye(t){if("string"==typeof t){if(t in Xe)return Xe[t];let e="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new S(e)}return t}function Je(t,e){return Object(x.tidy)(()=>{const n=x.mul(.5,x.onesLike(e)),r=vt(x.greater(e,n),t.dtype);return x.mean(x.equal(t,r),-1)})}function Ze(t,e){return Object(x.tidy)(()=>vt(x.equal(x.argMax(t,-1),x.argMax(e,-1)),"float32"))}function Qe(t,e){return Object(x.tidy)(()=>x.logicalAnd(t.equal(1),e.equal(1)).sum().cast("float32"))}function tn(t,e){return Object(x.tidy)(()=>{const n=Qe(t,e),r=function(t,e){return Object(x.tidy)(()=>x.logicalAnd(t.equal(0),e.equal(1)).sum().cast("float32"))}(t,e),s=n.add(r);return x.where(x.greater(s,0),n.div(s),0).cast("float32")})}function en(t,e){return He(t,e)}function nn(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),x.equal(t,e).asType("float32")}const rn=Ue,sn=Ge,an={binaryAccuracy:Je,categoricalAccuracy:Ze,precision:tn,categoricalCrossentropy:rn,sparseCategoricalCrossentropy:sn,mse:Be,MSE:Be,mae:Pe,MAE:Pe,mape:We,MAPE:We,cosine:Ke};function on(t){if("string"==typeof t&&t in an)return an[t];if("string"!=typeof t&&null!=t)return t;throw new S("Unknown metric "+t)}function un(t){if(A(null!==t,"Unknown LossOrMetricFn "+t),"string"==typeof t)return t;{let e;for(const n of Object.keys(Xe))if(Xe[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(an))if(an[n]===t){e=n;break}return void 0!==e?e:t.name}}const ln=1048576;function cn(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!hn(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>ln&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function hn(t){if(null===t)return!0;if("object"==typeof t){if(Object.getPrototypeOf(t)===Object.prototype){const e=Object.keys(t);for(const n of e){if("string"!=typeof n)return!1;if(!hn(t[n]))return!1}return!0}if(Array.isArray(t)){for(const e of t)if(!hn(e))return!1;return!0}return!1}{const e=typeof t;return"string"===e||"number"===e||"boolean"===e}}function dn(t,e,n,r=console.log){const s=function(t){let e=!0;const n=[],r=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}r.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),a=["Layer (type)","Output shape","Param #"];let i;if(s?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(t=>Math.floor(e*t))),!s){a.push("Receives inputs"),i=[];for(const e in t.nodesByDepth)i.push(...t.nodesByDepth[e])}r("_".repeat(e)),pn(a,n,r),r("=".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)s?fn(o[t],n,r):mn(o[t],n,i,r),r((t===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const u=function(t){let e;e=null!=t.collectedTrainableWeights?pe(t.collectedTrainableWeights):pe(t.trainableWeights);return e}(t),l=pe(t.nonTrainableWeights);r("Total params: "+(u+l)),r("Trainable params: "+u),r("Non-trainable params: "+l),r("_".repeat(e))}function pn(t,e,n=console.log){let r="";for(let n=0;n<t.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=t[n],r=r.slice(0,e[n]),r+=" ".repeat(e[n]-r.length);n(r)}function fn(t,e,n){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}pn([`${t.name} (${t.getClassName()})`,r,t.countParams().toString()],e,n)}function mn(t,e,n,r){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}const a=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,r=e.nodeIndices[t],s=e.tensorIndices[t];a.push(`${n}[${r}][${s}]`)}const i=t.name,o=t.getClassName(),u=0===a.length?"":a[0];pn([`${i} (${o})`,s,t.countParams().toString(),u],e,r);for(let t=1;t<a.length;++t)pn(["","","",a[t]],e,r)}function gn(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function bn(t,e){if(null===t)return null;if("string"==typeof t)return j(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];gn(e,s,r)?n.push(r):n.push(bn(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n];if("name"===n&&"string"==typeof r)e[n]=r;else{const t=j(n);e[t]=bn(r,t)}}return e}}function yn(t,e){if(null==t)return null;if("string"==typeof t)return $(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];gn(e,s,r)?n.push(r):n.push(yn(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n],s=$(n);e[s]="name"!==n&&"className"!==n||"string"!=typeof r?yn(r,n):r}return e}}class xn{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof xn)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new S(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Object(x.cast)(e,t.dtype)}catch(n){throw new S(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof xe){if(null==this.id2Value[t.id])throw new S("Nonexistent key: "+t.name);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new S("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]}}getMask(t){if(t instanceof xe){if(null==this.id2Value[t.id])throw new S("Nonexistent key: "+t.name);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new S("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Object(x.dispose)(this.id2Mask)}}const wn={},vn={};function On(t,e,n,r){const s=null!=n&&n.training,a=Array.isArray(t),i=a?t:[t],o=i.map(t=>t.name),u=[],l=e.names();for(const t of o)-1!==l.indexOf(t)?u.push(e.getValue(t)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=o.join(",")+"|"+e.names().join(",");let h,d;if(null==wn[c]){const t=function(t,e){x.util.assert(null!=t&&t.length>0,()=>"Expected at least one fetch, got none");let n=[],r={};if(1===t.length){const s=Sn(t[0],e);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of t){const{sorted:t,recipientMap:i}=Sn(a,e);for(const e of t)s.has(e.name)||(n.push(e),s.add(e.name));for(const t in i)null==r[t]&&(r[t]=new Set),i[t].forEach(e=>r[t].add(e))}}return{sorted:n,recipientCounts:kn(r)}}(i,e);h=t.sorted,d=t.recipientCounts,wn[c]=h,vn[c]=d}h=wn[c],d={},s||Object.assign(d,vn[c]);const p=new xn(e);for(let t=0;t<h.length;++t){if(null!=r){const t=Object(x.memory)().numTensors;t>r.maxNumTensors&&(r.maxNumTensors=t),t<r.minNumTensors&&(r.minNumTensors=t)}const a=h[t],i=a.sourceLayer;if(i instanceof Ce)continue;const l=[],c=[],f=[];let m=!1;for(const t of a.inputs){const n=p.getValue(t),r=p.getMask(t);l.push(n),c.push(r),null!=r&&(m=!0),s||(d[t.name]--,0!==d[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=R(i.apply(l,n));let b=null;i.supportsMasking&&(b=i.computeMask(l,c));const y=Cn(a),w=Array.isArray(y)?y:[y];for(let t=0;t<w.length;++t){p.hasKey(w[t])||p.add(w[t],g[t],Array.isArray(b)?b[0]:b);const e=o.indexOf(w[t].name);-1!==e&&(u[e]=g[t])}s||Object(x.dispose)(f)}return p.disposeMasks(),a?u:u[0]}function kn(t){const e={};for(const n in t)e[n]=t[n].size;return e}function Sn(t,e){const n=new Set,r=[],s={};for(const t of e.names())n.add(t);const a=[],i=[];for(a.push(t);a.length>0;){const t=a[a.length-1];if(n.has(t.name)){a.pop();continue}const e=i[i.length-1]===a.length-1;if(0===t.inputs.length||e)a.pop(),r.push(t),n.add(t.name),e&&i.pop();else{i.push(a.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||a.push(e)}}return{sorted:r,recipientMap:s}}function Cn(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const r of t.sourceLayer.inboundNodes[e].outputTensors)if(r.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class Nn extends ke{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=ue(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],L(this.inputs).length!==this.inputs.length)throw new S("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map(t=>t.name));L(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map(t=>t.name)),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;A(0===n,"input layer has >1 nodes"),A(0===r,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof Ce))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map(t=>t.shape),this.internalOutputShapes=this.outputs.map(t=>t.shape);const e={},n={},r={},s={},a={},i=[],o=(t,e,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=t.sourceLayer,s=t.nodeIndex,u=t.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new k(`The tensor ${t.name} at layer "${r.name}" is part of a cycle.`);if(-1!==e.indexOf(l))return;this.containerNodes.add(Nn.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let t=0;t<c;t++){const r=l.inputTensors[t],s=l.inboundLayers[t],a=l.nodeIndices[t],i=l.tensorIndices[t];o(r,e,n,s,a,i)}for(e.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);i.push(l)},u=[],l=[];for(const t of this.outputs)o(t,u,l);const c=i.slice().reverse();for(const t of c){n[t.id]=t,t.id in e||(e[t.id]=0);let a=e[t.id];const i=null==r[t.outboundLayer.id]?0:r[t.outboundLayer.id];a=Math.max(a,i),r[t.outboundLayer.id]=a,s[t.outboundLayer.id]=t.outboundLayer,e[t.id]=a;for(let r=0;r<t.inboundLayers.length;r++){const s=t.inboundLayers[r],i=t.nodeIndices[r],o=s.inboundNodes[i],u=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(a+1,u),n[o.id]=o}}const h={};for(const t in e){const r=e[t];r in h||(h[r]=[]),h[r].push(n[t])}const d={};for(const t in r){const e=r[t];e in d||(d[e]=[]),d[e].push(s[t])}let p=Object.keys(d).map(t=>parseInt(t,10)).sort(z);this.layers=[];for(const t of p){const e=d[t];e.sort((t,e)=>{const n=a[t.id],r=a[e.id];return n<r?-1:n>r?1:0});for(const t of e)t instanceof Nn&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=d,p=Object.keys(h).map(t=>parseInt(t,10)).sort(z);const f=this.inputs.slice(),m=[];for(const t of p)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new k("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+m);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map(t=>t.name);for(const t of g){const e=g.filter(e=>e===t).length;if(1!==e)throw new k(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new ve({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(t=>null),outputMasks:this.outputs.map(t=>null),inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs.map(t=>t.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(e=>e.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new S("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let r=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new S("Duplicate weight name: "+e.originalName);n[e.originalName]=e,r++}const s=[];for(const r in t){let a=r;if(null==n[r]){const t=r.split("/");a=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[a])s.push([n[a],t[r]]);else if(e)throw new S("Provided weight data has no target variable: "+r);delete n[a]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new S(`${t.length} of ${r} weights are not set: `+t)}be(s)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.3.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=yn(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return Object(x.tidy)(()=>{t=R(t);const n=new xn;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return On(this.outputs,n,e)})}computeMask(t,e){return Object(x.tidy)(()=>{let n;return t=R(t),n=null==e?I(null,t.length):R(e),this.runInternalGraph(t,n)[1]})}computeOutputShape(t){const e=ce(t);if(e.length!==this.inputLayers.length)throw new S(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const r=this.inputLayers[t],s=e[t];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(z);if(r.length>1)for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(t=>t.id).indexOf(e.id))continue;const r=[];for(let e=0;e<t.inboundLayers.length;e++){const s=t.inboundLayers[e],a=t.nodeIndices[e],i=t.tensorIndices[e],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=ce(e.computeOutputShape(T(r))),a=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++){n[`${e.name}_${a}_${t}`]=s[t]}}}const s=[],a=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],r=this.outputLayersTensorIndices[t],s=`${e.name}_${n}_${r}`;a.push(s)}for(let t=0;t<a.length;t++){const e=a[t];A(e in n),s.push(n[e])}return T(s)}runInternalGraph(t,e){null==e&&(e=I(null,t.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=t[r],i=e[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(z);for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,a=new Array;for(const t of r)t.id in n&&a.push(n[t.id]);if(a.length===r.length){let r,i,o,u,l={};if(null!=t.callArgs&&(l=t.callArgs),1===a.length){const[t,n]=a[0];null==l.mask&&(l.mask=n),o=R(e.call(t,l)),u=R(e.computeMask(t,n)),r=[t],i=[n]}else r=a.map(t=>t[0]),i=a.map(t=>t[1]),null==l.mask&&(l.mask=i),o=R(e.call(r,l)),u=R(e.computeMask(r,i));if(e.activityRegularizer)throw new C("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<s.length;++t){const e=s[t],r=o[t],a=u[t];n[e.id]=[r,a]}}}}const s=[],a=[],i=[];for(const t of this.outputs){A(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,r]=n[t.id];i.push(e.shape),s.push(e),a.push(r)}return[s,a,i]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof Nn?1:0;for(let r=0;r<t.inboundNodes.length;r++){const s=Nn.nodeKey(t,r);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new S(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new S("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new S("No such layer: "+t)}calculateLosses(){return Object(x.tidy)(()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const r=Nn.nodeKey(e,n);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const r=t.getClassName(),s=t.getConfig(),a=[];for(let n=0;n<t.inboundNodes.length;n++){const r=t.inboundNodes[n],s=Nn.nodeKey(t,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: `+r.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(r.inboundLayers.length>0){const t=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let u=e[Nn.nodeKey(s,a)];null==u&&(u=0),t.push([s.name,u,o,i])}a.push(t)}}}const i={};i.name=t.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}t.layers=n;const r=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],s=this.inputLayersNodeIndices[t],a=Nn.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[t];r.push([n.name,i,o])}t.inputLayers=r;const s=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],r=this.outputLayersNodeIndices[t],a=Nn.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[t];s.push([n.name,i,o])}return t.outputLayers=s,t}static fromConfig(t,e,n={},r=!1){const s={},a={};function i(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function o(t,e){const n=[];let r;for(const a of e){const o=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(t,e);const c=s[o];if(c.inboundNodes.length<=u)return void i(t,e);const h=c.inboundNodes[u];n.push(h.outputTensors[l])}n.length>0&&t.apply(T(n),r)}function u(t){const n=t.name,a=ze(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a;t.inboundNodes.forEach(t=>{if(!(t instanceof Array))throw new S("Corrupted configuration, expected array for nodeData: "+t);i(a,t)})}const l=e.name,c=e.layers;for(const t of c)u(t);for(;!B(a);)for(const t of c){const e=s[t.name];if(e.name in a){const t=a[e.name];delete a[e.name];for(const n of t)o(e,n)}}const h=[],d=[],p=e.inputLayers;for(const t of p){const e=t[0],n=t[1],r=t[2];A(e in s);const a=s[e].inboundNodes[n].outputTensors;h.push(a[r])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],r=t[2];A(e in s);const a=s[e].inboundNodes[n].outputTensors;d.push(a[r])}return new t({inputs:h,outputs:d,name:l})}get stateful(){if(this._stateful)throw new S("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){Object(x.tidy)(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function In(t,e,n){const r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>null);if(1===r)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach(e=>{e in t?n.push(t[e]):n.push(null)}),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}function An(t,e){return In(t,e,"classWeight")}async function En(t,e,n,r){if(null!=e||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=Object(x.tidy)(()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),r=Array.from(await e.data());Object(x.dispose)(e);const s=[];return r.forEach(t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);s.push(n[t])}),Object(x.tensor1d)(s,"float32")}return null}function Tn(t,e){return Object(x.mul)(t,e)}function Rn(t,e){let n,r;const s=e;n=s.xs,r=s.ys,x.util.assert(null!=n&&null!=r,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+e);const a=$n("input",t.inputNames,n),i=$n("output",t.outputNames,r),o=a[0].shape[0];x.util.assert(a.length===t.inputs.length,()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(t.inputNames)+")"),x.util.assert(i.length===t.outputs.length,()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(t.outputNames)+")");for(let e=0;e<a.length;e++)x.util.assert(a[e].shape[0]===o,()=>`Batch size mismatch: input ${t.inputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);for(let e=0;e<i.length;e++)x.util.assert(i[e].shape[0]===o,()=>`Batch size mismatch: output ${t.outputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);return{xs:a,ys:i}}function $n(t,e,n){if(n instanceof x.Tensor)return[n];if(Array.isArray(n))return x.util.assert(n.length===e.length,()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`),n;{const r=[];for(const s of e){if(null==n[s])throw new S(`The feature data generated by the dataset lacks the required ${t} key '${s}'.`);r.push(n[s])}return r}}async function jn(t,e,n){const r=null!=n.batchesPerEpoch;if(x.util.assert(null!=t.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),x.util.assert(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),x.util.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),x.util.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),x.util.assert(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(Dn(n.validationData))x.util.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches);else{const t=function(t){if(3===t.length)throw new C("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);a=t.xs,i=t.ys}const o=t.makeTrainFunction(),u=t.getDedupedMetricsNames();let l;l=s?u.slice().concat(u.map(t=>"val_"+t)):u.slice();const c=_e(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:d,history:p}=Me(c,h,n.epochs,null,null,function(t,e){let n=null;null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size);return n}(e,n),null,s,l);d.setModel(t),t.history=p,await d.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;f<n.epochs;){const l={};await d.onEpochBegin(f);let c=0,h=0;for(r||(m=await e.iterator());!r||c<n.batchesPerEpoch;){const e=await m.next();if(r&&e.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:r,ys:s}=Rn(t,e.value),a={};a.batch=h,a.size=r[0].shape[0],await d.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const e=An(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)i.push(await En(s[t],null,e[t]))}const l=r.concat(s).concat(i),p=o(l);x.dispose(l);for(let t=0;t<u.length;++t){const e=u[t],n=p[t];a[e]=n,x.keep(n)}await d.onBatchEnd(h,a),Ae(a),h++,c++}if(r?c>=n.batchesPerEpoch:e.done){if(s){let e;e=Dn(n.validationData)?R(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):R(t.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)l["val_"+t.metricsNames[n]]=e[n]}break}if(t.stopTraining_)break}if(await d.onEpochEnd(f,l),f++,t.stopTraining_)break}return await d.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function Dn(t){return"function"==typeof t.iterator}function _n(t){x.util.assert(t>0&&Number.isInteger(t),()=>"batchSize is required to be a positive integer, but got "+t)}function Fn(t,e,n){return null==t?[null]:Array.isArray(t)?t.map(t=>kt(t,e,n-e)):kt(t,e,n-e)}function Mn(t,e){return x.tidy(()=>null==t?null:Array.isArray(t)?t.map(t=>Mn(t,e)):Rt(t,"int32"===e.dtype?e:e.toInt()))}function zn(t,e){const n=[];let r=0,s=null;for(;r<t;)s=r+e,s>=t&&(s=t),n.push([r,s]),r=s;return n}async function Ln(t,e,n,r={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,i,o,u,l,c;t.isTraining=!0;try{const h=null==r.batchSize?32:r.batchSize;_n(h);const d=!1,p=await t.standardizeUserData(e,n,r.sampleWeight,r.classWeight,d,h);s=p[0],a=p[1],c=p[2];let f,m=!1;if(null!=r.validationData&&r.validationData.length>0){if(m=!0,2!==r.validationData.length)throw 3===r.validationData.length?new C("validationData including sample weights is not supported yet."):new S("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+r.validationData+" is invalid.");i=r.validationData[0],o=r.validationData[1];const e=!0,n=await t.standardizeUserData(i,o,null,null,e,h);u=n[0],l=n[1],f=u.concat(l)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){m=!0;const t=Math.floor(s[0].shape[0]*(1-r.validationSplit)),e=s[0].shape[0];u=Fn(s,t,e),s=Fn(s,0,t),l=Fn(a,t,e),a=Fn(a,0,t),f=u.concat(l)}else null!=r.validationSteps&&(m=!0);const g=s.concat(a).concat(c);t.checkTrainableWeightsConsistency();const b=t.makeTrainFunction(),y=t.getDedupedMetricsNames();let w,v;m?(t.makeTestFunction(),w=t.testFunction,v=y.slice().concat(y.map(t=>"val_"+t))):(w=null,f=[],v=y.slice());const O=_e(r.callbacks,r.yieldEvery);return await async function(t,e,n,r,s,a,i,o,u,l,c,h,d,p,f){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==d&&(d=0);let m=!1;if(null!=u&&null!=l&&(m=!0),null!=f&&(m=!0,null==p))throw new S("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=t.checkNumSamples(n,s,p,"steps_per_epoch");let b;null!=g&&(b=wt(0,g)),null==i&&(i=1);const{callbackList:y,history:w}=Me(o,i,a,d,g,p,s,m,h);y.setModel(t),t.history=w,await y.onTrainBegin(),t.stopTraining_=!1;for(let i=d;i<a;++i){await y.onEpochBegin(i);const a={};if(null!=p)throw new C("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new C("batch shuffling is not implemneted yet");c&&x.util.shuffle(b);const i=Object(x.tensor1d)(b),o=zn(g,s);for(let c=0;c<o.length;++c){const h={};if(await y.onBatchBegin(c,h),x.tidy(()=>{const d=o[c][0],p=o[c][1],f=kt(i,d,p-d);h.batch=c,h.size=p-d;const g=Mn(n,f),b=e(g);for(let t=0;t<r.length;++t){const e=r[t],n=b[t];h[e]=n,x.keep(n)}if(c===o.length-1&&m){const e=t.testLoop(u,l,s);for(let t=0;t<r.length;++t){const n=r[t],s=e[t];x.keep(s),a["val_"+n]=s}}}),await y.onBatchEnd(c,h),Ae(h),t.stopTraining_)break}i.dispose()}if(await y.onEpochEnd(i,a),t.stopTraining_)break}return await y.onTrainEnd(),await t.history.syncData(),t.history}(t,b,g,y,h,r.epochs,r.verbose,O,w,f,r.shuffle,v,r.initialEpoch,null,null)}finally{t.isTraining=!1,Pn(s,e),Pn(a,n),Pn(u,i),Pn(l,o),null!=c&&x.dispose(c)}}function Bn(t){const e=[];t instanceof x.Tensor&&(t=[t]);for(let n=0;n<t.length;++n){const r=t[n];if(1===r.rank)e.push(Ot(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function Pn(t,e){if(null==t)return;const n=[];if(e instanceof x.Tensor)n.push(e.id);else if(Array.isArray(e))e.forEach(t=>n.push(t.id));else if(null!=e)for(const t in e){const r=e[t];n.push(r.id)}const r=[];if(t instanceof x.Tensor)-1===n.indexOf(t.id)&&r.push(t);else if(Array.isArray(t))t.forEach(t=>{-1===n.indexOf(t.id)&&r.push(t)});else if(null!=t)for(const e in t){const s=t[e];-1===n.indexOf(s.id)&&r.push(s)}r.forEach(t=>{t.isDisposed||t.dispose()})}function Wn(t){return Array.isArray(t)}function Vn(t){return!function(t){return t instanceof x.Tensor}(t)&&!Wn(t)}function Un(t,e,n,r=!0,s=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(Wn(t)&&t.length>0)e=!0;else if(Vn(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new S(`Error when checking model ${s} expected no data, but got `+t)}return[]}if(null==t)return e.map(t=>null);let a;if(Vn(t)){t=t,a=[];for(const n of e){if(null==t[n])throw new S(`No data provided for "${n}". Need data for each key in: `+e);a.push(t[n])}}else if(Wn(t)){if((t=t).length!==e.length)throw new S(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): `+t);a=t}else{if(t=t,e.length>1)throw new S(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+t.shape);a=[t]}if(a=Bn(a),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new S(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape `+i.shape);for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[t][a];if(null!=u&&u>=0&&o!==u)throw new S(`Error when checking ${s}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${i.shape}].`)}}return a}function Gn(t,e,n,r=!0,s=""){let a;if(Array.isArray(t)){if(t.length!==e.length)throw new S(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);a=t}else{if(e.length>1)throw new S(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(t.shape)+".");a=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new S(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape `+JSON.stringify(i.shape));for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[t][a];if(null!=u&&u!==o)throw new S(`Error when checking ${s}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Hn extends Nn{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new S("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");dn(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>x.train.adagrad(.01),Adadelta:()=>x.train.adadelta(1,.95,v()),Adam:()=>x.train.adam(.001,.9,.999,v()),Adamax:()=>x.train.adamax(.002,.9,.999,v(),0),RMSProp:()=>x.train.rmsprop(.001,.9,0,v()),SGD:()=>x.train.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new S("Unknown Optimizer "+t)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof x.Optimizer))throw new S("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new S(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map(t=>Ye(t))}else{const n=Ye(t.loss);this.outputs.forEach(t=>{e.push(n)})}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new S(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(Ye(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],ht("loss",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}});const r=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>[]);let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+t);n=t}if(Array.isArray(n))return e.map(t=>n);{const t=[];for(const r of e){let e=n.hasOwnProperty(r)?n[r]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};ht("metric",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;(e=>{let n,r,a;for(const i of e){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===He?-1!==["accuracy","acc"].indexOf(i)?r=Je:-1!==["crossentropy","ce"].indexOf(i)&&(r=en):this.lossFunctions[t]===Ge?-1!==["accuracy","acc"].indexOf(i)?r=nn:-1!==["crossentropy","ce"].indexOf(i)&&(r=sn):-1!==["accuracy","acc"].indexOf(i)?r=Ze:-1!==["crossentropy","ce"].indexOf(i)&&(r=rn),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const t=on(i);a=t,n=""+un(i)}let e;ht(n,()=>{e=a}),s(t,n,e)}})(r[t])}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const r=null==n.batchSize?32:n.batchSize;_n(r);const s=this.standardizeUserDataXY(t,e,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const i=this.testFunction;return T(this.testLoop(i,a,r,n.verbose,n.steps))}finally{Pn(s[0],t),Pn(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const r=null!=(n=n||{}).batches,s=t.testFunction;let a=[];if(n.verbose>0)throw new C("Verbose mode is not implemented yet.");x.util.assert(!r||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches));const i="function"==typeof e.next?e:await e.iterator();let o=0,u=0;for(;!r||u<n.batches;){const e=await i.next();if(a=x.tidy(()=>{if(e.value){const{xs:n,ys:r}=Rn(t,e.value),i=n.concat(r),l=x.tidy(()=>s(i));if(x.dispose(i),0===u)for(let t=0;t<l.length;++t)a.push(Object(x.scalar)(0));const c=i[0].shape[0];for(let t=0;t<l.length;++t){const e=l[t],n=a[t];a[t]=x.tidy(()=>x.add(a[t],x.mul(c,e))),u>0&&x.dispose(n)}x.dispose(l),o+=c,++u}return a}),e.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<a.length;++t){const e=a[t];a[t]=x.div(a[t],o),x.dispose(e)}return T(a)}(this,t,e)}checkNumSamples(t,e,n,r="steps"){let s;if(null!=n){if(s=null,null!=e)throw new S(`If ${r} is set, batchSize must be null or undefined.Got batchSize = `+e)}else{if(null==t)throw new S("Either the input data should have a defined shape, or "+r+" shoud be specified.");s=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return s}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new S("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),r=n?e:[e],s=this.retrieveSymbolicTensors(r),a=new xn;if(t instanceof x.Tensor&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new S(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)a.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new S("No value is provided for the model's input "+e.name);a.add(e,n)}const i=On(s,a);return n?i:i[0]}retrieveSymbolicTensors(t){const e=I(null,t.length);let n=t.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map(t=>t.name);for(let r=0;r<t.length;++r){const i=a.indexOf(t[r]);if(-1!==i&&(e[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach((e,r)=>{null==e&&n.push(t[r])}),new S("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return e}predictLoop(t,e=32,n=!1){return x.tidy(()=>{const r=this.checkNumSamples(t);if(n)throw new C("Verbose predictLoop() is not implemented yet.");const s=zn(r,e),a=this.outputs.map(t=>[]);for(let e=0;e<s.length;++e){x.tidy(()=>{const n=s[e][0],r=s[e][1],a=Fn(t,n,r),i=[];if(Array.isArray(a))for(let t=0;t<a.length;++t)i.push({key:this.inputs[t],value:a[t]});else i.push({key:this.inputs[0],value:a});const o=new xn(i);return On(this.outputs,o)}).forEach((t,e)=>a[e].push(t))}return T(a.map(t=>x.concat(t,0)))})}predict(t,e={}){const n=Bn(t);Gn(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==e.batchSize?32:e.batchSize;return _n(r),this.predictLoop(n,r)}finally{Pn(n,t)}}predictOnBatch(t){Gn(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,r){if(null==this.optimizer_)throw new k("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===Ge?s.push(e.slice(0,e.length-1).concat([1])):s.push(e)}if(function(t,e,n){const r=L(t.map(t=>t.shape[0]));r.sort();const s=L(e.map(t=>t.shape[0]));if(s.sort(),r.length>1)throw new S("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(t=>t.shape)));if(s.length>1)throw new S("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(t=>t.shape)));if(r.length>0&&s.length>0&&!x.util.arraysEqual(r,s))throw new S(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(t=Un(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=Un(e,this.feedOutputNames,s,!1,"target")),function(t,e,n){const r=[Be,He,Ue];for(let s=0;s<t.length;++s){const a=t[s],i=e[s],o=n[s];if(null!=i){if(i===Ue&&1===a.shape[a.shape.length-1])throw new S(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const t=a.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const r=t[n],s=e[n];if(null!=s&&r!==s)throw new S(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&t[0].shape[0]%r!=0)throw new S(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(t,e,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const t=An(r,this.outputNames);u=[];for(let e=0;e<t.length;++e)u.push(await En(o[e],null,t[e]))}return[i,o,u]}testLoop(t,e,n,r=0,s){return x.tidy(()=>{const a=this.checkNumSamples(e,n,s,"steps"),i=[];if(r>0)throw new C("Verbose mode is not implemented yet.");if(null!=s)throw new C("steps mode in testLoop() is not implemented yet");{const r=zn(a,n),s=Object(x.tensor1d)(wt(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],u=kt(s,a,o-a),l=Mn(e,u),c=t(l);if(0===n)for(let t=0;t<c.length;++t)i.push(Object(x.scalar)(0));for(let t=0;t<c.length;++t){const e=c[t];i[t]=x.add(i[t],x.mul(o-a,e))}}for(let t=0;t<i.length;++t)i[t]=x.div(i[t],a)}return i})}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const r=t[n];let s=r;if(E(t,r)>1){s+="_"+E(t.slice(0,n),r)}e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(t=>t.read());return[this.optimizer_.minimize(()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const i=new xn(t),o=On(this.outputs,i,{training:!0});let u;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(r[t],o[t]);null!=s[t]&&(n=Tn(n,s[t]));const a=x.mean(n);e.push(a),u=0===t?n:x.add(u,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],s=this.metricsTensors[t][1];n=x.mean(e(r[s],o[s]))}x.keep(n),a.push(n)}return u=x.mean(u),this.calculateLosses().forEach(t=>{u=x.add(u,t)}),u},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=t=>x.tidy(()=>{const e=[];let n;const r=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:r[t]});const i=new xn(a),o=On(this.outputs,i);for(let t=0;t<this.lossFunctions.length;++t){const r=this.lossFunctions[t],a=x.mean(r(s[t],o[t]));n=0===t?a:x.add(n,a),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],r=this.metricsTensors[t][1],a=x.mean(n(s[r],o[r]));e.push(a)}return e})}async fit(t,e,n={}){return Ln(this,t,e,n)}async fitDataset(t,e){return jn(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const t of a){const e=await t.data();i.push(e[0])}return x.dispose(a),T(i)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let t=0;t<r.length;++t)n&&!r[t].trainable||e.push({name:r[t].originalName,tensor:s[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=x.memory().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-x.memory().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=$(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(t=>$(t))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const r of e){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");t[r]=$(n[r])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[$(un(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>$(un(t)));{const t={};for(const e in this.metrics)t[e]=$(un(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=ze(bn(t.optimizer_config));let n,r;if("string"==typeof t.loss)n=j(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(t=>j(t));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=j(t.loss[e])}if(Array.isArray(t.metrics))r=t.metrics.map(t=>j(t));else if(null!=t.metrics){r={};for(const e in t.metrics)r[e]=j(t.metrics[e])}this.compile({loss:n,metrics:r,optimizer:e})}async save(t,e){if("string"==typeof t){const e=x.io.getSaveHandlers(t);if(0===e.length)throw new S(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new S(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new S("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await x.io.encodeWeights(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.3.0",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:s}=await x.io.encodeWeights(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=x.io.concatenateArrayBuffers([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;cn(this.userDefinedMetadata,this.name,t),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,t.save(r)}setUserDefinedMetadata(t){cn(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}Hn.className="Model",x.serialization.registerClass(Hn);class qn extends Hn{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:ue("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(t=>t<0))throw new S("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")}add(t){const e=t instanceof qn||t instanceof Hn;let n;if(e){if(n=t,1!==n.outputs.length)throw new S("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new S("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new S("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=Ne({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new S(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new S("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=Se(this.outputs[0])}this.inboundNodes=[],new ve({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:I(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(de(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Hn({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new k("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new k("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new k("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new k("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},r=!1){let s,a={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new S("Legacy serialization format not supported yet.");s=e}else x.util.assert(null!=e.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),s=e.layers,delete e.layers,a=e;const i=new t(a);if(!(i instanceof qn))throw new C("Sequential.fromConfig called on non-Sequential input: "+i);for(const t of s){const e=ze(t,void 0,r);r&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(t){if(null==this.model)throw new S("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new S("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}qn.className="Sequential",x.serialization.registerClass(qn);class Kn extends x.serialization.Serializable{getConfig(){return{}}}class Xn extends Kn{apply(t,e=1){return function(t,e=1){if(1!==e)throw new C(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return x.elu(t)}(t,e)}}Xn.className="elu",x.serialization.registerClass(Xn);class Yn extends Kn{apply(t){return x.selu(t)}}Yn.className="selu",x.serialization.registerClass(Yn);class Jn extends Kn{apply(t){return x.relu(t)}}Jn.className="relu",x.serialization.registerClass(Jn);class Zn extends Kn{apply(t){return Object(x.tidy)(()=>x.minimum(6,x.relu(t)))}}Zn.className="relu6",x.serialization.registerClass(Zn);class Qn extends Kn{apply(t){return t}}Qn.className="linear",x.serialization.registerClass(Qn);class tr extends Kn{apply(t){return x.sigmoid(t)}}tr.className="sigmoid",x.serialization.registerClass(tr);class er extends Kn{apply(t){return function(t){return Object(x.tidy)(()=>{const e=x.add(.5,x.mul(.2,t));return x.clipByValue(e,0,1)})}(t)}}er.className="hardSigmoid",x.serialization.registerClass(er);class nr extends Kn{apply(t){return x.softplus(t)}}nr.className="softplus",x.serialization.registerClass(nr);class rr extends Kn{apply(t){return function(t){return Object(x.tidy)(()=>x.div(t,x.abs(t).add(1)))}(t)}}rr.className="softsign",x.serialization.registerClass(rr);class sr extends Kn{apply(t){return x.tanh(t)}}sr.className="tanh",x.serialization.registerClass(sr);class ar extends Kn{apply(t,e=-1){return x.softmax(t,e)}}ar.className="softmax",x.serialization.registerClass(ar);class ir extends Kn{apply(t,e=-1){return x.logSoftmax(t,e)}}function or(t){return t.getClassName()}function ur(t,e={}){return M(t,x.serialization.SerializationMap.getMap().classNameMap,e,"activation")}function lr(t){if(null==t){const t={className:"linear",config:{}};return ur(t)}if("string"==typeof t){const e={};return e.className=t,e.config={},ur(e)}return t instanceof Kn?t:ur(t)}function cr(t){if(null!=t&&"object"!=typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+t)}ir.className="logSoftmax",x.serialization.registerClass(ir);class hr extends x.serialization.Serializable{}class dr extends hr{constructor(t){super(),cr(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return Object(x.tidy)(()=>{let e=Object(x.zeros)([1]);return this.hasL1&&(e=Object(x.add)(e,Object(x.sum)(x.mul(this.l1,Object(x.abs)(t))))),this.hasL2&&(e=Object(x.add)(e,Object(x.sum)(x.mul(this.l2,$t(t))))),e.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}dr.className="L1L2",x.serialization.registerClass(dr);const pr={l1l2:"L1L2"};function fr(t){return _(t)}function mr(t,e={}){return M(t,x.serialization.SerializationMap.getMap().classNameMap,e,"regularizer")}function gr(t){if(null==t)return null;if("string"==typeof t){return mr({className:t in pr?pr[t]:t,config:{}})}return t instanceof hr?t:mr(t)}class br extends ke{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=he(t);let n=Object(x.relu)(t);return null!=this.maxValue&&(n=Object(x.clipByValue)(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}br.className="ReLU",x.serialization.registerClass(br);class yr extends ke{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=he(t);return Object(x.leakyRelu)(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}yr.className="LeakyReLU",x.serialization.registerClass(yr);class xr extends ke{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=se(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=gr(t.alphaRegularizer),this.alphaConstraint=et(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new S("Expected sharedAxes to be a number or an array of numbers, but got "+t.sharedAxes);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=de(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new ye({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=he(t),Object(x.prelu)(t,this.alpha.read())}getConfig(){const t={alphaInitializer:re(this.alphaInitializer),alphaRegularizer:fr(this.alphaRegularizer),alphaConstraint:Q(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}xr.className="PReLU",x.serialization.registerClass(xr);class wr extends ke{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new C(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=he(t);return Object(x.elu)(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}wr.className="ELU",x.serialization.registerClass(wr);class vr extends ke{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=he(t);return n.mul(vt(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}vr.className="ThresholdedReLU",x.serialization.registerClass(vr);class Or extends ke{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new ar).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=he(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function kr(t,e,n){if("number"==typeof t)return I(t,e);if(t.length!==e)throw new S(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let s=0;s<e;++s){const a=t[s];if((r=a)!==parseInt(r.toString(),10))throw new S(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number `+a)}return t;var r}function Sr(t,e,n,r,s=1){if(null==t)return t;let a;return a="same"===n?t:t-(e+(e-1)*(s-1))+1,Math.floor((a+r-1)/r)}function Cr(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+xt([n-e,0]);else{if("same"!==r)throw new S(`Unsupport padding mode: ${r}.`);t*=e}return t}function Nr(t,e){return Object(x.tidy)(()=>(ot(e),"channelsFirst"===e?x.transpose(t,[0,2,3,1]):t))}function Ir(t,e){return Object(x.tidy)(()=>(ot(e),"channelsFirst"===e?x.transpose(t,[0,2,3,4,1]):t))}function Ar(t,e,n,r=1,s="valid",a,i=1){return Object(x.tidy)(()=>{if(null==a&&(a="channelsLast"),ot(a),3!==t.shape.length)throw new S("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new S("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new S("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===a&&(t=x.transpose(t,[0,2,1])),"causal"===s)throw new C("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=x.conv1d(t,e,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=Dt(o,n)),o})}function Er(t,e,n,r=[1,1],s="valid",a,i,o=null){return Object(x.tidy)(()=>{if(null==a&&(a="channelsLast"),ot(a),3!==t.rank&&4!==t.rank)throw new S(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new S(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let u=Nr(t,a);if("causal"===s)throw new C("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=x.fused.conv2d({x:u,filter:e,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(u=x.transpose(u,[0,3,1,2])),u})}function Tr(t,e,n,r=[1,1,1],s="valid",a,i){return Object(x.tidy)(()=>{if(null==a&&(a="channelsLast"),ot(a),4!==t.rank&&5!==t.rank)throw new S("conv3dWithBias expects input to be of rank 4 or 5, but received "+t.rank+".");if(4!==e.rank&&5!==e.rank)throw new S("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+t.rank+".");let o=Ir(t,a);if("causal"===s)throw new C("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=x.conv3d(o,e,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=Dt(o,n)),"channelsFirst"===a&&(o=x.transpose(o,[0,4,1,2,3])),o})}Or.className="Softmax",x.serialization.registerClass(Or);class Rr extends ke{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Rr.verifyArgs(e),this.rank=t,V(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new C(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=kr(e.kernelSize,t,"kernelSize"),this.strides=kr(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,ut(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,ot(this.dataFormat),this.activation=lr(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=se(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=et(e.biasConstraint),this.biasRegularizer=gr(e.biasRegularizer),this.activityRegularizer=gr(e.activityRegularizer),this.dilationRate=kr(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new S("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new S("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new S("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(t){if(A("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!W(t.kernelSize,"number",1,3))throw new S(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:or(this.activation),useBias:this.useBias,biasInitializer:re(this.biasInitializer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),biasConstraint:Q(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class $r extends Rr{constructor(t,e){super(t,e),this.kernel=null,$r.verifyArgs(e),this.filters=e.filters,V(this.filters,"filters"),this.kernelInitializer=se(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=et(e.kernelConstraint),this.kernelRegularizer=gr(e.kernelRegularizer)}build(t){t=de(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new S("The channel dimension of the input should be defined. Found "+t[e]);const n=t[e],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return Object(x.tidy)(()=>{let e;t=he(t);const n=null==this.bias?null:this.bias.read(),r=G(this.activation.getClassName());if(null!=r&&2===this.rank)e=Er(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)e=Ar(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=Er(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new C("convolutions greater than 3D are not implemented yet.");e=Tr(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e})}computeOutputShape(t){t=de(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const r=Sr(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(r)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:re(this.kernelInitializer),kernelRegularizer:fr(this.kernelRegularizer),kernelConstraint:Q(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new S("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))}}class jr extends $r{constructor(t){super(2,t),jr.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!W(t.kernelSize,"number",1,2))throw new S(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}jr.className="Conv2D",x.serialization.registerClass(jr);class Dr extends $r{constructor(t){super(3,t),Dr.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new S(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}Dr.className="Conv3D",x.serialization.registerClass(Dr);class _r extends jr{constructor(t){if(super(t),this.inputSpec=[new ye({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new S("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(t){if(4!==(t=de(t)).length)throw new S("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new S("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ye({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return x.tidy(()=>{let e=he(t);if(4!==e.shape.length)throw new S("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);const n=e.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],u=this.kernelSize[0],l=this.kernelSize[1],c=this.strides[0],h=this.strides[1],d=[r,Cr(i,c,u,this.padding),Cr(o,h,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=x.transpose(e,[0,2,3,1]));let p=x.conv2dTranspose(e,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(p=x.transpose(p,[0,3,1,2])),null!=this.bias&&(p=Dt(p,this.bias.read(),this.dataFormat)),null!=this.activation&&(p=this.activation.apply(p)),p})}computeOutputShape(t){const e=(t=de(t)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return e[n]=this.filters,e[r]=Cr(e[r],o,a,this.padding),e[s]=Cr(e[s],u,i,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}_r.className="Conv2DTranspose",x.serialization.registerClass(_r);class Fr extends $r{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new S("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new S("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new S(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(e.padding));this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=se(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=gr(e.depthwiseRegularizer),this.depthwiseConstraint=et(e.depthwiseConstraint),this.pointwiseInitializer=se(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=gr(e.pointwiseRegularizer),this.pointwiseConstraint=et(e.pointwiseConstraint)}build(t){if((t=de(t)).length<this.rank+2)throw new S(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new S("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[e]));const n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let t=0;t<this.rank;++t)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new ye({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return Object(x.tidy)(()=>{let e;if(t=he(t),1===this.rank)throw new C("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=x.transpose(t,[0,2,3,1])),e=x.separableConv2d(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=Dt(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=x.transpose(e,[0,3,1,2])),e})}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=re(this.depthwiseInitializer),t.pointwiseInitializer=re(this.pointwiseInitializer),t.depthwiseRegularizer=fr(this.depthwiseRegularizer),t.pointwiseRegularizer=fr(this.pointwiseRegularizer),t.depthwiseConstraint=Q(this.depthwiseConstraint),t.pointwiseConstraint=Q(this.pointwiseConstraint),t}}Fr.className="SeparableConv";class Mr extends Fr{constructor(t){super(2,t)}}Mr.className="SeparableConv2D",x.serialization.registerClass(Mr);class zr extends $r{constructor(t){super(1,t),zr.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!W(t.kernelSize,"number",1,1))throw new S(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}zr.className="Conv1D",x.serialization.registerClass(zr);class Lr extends ke{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return Object(x.tidy)(()=>{if(t=he(t),"channelsLast"===this.dataFormat){const e=Ct(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Ct(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=Ct(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Ct(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Lr.className="Cropping2D",x.serialization.registerClass(Lr);class Br extends ke{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return x.tidy(()=>{let e=he(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=x.transpose(e,[0,2,3,1]);const t=this.size[0]*n[2],r=this.size[1]*n[3],s=e.resizeNearestNeighbor([t,r]);return x.transpose(s,[0,3,1,2])}{const t=this.size[0]*n[1],r=this.size[1]*n[2];return e.resizeNearestNeighbor([t,r])}})}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Br.className="UpSampling2D",x.serialization.registerClass(Br);class Pr extends Rr{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=se(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=et(t.depthwiseConstraint),this.depthwiseRegularizer=gr(t.depthwiseRegularizer)}build(t){if((t=de(t)).length<4)throw new S(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new S(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Object(x.tidy)(()=>{let e=function(t,e,n=[1,1],r="valid",s,a){return Object(x.tidy)(()=>{null==s&&(s="channelsLast"),ot(s);let i=Nr(t,s);if(4!==t.rank)throw new S("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new S("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return i=x.depthwiseConv2d(i,e,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=x.transpose(i,[0,3,1,2])),i})}(t=he(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Dt(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e})}computeOutputShape(t){t=de(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=Sr(e,this.kernelSize[0],this.padding,this.strides[0]),a=Sr(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,s,a]:[t[0],s,a,r]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=re(this.depthwiseInitializer),t.depthwiseRegularizer=fr(this.depthwiseRegularizer),t.depthwiseConstraint=Q(this.depthwiseRegularizer),t}}Pr.className="DepthwiseConv2D",x.serialization.registerClass(Pr);class Wr extends ke{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return Object(x.tidy)(()=>{this.invokeCallHook(t,e);const n=he(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,r=this.getNoiseShape(n);return Ft(()=>_t(n,this.rate,r,this.seed),()=>n,t)}return t})}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}Wr.className="Dropout",x.serialization.registerClass(Wr);class Vr extends Wr{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}Vr.className="SpatialDropout1D",x.serialization.registerClass(Vr);class Ur extends ke{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,V(this.units,"units"),this.activation=lr(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=se(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=se(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=et(t.kernelConstraint),this.biasConstraint=et(t.biasConstraint),this.kernelRegularizer=gr(t.kernelRegularizer),this.biasRegularizer=gr(t.biasRegularizer),this.activityRegularizer=gr(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=de(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=de(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return Object(x.tidy)(()=>{this.invokeCallHook(t,e);const n=he(t),r=G(this.activation.getClassName());let s;return null!=r?s=Tt(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=Tt(n,this.kernel.read()),null!=this.bias&&(s=Dt(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s})}getConfig(){const t={units:this.units,activation:or(this.activation),useBias:this.useBias,kernelInitializer:re(this.kernelInitializer),biasInitializer:re(this.biasInitializer),kernelRegularizer:fr(this.kernelRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:Q(this.kernelConstraint),biasConstraint:Q(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Ur.className="Dense",x.serialization.registerClass(Ur);class Gr extends ke{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=de(t);for(const e of t.slice(1))if(null==e)throw new S(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],gt(t,1)]}call(t,e){return Object(x.tidy)(()=>{this.invokeCallHook(t,e);let n=he(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new S(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],gt(t.shape,1)];return t.reshape(e)}(n)})}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}Gr.className="Flatten",x.serialization.registerClass(Gr);class Hr extends ke{constructor(t){super(t),this.supportsMasking=!0,this.activation=lr(t.activation)}call(t,e){return Object(x.tidy)(()=>{this.invokeCallHook(t,e);const n=he(t);return this.activation.apply(n)})}getConfig(){const t={activation:or(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}Hr.className="Activation",x.serialization.registerClass(Hr);class qr extends ke{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return Object(x.tidy)(()=>{return t=he(t),e=t,n=this.n,Object(x.tidy)(()=>{if(2!==e.shape.length)throw new S(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return At(Ot(e,1),[1,n,1])});var e,n})}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}qr.className="RepeatVector",x.serialization.registerClass(qr);class Kr extends ke{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",r=e.slice();let s=1,a=null;for(let t=0;t<r.length;++t){const e=r[t];if(this.isUnknown(e)){if(null!==a)throw new S("Can only specifiy one unknown dimension.");a=t}else s*=e}const i=gt(t);if(null!==a){if(0===s||i%s!=0)throw new S(n);r[a]=i/s}else if(i!==s)throw new S(n);return r}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return Object(x.tidy)(()=>{this.invokeCallHook(t,e);const n=he(t),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)})}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}Kr.className="Reshape",x.serialization.registerClass(Kr);class Xr extends ke{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+t.dims+" instead.");const e=wt(1,t.dims.length+1);if(!x.util.arraysEqual(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new ye({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=de(t)).slice();return this.dims.forEach((n,r)=>{e[r+1]=t[n]}),e}call(t,e){return Object(x.transpose)(he(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}Xr.className="Permute",x.serialization.registerClass(Xr);class Yr extends ke{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=he(t);return Object(x.any)(Object(x.notEqual)(n,this.maskValue),-1)}call(t,e){return Object(x.tidy)(()=>{this.invokeCallHook(t,e);const n=he(t),r=Object(x.any)(Object(x.notEqual)(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))})}}Yr.className="Masking",x.serialization.registerClass(Yr);class Jr extends ke{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(R(t.inputLength))}this.inputDim=t.inputDim,V(this.inputDim,"inputDim"),this.outputDim=t.outputDim,V(this.outputDim,"outputDim"),this.embeddingsInitializer=se(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=gr(t.embeddingsRegularizer),this.activityRegularizer=gr(t.activityRegularizer),this.embeddingsConstraint=et(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return Object(x.tidy)(()=>this.maskZero?(t=he(t),Object(x.notEqual)(t,Object(x.zerosLike)(t))):null)}computeOutputShape(t){if(t=de(t),null==this.inputLength)return[...t,this.outputDim];const e=R(this.inputLength);if(e.length!==t.length-1)throw new S(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);{let n=0;for(let r=0;r<e.length;++r){const s=e[r],a=t[r+1];if(null!=s&&null!=a&&s!==a)throw new S(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);null==s&&(e[n]=a),n++}}return[t[0],...e,this.outputDim]}call(t,e){return Object(x.tidy)(()=>{this.invokeCallHook(t,e);let n=he(t);"int32"!==n.dtype&&(n=vt(n,"int32"));return Rt(this.embeddings.read(),n.as1D()).reshape(de(this.computeOutputShape(n.shape)))})}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:re(this.embeddingsInitializer),embeddingsRegularizer:fr(this.embeddingsRegularizer),activityRegularizer:fr(this.activityRegularizer),embeddingsConstraint:Q(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}Jr.className="Embedding",x.serialization.registerClass(Jr);class Zr extends ke{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new C}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const s=t[t.length-e.length+r],a=e[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new S("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[de(t)]),(t=t).length<2)throw new S(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=L(e),e.length>1)throw new S(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const r=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=t.map(t=>t.length);-1===t.indexOf(null)&&1===L(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return Object(x.tidy)(()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map(t=>t.rank);if(-1===n.indexOf(null)){const r=xt(n);for(let n of t){const t=n.rank;for(let e=0;e<r-t;++e)n=Ot(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const r of t){const t=r.rank;if(null==t){const t=r.shape,s=t[0],a=t.slice(1).concat([s]);let i=r.reshape([s].concat(gt(t.slice(1))));i=x.transpose(i,[1,0]),i=i.reshape(a),e.push(i),n=!0}else if(t>1){const s=wt(1,t).concat([0]);e.push(x.transpose(r,s)),n=!0}else e.push(r)}let r=this.mergeFunction(e);const s=r.rank;if(n)if(null==s){const t=r.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));r=x.transpose(r.reshape([-1,e]),[1,0]).reshape(n)}else if(s>1){const t=[s-1].concat(wt(0,s-1));r=x.transpose(r,t)}return r}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=L(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return x.tidy(()=>{if(null==e)return null;if(!Array.isArray(e))throw new S("`mask` should be an Array");if(!Array.isArray(t))throw new S("`inputs` should be an Array");if(e.length!==t.length)throw new S(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(t=>null==t))return null;let n=(e=e.map(t=>null==t?t:x.expandDims(t,0)))[0];for(let t=1;t<e.length-1;++t)n=x.logicalAnd(n,e[t]);return n})}}class Qr extends Zr{constructor(t){super(t)}mergeFunction(t){return Object(x.tidy)(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=x.add(e,t[n]);return e})}}Qr.className="Add",x.serialization.registerClass(Qr);class ts extends Zr{constructor(t){super(t)}mergeFunction(t){return Object(x.tidy)(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=x.mul(e,t[n]);return e})}}ts.className="Multiply",x.serialization.registerClass(ts);class es extends Zr{constructor(t){super(t)}mergeFunction(t){return Object(x.tidy)(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=x.add(e,t[n]);return x.mul(1/t.length,e)})}}es.className="Average",x.serialization.registerClass(es);class ns extends Zr{constructor(t){super(t)}mergeFunction(t){return Object(x.tidy)(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=x.maximum(e,t[n]);return e})}}ns.className="Maximum",x.serialization.registerClass(ns);class rs extends Zr{constructor(t){super(t)}mergeFunction(t){return Object(x.tidy)(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=x.minimum(e,t[n]);return e})}}rs.className="Minimum",x.serialization.registerClass(rs);class ss extends Zr{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new S("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const r=t[e].slice();r.splice(this.axis,1);let s=!1;for(const t of n)if(x.util.arraysEqual(t,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new S("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return Object(x.tidy)(()=>Nt(t,this.axis))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new S("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[r]||null==t[r]){n[r]=null;break}n[r]+=t[r]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new S("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new S("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new S(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return x.tidy(()=>{let n=!0;if(e.forEach(t=>{null==t||(n=!1)}),n)return null;const r=[];for(let n=0;n<t.length;++n)null==e[n]?r.push(x.onesLike(t[n]).asType("bool")):e[n].rank<t[n].rank?r.push(x.expandDims(e[n],-1)):r.push(e[n]);const s=x.concat(r,this.axis);return x.all(s,-1,!1)})}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function as(t,e){for(;t<0;)t+=e;return t}ss.className="Concatenate",x.serialization.registerClass(ss);class is extends Zr{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){x.util.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new C("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);if(e[r[0]]!==n[r[1]])throw new S(`Dimension incompatibility: ${e[r[0]]} !== ${n[r[1]]}`)}mergeFunction(t){if(2!==t.length)throw new S(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],r=t[1];return e=Array.isArray(this.axes)?this.axes.map((e,n)=>as(e,t[n].shape.length)):[as(this.axes,n.shape.length),as(this.axes,r.shape.length)],this.normalize&&(n=Le(n,e[0]),r=Le(r,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new C("batchDot is not implemented for tensors of 4D or higher rank yet");if(x.util.assert(t.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, but got "+t.shape.length),x.util.assert(t.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, but got "+e.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new C("batchDot is not implemented for complex64-type Tensors yet.");const r=t.shape.length,s=e.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return x.tidy(()=>{let n,i;if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)i=a[0]===a[1]?t.mul(e).sum(a[0]):t.transpose([1,0]).mul(e).sum(a[1]);else{const n=a[0]!==t.shape.length-1,r=a[1]===e.shape.length-1;i=t.matMul(e,n,r)}if(n>0){let t;t=r>s?r+s-3:r-1;const e=[];for(let r=t;r<t+n;++r)e.push(r);i=i.squeeze(e)}return 1===i.shape.length&&(i=i.expandDims(1)),i})}(n,r,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[as(this.axes,t.length),as(this.axes,e.length)],n}computeOutputShape(t){x.util.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new C("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);e.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=e.concat(n);return 1===s.length&&s.push(1),s}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}is.className="Dot",x.serialization.registerClass(is);class os extends ke{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return Object(x.tidy)(()=>{this.invokeCallHook(t,e);const n=he(t);return Ft(()=>Et(n.shape,0,this.stddev).add(n),()=>n,e.training||!1)})}}os.className="GaussianNoise",x.serialization.registerClass(os);class us extends ke{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Object(x.tidy)(()=>{this.invokeCallHook(t,e);const n=he(t);if(this.rate>0&&this.rate<1){return Ft(()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(Et(n.shape,1,t))},()=>n,e.training||!1)}return n})}}us.className="GaussianDropout",x.serialization.registerClass(us);class ls extends ke{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||he(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Object(x.tidy)(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return Ft(()=>{const e=he(t),r=-1.7580993408473766;let s=Object(x.greaterEqual)(Object(x.randomUniform)(n),this.rate);s=vt(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return e.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)},()=>he(t),e.training||!1)}return t})}}function cs(t,e,n,r,s,a=.001){let i;if(2===t.rank)i=x.batchNorm2d(t,e,n,r,s,a);else if(3===t.rank)i=x.batchNorm3d(t,e,n,r,s,a);else{if(4!==t.rank)throw new C(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=x.batchNorm4d(t,e,n,r,s,a)}return i}function hs(t,e,n,r,s=.001){return x.util.arraysEqual(r.slice().sort(),wt(0,t.rank-1))?function(t,e,n,r,s=.001){return Object(x.tidy)(()=>{const a=x.moments(t,r),i=a.mean,o=a.variance;return[cs(t,i,o,n,e,s),i,o]})}(t,e,n,r,s):function(t,e,n,r,s=.001){return Object(x.tidy)(()=>{const a=x.moments(t,r),i=a.mean,o=a.variance,u=[];for(const e of wt(0,t.rank))-1!==r.indexOf(e)?u.push(1):u.push(t.shape[e]);const l=i.reshape(u),c=o.reshape(u),h=null==e?null:e.reshape(u),d=null==n?null:n.reshape(u);return[cs(t,l,c,d,h,s),i,o]})}(t,e,n,r,s)}ls.className="AlphaDropout",x.serialization.registerClass(ls);class ds extends ke{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=se(t.betaInitializer||"zeros"),this.gammaInitializer=se(t.gammaInitializer||"ones"),this.movingMeanInitializer=se(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=se(t.movingVarianceInitializer||"ones"),this.betaConstraint=et(t.betaConstraint),this.gammaConstraint=et(t.gammaConstraint),this.betaRegularizer=gr(t.betaRegularizer),this.gammaRegularizer=gr(t.gammaRegularizer)}build(t){t=de(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new S(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(t)+".");this.inputSpec=[new ye({ndim:t.length,axes:{[e]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return Object(x.tidy)(()=>{const n=null!=e.training&&e.training,r=he(t),s=r.shape,a=s.length,i=wt(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const u=I(1,a);u[o]=s[o];const l=i.slice();l.sort();const c=!x.util.arraysEqual(l,wt(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const t=this.movingMean.read().reshape(u),e=this.movingVariance.read().reshape(u),n=this.center?this.beta.read().reshape(u):null,s=this.scale?this.gamma.read().reshape(u):null;return cs(r,t,e,n,s,this.epsilon)}return cs(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,p]=hs(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(t,e,n)=>{x.tidy(()=>{const r=1-n,s=t.read(),a=s.sub(e).mul(r);t.write(s.sub(a))})};return(()=>{f(this.movingMean,d,this.momentum),f(this.movingVariance,p,this.momentum)})(),h})}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:re(this.betaInitializer),gammaInitializer:re(this.gammaInitializer),movingMeanInitializer:re(this.movingMeanInitializer),movingVarianceInitializer:re(this.movingVarianceInitializer),betaRegularizer:fr(this.betaRegularizer),gammaRegularizer:fr(this.gammaRegularizer),betaConstraint:Q(this.betaConstraint),gammaConstraint:Q(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}ds.className="BatchNormalization",x.serialization.registerClass(ds);class ps extends ke{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const t of this.axis)if(!Number.isInteger(t))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=se(t.betaInitializer||"zeros"),this.gammaInitializer=se(t.gammaInitializer||"ones"),this.betaRegularizer=gr(t.betaRegularizer),this.gammaRegularizer=gr(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=de(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error("Invalid axis: "+t);if(this.axis.length!==L(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map(e=>t[e]);this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(t,e){const n=he(t),r=n.shape,s=r.length;return Object(x.tidy)(()=>{let{mean:t,variance:e}=Object(x.moments)(n,this.axis,!0);const a=I(1,s);for(const t of this.axis)a[t]=r[t];const i=t=>null!=t&&t.shape.length!==s&&this.axis!==[s-1]?t.reshape(a):t;let o=i(this.gamma.read()),u=i(this.beta.read());const l=[],c=[];for(let t=0;t<s;++t)-1!==this.axis.indexOf(t)?(l.push(r[t]),c.push(1)):(l.push(1),c.push(r[t]));return t=t.tile(l),e=e.tile(l),o=o.tile(c),u=u.tile(c),cs(n,t,e,u,o,this.epsilon)})}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:re(this.betaInitializer),gammaInitializer:re(this.gammaInitializer),betaRegularizer:fr(this.betaRegularizer),gammaRegularizer:fr(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}ps.className="LayerNormalization",x.serialization.registerClass(ps);class fs extends ke{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new S(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new S(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new S(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new ye({ndim:4})]}computeOutputShape(t){let e,n;return t=de(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return Object(x.tidy)(()=>{return e=he(t),n=this.padding,r=this.dataFormat,Object(x.tidy)(()=>{if(4!==e.rank)throw new S("temporalPadding expects input tensor to be 4-D, but received a "+e.rank+"-D tensor.");if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new S("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new S(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],x.pad(e,t)});var e,n,r})}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function ms(t,e,n,r,s,a){return Object(x.tidy)(()=>{let i;ot(s),lt(a),ut(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=Nr(t,s);const o="same"===r?"same":"valid";return i="max"===a?x.maxPool(t,e,n,o):x.avgPool(t,e,n,o),"channelsFirst"===s&&(i=x.transpose(i,[0,3,1,2])),i})}function gs(t,e,n,r,s,a){return Object(x.tidy)(()=>{let i;ot(s),lt(a),ut(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=Ir(t,s);const o="same"===r?"same":"valid";return i="max"===a?x.maxPool3d(t,e,n,o):x.avgPool3d(t,e,n,o),"channelsFirst"===s&&(i=x.transpose(i,[0,4,1,2,3])),i})}fs.className="ZeroPadding2D",x.serialization.registerClass(fs);class bs extends ke{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new S("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.poolSize));this.poolSize=t.poolSize}if(V(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new S("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.strides));this.strides=t.strides}V(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,ut(this.padding),this.inputSpec=[new ye({ndim:3})]}computeOutputShape(t){const e=Sr((t=de(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return Object(x.tidy)(()=>{this.invokeCallHook(t,e),t=Ot(he(t),2);const n=this.poolingFunction(he(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return x.squeeze(n,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class ys extends bs{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return ot(s),ut(r),ms(t,e,n,r,s,"max")}}ys.className="MaxPooling1D",x.serialization.registerClass(ys);class xs extends bs{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return ot(s),ut(r),ms(t,e,n,r,s,"avg")}}xs.className="AveragePooling1D",x.serialization.registerClass(xs);class ws extends ke{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new S("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides];V(this.poolSize,"poolSize"),V(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,ot(this.dataFormat),ut(this.padding),this.inputSpec=[new ye({ndim:4})]}computeOutputShape(t){t=de(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=Sr(e,this.poolSize[0],this.padding,this.strides[0]),n=Sr(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return Object(x.tidy)(()=>(this.invokeCallHook(t,e),this.poolingFunction(he(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class vs extends ws{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return ot(s),ut(r),ms(t,e,n,r,s,"max")}}vs.className="MaxPooling2D",x.serialization.registerClass(vs);class Os extends ws{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return ot(s),ut(r),ms(t,e,n,r,s,"avg")}}Os.className="AveragePooling2D",x.serialization.registerClass(Os);class ks extends ke{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new S("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];V(this.poolSize,"poolSize"),V(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,ot(this.dataFormat),ut(this.padding),this.inputSpec=[new ye({ndim:5})]}computeOutputShape(t){t=de(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=Sr(e,this.poolSize[0],this.padding,this.strides[0]),n=Sr(n,this.poolSize[1],this.padding,this.strides[1]),r=Sr(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]}call(t,e){return Object(x.tidy)(()=>(this.invokeCallHook(t,e),this.poolingFunction(he(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Ss extends ks{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return ot(s),ut(r),gs(t,e,n,r,s,"max")}}Ss.className="MaxPooling3D",x.serialization.registerClass(Ss);class Cs extends ks{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return ot(s),ut(r),gs(t,e,n,r,s,"avg")}}Cs.className="AveragePooling3D",x.serialization.registerClass(Cs);class Ns extends ke{constructor(t){super(t),this.inputSpec=[new ye({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new C}}class Is extends Ns{constructor(t){super(t||{})}call(t,e){return Object(x.tidy)(()=>{const e=he(t);return x.mean(e,1)})}}Is.className="GlobalAveragePooling1D",x.serialization.registerClass(Is);class As extends Ns{constructor(t){super(t||{})}call(t,e){return Object(x.tidy)(()=>{const e=he(t);return x.max(e,1)})}}As.className="GlobalMaxPooling1D",x.serialization.registerClass(As);class Es extends ke{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,ot(this.dataFormat),this.inputSpec=[new ye({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new C}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Ts extends Es{call(t,e){return Object(x.tidy)(()=>{const e=he(t);return"channelsLast"===this.dataFormat?x.mean(e,[1,2]):x.mean(e,[2,3])})}}Ts.className="GlobalAveragePooling2D",x.serialization.registerClass(Ts);class Rs extends Es{call(t,e){return Object(x.tidy)(()=>{const e=he(t);return"channelsLast"===this.dataFormat?x.max(e,[1,2]):x.max(e,[2,3])})}}function $s(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new S("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function js(t,e,n,r=!1,s,a,i=!1,o=!1){return x.tidy(()=>{const u=e.shape.length;if(u<3)throw new S(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(wt(2,u));if(e=x.transpose(e,l),null!=a)throw new C("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===u-1&&(s=x.expandDims(s,-1)),s=x.transpose(s,l)),r&&(e=x.reverse(e,0),null!=s&&(s=x.reverse(s,0)));const c=[];let h,d=n;const p=e.shape[0],f=x.unstack(e);let m,g;null!=s&&(m=x.unstack(s));for(let e=0;e<p;++e){const n=f[e],r=x.tidy(()=>t(n,d));if(null==s)h=r[0],d=r[1];else{const t=x.tidy(()=>{const t=m[e],n=x.onesLike(t).sub(t);return{output:r[0].mul(t).add(d[0].mul(n)),newStates:d.map((e,s)=>r[1][s].mul(t).add(e.mul(n)))}});h=t.output,d=t.newStates}o&&c.push(h)}if(o){const t=1;g=x.stack(c,t)}return[h,g,d]})}Rs.className="GlobalMaxPooling2D",x.serialization.registerClass(Rs);class Ds extends ke{constructor(t){let e;if(super(t),null==t.cell)throw new S("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new Ws({cells:t.cell}):t.cell,null==e.stateSize)throw new S("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new ye({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return wt(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(t=>null)}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){le(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let r;if(r=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const r of e)n.push([t[0],r]);return[r].concat(n)}return r}computeMask(t,e){return x.tidy(()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map(t=>null);return[t].concat(e)}return t})}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new C("Constants support is not implemented in RNN yet.");le(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t[t.length-1];this.inputSpec[0]=new ye({shape:[e,null,n]});const r=[t[0]].concat(t.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!x.util.arraysEqual(this.stateSpec.map(t=>t.shape[t.shape.length-1]),s))throw new S(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=s.map(t=>new ye({shape:[null,t]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){Object(x.tidy)(()=>{if(!this.stateful)throw new O("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new S("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>x.zeros([n,t])):this.states_=[x.zeros([n,this.cell.stateSize])];else if(null==t)x.dispose(this.states_),null!=this.keptStates&&(x.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>x.zeros([n,t])):this.states_[0]=x.zeros([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new S(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);!0===e?this.keptStates.push(this.states_.slice()):x.dispose(this.states_);for(let e=0;e<this.states_.length;++e){const r=t[e],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,a=[n,s];if(!x.util.arraysEqual(r.shape,a))throw new S(`State ${e} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[e]=r}}this.states_=this.states_.map(t=>x.keep(t.clone()))})}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=$s(t,n,r,this.numConstants);t=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){e.initialState=n,a=a.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new ye({shape:t.shape}));i=i.concat(this.stateSpec)}null!=r&&(e.constants=r,a=a.concat(r),this.numConstants=r.length);if(a[0]instanceof xe){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return Object(x.tidy)(()=>{const n=null==e?null:e.mask,r=null==e?null:e.training;let s=null==e?null:e.initialState;t=he(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new S(`RNN Layer has ${a} state(s) but was passed `+s.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=js((t,e)=>{const n=this.cell.call([t].concat(e),i);return[n[0],n.slice(1)]},t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=o[0],l=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?l:u;return this.returnState?[h].concat(c):h})}getInitialState(t){return Object(x.tidy)(()=>{let e=x.zeros(t.shape);return e=x.sum(e,[1,2]),e=Ot(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(t=>t>1?At(e,[1,t]):e):this.cell.stateSize>1?[At(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const e=this.cell.getConfig();t.cell={className:this.cell.getClassName(),config:e};const n=super.getConfig();return Object.assign(t,n),t}static fromConfig(t,e,n={}){const r=ze(e.cell,n);return new t(Object.assign(e,{cell:r}))}}Ds.className="RNN",x.serialization.registerClass(Ds);class _s extends ke{}class Fs extends _s{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,V(this.units,"units"),this.activation=lr(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=se(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=se(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=se(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=gr(t.kernelRegularizer),this.recurrentRegularizer=gr(t.recurrentRegularizer),this.biasRegularizer=gr(t.biasRegularizer),this.kernelConstraint=et(t.kernelConstraint),this.recurrentConstraint=et(t.recurrentConstraint),this.biasConstraint=et(t.biasConstraint),this.dropout=yt([1,xt([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=yt([1,xt([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=de(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Object(x.tidy)(()=>{if(2!==(t=t).length)throw new S(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const r=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Vs(()=>x.onesLike(t),this.dropout,r)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Vs(()=>x.onesLike(n),this.recurrentDropout,r));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=Tt(null!=a?x.mul(t,a):t,this.kernel.read()),null!=this.bias&&(s=Dt(s,this.bias.read())),null!=i&&(n=x.mul(n,i));let o=x.add(s,Tt(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const t={units:this.units,activation:or(this.activation),useBias:this.useBias,kernelInitializer:re(this.kernelInitializer),recurrentInitializer:re(this.recurrentInitializer),biasInitializer:re(this.biasInitializer),kernelRegularizer:fr(this.kernelRegularizer),recurrentRegularizer:fr(this.recurrentRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:Q(this.kernelConstraint),recurrentConstraint:Q(this.recurrentConstraint),biasConstraint:Q(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return Object.assign(t,e),t}}Fs.className="SimpleRNNCell",x.serialization.registerClass(Fs);class Ms extends Ds{constructor(t){t.cell=new Fs(t),super(t)}call(t,e){return Object(x.tidy)(()=>{null!=this.cell.dropoutMask&&(x.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(x.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}getConfig(){const t={units:this.units,activation:or(this.activation),useBias:this.useBias,kernelInitializer:re(this.kernelInitializer),recurrentInitializer:re(this.recurrentInitializer),biasInitializer:re(this.biasInitializer),kernelRegularizer:fr(this.kernelRegularizer),recurrentRegularizer:fr(this.recurrentRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:Q(this.kernelConstraint),recurrentConstraint:Q(this.recurrentConstraint),biasConstraint:Q(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return new t(e)}}Ms.className="SimpleRNN",x.serialization.registerClass(Ms);class zs extends _s{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new S("GRUCell does not support reset_after parameter set to true.");this.units=t.units,V(this.units,"units"),this.activation=lr(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=lr(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=se(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=se(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=se(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=gr(t.kernelRegularizer),this.recurrentRegularizer=gr(t.recurrentRegularizer),this.biasRegularizer=gr(t.biasRegularizer),this.kernelConstraint=et(t.kernelConstraint),this.recurrentConstraint=et(t.recurrentConstraint),this.biasConstraint=et(t.biasConstraint),this.dropout=yt([1,xt([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=yt([1,xt([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=de(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Object(x.tidy)(()=>{if(2!==(t=t).length)throw new S("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");const n=null!=e.training&&e.training;let r=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Vs(()=>x.onesLike(t),this.dropout,n,3)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Vs(()=>x.onesLike(r),this.recurrentDropout,n,3));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,u;0<this.dropout&&this.dropout<1&&(t=x.mul(t,s[0]));let l=Tt(t,this.kernel.read());this.useBias&&(l=Dt(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=x.mul(r,a[0]));const c=this.recurrentKernel.read(),[h,d]=x.split(c,[2*this.units,this.units],c.rank-1),p=Tt(r,h),[f,m,g]=x.split(l,3,l.rank-1),[b,y]=x.split(p,2,p.rank-1);i=this.recurrentActivation.apply(x.add(f,b)),o=this.recurrentActivation.apply(x.add(m,y));const w=Tt(x.mul(o,r),d);u=this.activation.apply(x.add(g,w));const v=x.add(x.mul(i,r),x.mul(x.add(1,x.neg(i)),u));return[v,v]})}getConfig(){const t={units:this.units,activation:or(this.activation),recurrentActivation:or(this.recurrentActivation),useBias:this.useBias,kernelInitializer:re(this.kernelInitializer),recurrentInitializer:re(this.recurrentInitializer),biasInitializer:re(this.biasInitializer),kernelRegularizer:fr(this.kernelRegularizer),recurrentRegularizer:fr(this.recurrentRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:Q(this.kernelConstraint),recurrentConstraint:Q(this.recurrentConstraint),biasConstraint:Q(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return Object.assign(t,e),t}}zs.className="GRUCell",x.serialization.registerClass(zs);class Ls extends Ds{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new zs(t),super(t)}call(t,e){return Object(x.tidy)(()=>{null!=this.cell.dropoutMask&&(x.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(x.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:or(this.activation),recurrentActivation:or(this.recurrentActivation),useBias:this.useBias,kernelInitializer:re(this.kernelInitializer),recurrentInitializer:re(this.recurrentInitializer),biasInitializer:re(this.biasInitializer),kernelRegularizer:fr(this.kernelRegularizer),recurrentRegularizer:fr(this.recurrentRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:Q(this.kernelConstraint),recurrentConstraint:Q(this.recurrentConstraint),biasConstraint:Q(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Ls.className="GRU",x.serialization.registerClass(Ls);class Bs extends _s{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,V(this.units,"units"),this.activation=lr(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=lr(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=se(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=se(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=se(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=gr(t.kernelRegularizer),this.recurrentRegularizer=gr(t.recurrentRegularizer),this.biasRegularizer=gr(t.biasRegularizer),this.kernelConstraint=et(t.kernelConstraint),this.recurrentConstraint=et(t.recurrentConstraint),this.biasConstraint=et(t.biasConstraint),this.dropout=yt([1,xt([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=yt([1,xt([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=de(t))[t.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;r=new((e=class extends Lt{apply(e,r){const s=t.apply([n]),a=(new Pt).apply([n]),i=t.apply([2*n]);return It(It(s,a),i)}}).className="CustomInit",e)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return Object(x.tidy)(()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new S("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");let r=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Vs(()=>x.onesLike(t),this.dropout,n,4)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Vs(()=>x.onesLike(r),this.recurrentDropout,n,4));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,u,l,c;0<this.dropout&&this.dropout<1&&(t=x.mul(t,a[0]));let h=Tt(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=x.mul(r,i[0])),h=x.add(h,Tt(r,this.recurrentKernel.read())),this.useBias&&(h=Dt(h,this.bias.read()));const[d,p,f,m]=x.split(h,4,h.rank-1);o=this.recurrentActivation.apply(d),u=this.recurrentActivation.apply(p),l=x.add(x.mul(u,s),x.mul(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=x.mul(c,this.activation.apply(l));return[g,g,l]})}getConfig(){const t={units:this.units,activation:or(this.activation),recurrentActivation:or(this.recurrentActivation),useBias:this.useBias,kernelInitializer:re(this.kernelInitializer),recurrentInitializer:re(this.recurrentInitializer),biasInitializer:re(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:fr(this.kernelRegularizer),recurrentRegularizer:fr(this.recurrentRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:Q(this.kernelConstraint),recurrentConstraint:Q(this.recurrentConstraint),biasConstraint:Q(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return Object.assign(t,e),t}}Bs.className="LSTMCell",x.serialization.registerClass(Bs);class Ps extends Ds{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Bs(t),super(t)}call(t,e){return Object(x.tidy)(()=>{null!=this.cell.dropoutMask&&(x.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(x.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get unitForgetBias(){return this.cell.unitForgetBias}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:or(this.activation),recurrentActivation:or(this.recurrentActivation),useBias:this.useBias,kernelInitializer:re(this.kernelInitializer),recurrentInitializer:re(this.recurrentInitializer),biasInitializer:re(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:fr(this.kernelRegularizer),recurrentRegularizer:fr(this.recurrentRegularizer),biasRegularizer:fr(this.biasRegularizer),activityRegularizer:fr(this.activityRegularizer),kernelConstraint:Q(this.kernelConstraint),recurrentConstraint:Q(this.recurrentConstraint),biasConstraint:Q(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Ps.className="LSTM",x.serialization.registerClass(Ps);class Ws extends _s{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return Object(x.tidy)(()=>{let n=(t=t).slice(1);const r=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?r.push(n.splice(0,t.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[t[0]].concat(n):[a[0]].concat(n),a=o.call(a,e),s.push(a.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[a[0]].concat(n)})}build(t){let e;le(t)&&(t=t[0]),t=t,this.cells.forEach((n,r)=>{ht("RNNCell_"+r,()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){const t=[];for(const e of this.cells)t.push({className:e.getClassName(),config:e.getConfig()});const e={cells:t},n=super.getConfig();return Object.assign(e,n),e}static fromConfig(t,e,n={}){const r=[];for(const t of e.cells)r.push(ze(t,n));return new t({cells:r})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return ge(t)}setWeights(t){const e=[];for(const n of this.cells){const r=n.weights.length,s=t.splice(r);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],s[t]])}be(e)}}function Vs(t,e,n=null,r=1){function s(){return _t(t(),e)}if(r>1){const e=[];for(let a=0;a<r;a++)e.push(Ft(s,t,n));return e.map(t=>x.keep(t.clone()))}return x.keep(Ft(s,t,n).clone())}Ws.className="StackedRNNCells",x.serialization.registerClass(Ws);class Us extends ke{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const r=ze(e.layer,n);delete e.layer;const s={layer:r};return Object.assign(s,e),new t(s)}}class Gs extends Us{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=de(t)).length<3)throw new S("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(t));this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=de(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))}call(t,e){return Object(x.tidy)(()=>js((t,n)=>[he(this.layer.call(t,e)),[]],t=he(t),[],!1,null,null,!1,!0)[1])}}Gs.className="TimeDistributed",x.serialization.registerClass(Gs);class Hs extends Us{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=ze(n),e.goBackwards=!0!==e.goBackwards;const r={};var s;if(r.className=t.layer.getClassName(),r.config=e,this.backwardLayer=ze(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,s=this.mergeMode,P(at,"BidirectionalMergeMode",s),t.weights)throw new C("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,r,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),e=s[0]):e=s[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):T(n)}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=$s(t,n,r,this.numConstants);if(t=s.inputs,n=s.initialState,r=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==r)return super.apply(t,e);const a=[],i=[];if(null!=n){const t=n.length;if(t%2>0)throw new S("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,a.push(...n);const r=n.map(t=>new ye({shape:t.shape}));this.forwardLayer.stateSpec=r.slice(0,t/2),this.backwardLayer.stateSpec=r.slice(t/2),i.push(...r)}if(null!=r)throw new C("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof xe;for(const t of a)if(t instanceof xe!==o)throw new S("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return Object(x.tidy)(()=>{const n=e.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(t,Object.assign(e,{initialState:a})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=x.reverse(s,1)),"concat"===this.mergeMode?i=Nt([r,s]):"sum"===this.mergeMode?i=x.add(r,s):"ave"===this.mergeMode?i=x.mul(.5,x.add(r,s)):"mul"===this.mergeMode?i=x.mul(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){ht(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),ht(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map(t=>null);return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=ze(e.layer);if(delete e.layer,null!=e.numConstants)throw new C("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=e;return r.layer=n,new t(r)}}Hs.className="Bidirectional",x.serialization.registerClass(Hs);var qs=n(15),Ks=n(3);class Xs{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(t=>this.getInput(t)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((t,e)=>(t[e]=this.getAttr(e),t),{}))}getInput(t){return Object(Ks.e)(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return Object(Ks.e)(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Object(qs.f)(this.node.rawAttrs,t,e);if(null!=n.s)return Object(qs.i)(this.node.rawAttrs,t,e);if(null!=n.b)return Object(qs.c)(this.node.rawAttrs,t,e);if(null!=n.shape)return Object(qs.k)(this.node.rawAttrs,t,e);if(null!=n.type)return Object(qs.e)(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Object(qs.g)(this.node.rawAttrs,t,e);if(null!=n.list.s)return Object(qs.h)(this.node.rawAttrs,t,e);if(null!=n.list.shape)return Object(qs.j)(this.node.rawAttrs,t,e);if(null!=n.list.b)return Object(qs.b)(this.node.rawAttrs,t,e);if(null!=n.list.type)return Object(qs.d)(this.node.rawAttrs,t,e)}return e}}var Ys=n(22);function Js(t,e,n=""){x.util.assert(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0}(t,e),()=>n+` Shapes ${t} and ${e} must match`)}class Zs{constructor(t,e,n,r,s,a,i){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Object(x.scalar)(0),Object(x.keep)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(){this.tensors.forEach(t=>t.tensor.dispose()),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(t=>this.read(t))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),Js(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,Object(x.keep)(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((t,n)=>this.write(t,e[n]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return Object(x.tensor)([],[0].concat(this.elementShape));const n=this.readMany(t);return Js(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Object(x.stack)(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return Object(x.tensor)([],[0].concat(this.elementShape));const e=[];for(let t=0;t<this.size();t++)e.push(t);const n=this.readMany(e);return Js(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Object(x.concat)(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,Object(x.unstack)(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map(t=>(n+=t,n));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:e.size/n,a=[];Object(x.tidy)(()=>{e=e.reshape([1,n,s]);for(let n=0;n<t.length;++n){const i=[0,0===n?0:r[n-1],0],o=[1,t[n],s];a[n]=Object(x.slice)(e,i,o).reshape(this.elementShape)}return a});const i=[];for(let e=0;e<t.length;e++)i[e]=e;this.writeMany(i,a)}}class Qs{constructor(t,e,n,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach(t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);Js(e,t.shape,"TensorList shape mismatch: "),Object(x.keep)(t)}),this.idTensor=Object(x.scalar)(0),this.maxNumElements=r,Object(x.keep)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Qs([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(){this.tensors.forEach(t=>t.dispose()),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return Js(t,this.elementShape,"TensorList shape mismatch: "),Object(x.tidy)(()=>{const e=this.tensors.map(e=>e.reshape(t));return Object(x.stack)(e,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return Js(n.shape,t,"TensorList shape mismatch: "),n.reshape(t)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(Js(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Object(x.keep)(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+t);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=t}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);return Js(this.tensors[t].shape,e,"TensorList shape mismatch: "),this.tensors[t]}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);Js(this.elementShape,e.shape,"TensorList shape mismatch: "),Object(x.keep)(e),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);return Js(this.elementShape,n,"TensorList shape mismatch: "),0===(t=t.slice(0,this.size())).length?Object(x.tensor)([],[0].concat(this.elementShape)):Object(x.tidy)(()=>{const e=t.map(t=>this.tensors[t].reshape(n));return Object(x.stack)(e,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);return Js(this.elementShape,e,"TensorList shape mismatch: "),0===this.size()?Object(x.tensor)([],[0].concat(this.elementShape)):Object(x.tidy)(()=>{const t=this.tensors.map(t=>t.reshape(e));return Object(x.concat)(t,0)})}}const ta=async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const r=Object(Ks.d)("thenBranch",t,e,n),s=Object(Ks.d)("elseBranch",t,e,n),a=Object(Ks.d)("cond",t,e,n),i=Object(Ks.d)("args",t,e,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Object(Ks.d)("body",t,e,n),s=Object(Ks.d)("cond",t,e,n),a=Object(Ks.d)("args",t,e,n),i=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map(t=>t.id);let u=await i[0].data();i.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||t.dispose()});let l=a;for(;u[0];){const t=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const e=l.map(t=>t.id);t.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()});const a=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()})}return l}case"LoopCond":{const r=Object(Ks.d)("pred",t,e,n);return[Object(Ks.a)(r)]}case"Switch":{const r=Object(Ks.d)("pred",t,e,n);let s=Object(Ks.d)("data",t,e,n);return s.kept||(s=Object(Ks.a)(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=t.inputNames.find(t=>void 0!==Object(Ks.e)(t,e,n));if(r){const t=Object(Ks.e)(r,e,n);return[Object(Ks.a)(t)]}return}case"Enter":{const r=Object(Ks.d)("frameName",t,e,n),s=Object(Ks.d)("tensor",t,e,n);return n.enterFrame(r),[Object(Ks.a)(s)]}case"Exit":{const r=Object(Ks.d)("tensor",t,e,n);return n.exitFrame(),[Object(Ks.a)(r)]}case"NextIteration":{const r=Object(Ks.d)("tensor",t,e,n);return n.nextIteration(),[Object(Ks.a)(r)]}case"TensorArrayV3":{const r=Object(Ks.d)("size",t,e,n),s=Object(Ks.d)("dtype",t,e,n),a=Object(Ks.d)("elementShape",t,e,n),i=Object(Ks.d)("dynamicSize",t,e,n),o=Object(Ks.d)("clearAfterRead",t,e,n),u=Object(Ks.d)("identicalElementShapes",t,e,n),l=Object(Ks.d)("name",t,e,n),c=new Zs(l,s,r,a,u,i,o);return n.addTensorArray(c),[c.idTensor,Object(x.scalar)(1)]}case"TensorArrayWriteV3":{const r=Object(Ks.d)("tensorArrayId",t,e,n),s=Object(Ks.d)("index",t,e,n),a=Object(Ks.d)("tensor",t,e,n),i=n.getTensorArray(r.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const r=Object(Ks.d)("tensorArrayId",t,e,n),s=Object(Ks.d)("index",t,e,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=Object(Ks.d)("tensorArrayId",t,e,n),s=Object(Ks.d)("indices",t,e,n),a=Object(Ks.d)("dtype",t,e,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=Object(Ks.d)("tensorArrayId",t,e,n),s=Object(Ks.d)("indices",t,e,n),a=Object(Ks.d)("tensor",t,e,n),i=n.getTensorArray(r.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=Object(Ks.d)("tensorArrayId",t,e,n),s=n.getTensorArray(r.id),a=Object(Ks.d)("dtype",t,e,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=Object(Ks.d)("tensorArrayId",t,e,n),s=Object(Ks.d)("tensor",t,e,n),a=Object(Ks.d)("lengths",t,e,n),i=n.getTensorArray(r.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const r=Object(Ks.d)("tensorArrayId",t,e,n),s=n.getTensorArray(r.id);return[Object(x.scalar)(s.size(),"int32")]}case"TensorArrayCloseV3":{const r=Object(Ks.d)("tensorArrayId",t,e,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=Object(Ks.d)("tensorListId",t,e,n),s=Object(Ks.d)("index",t,e,n),a=Object(Ks.d)("tensor",t,e,n),i=n.getTensorList(r.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const r=Object(Ks.d)("tensorListId",t,e,n),s=Object(Ks.d)("index",t,e,n),a=Object(Ks.d)("elementShape",t,e,n),i=Object(Ks.d)("elementDType",t,e,n);return[n.getTensorList(r.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Object(Ks.d)("indices",t,e,n),s=function(t,e,n,r){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const s=Math.max(...e);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new Qs([],n,t.dtype,r),i=Object(x.unstack)(t,0);return e.forEach((t,e)=>{a.setItem(t,i[e])}),a}(Object(Ks.d)("tensor",t,e,n),r,Object(Ks.d)("elementShape",t,e,n),Object(Ks.d)("numElements",t,e,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":{const r=function(t,e,n){return new Qs([],t,e,n)}(Object(Ks.d)("elementShape",t,e,n),Object(Ks.d)("elementDType",t,e,n),Object(Ks.d)("numElements",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListGather":{const r=Object(Ks.d)("tensorListId",t,e,n),s=Object(Ks.d)("indices",t,e,n),a=Object(Ks.d)("elementShape",t,e,n),i=Object(Ks.d)("elementDType",t,e,n);return[n.getTensorList(r.id).gather(s,i,a)]}case"TensorListStack":{const r=Object(Ks.d)("tensorListId",t,e,n),s=Object(Ks.d)("elementShape",t,e,n),a=Object(Ks.d)("elementDType",t,e,n),i=Object(Ks.d)("numElements",t,e,n);return[n.getTensorList(r.id).stack(s,a,i)]}case"TensorListFromTensor":{const r=function(t,e,n){const r=t.dtype;if(t.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+t.shape);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);Js(t.shape.slice(1),e,"TensorList shape mismatch: ");const s=t.unstack();return new Qs(s,e,r)}(Object(Ks.d)("tensor",t,e,n),Object(Ks.d)("elementShape",t,e,n),Object(Ks.d)("elementDType",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=Object(Ks.d)("tensorListId",t,e,n),s=n.getTensorList(r.id),a=Object(Ks.d)("dtype",t,e,n),i=Object(Ks.d)("elementShape",t,e,n);return[s.concat(a,i)]}case"TensorListPushBack":{const r=Object(Ks.d)("tensorListId",t,e,n),s=Object(Ks.d)("tensor",t,e,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=Object(Ks.d)("tensorListId",t,e,n),s=Object(Ks.d)("elementShape",t,e,n),a=Object(Ks.d)("elementDType",t,e,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=Object(Ks.d)("tensor",t,e,n),s=Object(Ks.d)("elementShape",t,e,n),a=function(t,e,n){let r=0;const s=e.map(t=>(r+=t,r));if(r!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${t.shape}`);const a=0===r?0:t.size/r,i=Object(x.tidy)(()=>{const i=[];t=t.reshape([1,r,a]);for(let r=0;r<e.length;++r){const o=[0,0===r?0:s[r-1],0],u=[1,e[r],a];i[r]=Object(x.slice)(t,o,u).reshape(n)}return t.dispose(),i}),o=new Qs([],n,t.dtype,e.length);for(let t=0;t<i.length;t++)o.setItem(t,i[t]);return o}(r,Object(Ks.d)("lengths",t,e,n),s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};function ea(t,e,n){const[r,s]=Object(Ks.d)("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o="fusedbatchnorm"===r,u=Object(Ks.d)("numArgs",t,e,n);if(a){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const l=Object(Ks.d)("strides",t,e,n),c=Object(Ks.c)(t,e,n),h=Object(Ks.d)("dataFormat",t,e,n).toUpperCase(),d=Object(Ks.d)("dilations",t,e,n),[p,f]=Object(Ks.d)("args",t,e,n);return{stride:l,pad:c,dataFormat:h,dilations:d,biasArg:p,preluArg:f,activationFunc:s}}function na(t,e,n){return{boxes:Object(Ks.d)("boxes",t,e,n),scores:Object(Ks.d)("scores",t,e,n),maxOutputSize:Object(Ks.d)("maxOutputSize",t,e,n),iouThreshold:Object(Ks.d)("iouThreshold",t,e,n),scoreThreshold:Object(Ks.d)("scoreThreshold",t,e,n),softNmsSigma:Object(Ks.d)("softNmsSigma",t,e,n)}}function ra(t,e,n){const r=((t,e,n)=>{switch(t.category){case"arithmetic":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[x.add(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"AddN":return[x.addN(Object(Ks.d)("tensors",t,e,n))];case"FloorMod":case"Mod":return[x.mod(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"Mul":return[x.mul(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"RealDiv":case"Div":return[x.div(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"DivNoNan":return[x.divNoNan(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"FloorDiv":return[x.floorDiv(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"Sub":return[x.sub(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"Minimum":return[x.minimum(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"Maximum":return[x.maximum(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"Pow":return[x.pow(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"SquaredDifference":return[x.squaredDifference(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"basic_math":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[x.abs(Object(Ks.d)("x",t,e,n))];case"Acos":return[x.acos(Object(Ks.d)("x",t,e,n))];case"Acosh":return[x.acosh(Object(Ks.d)("x",t,e,n))];case"Asin":return[x.asin(Object(Ks.d)("x",t,e,n))];case"Asinh":return[x.asinh(Object(Ks.d)("x",t,e,n))];case"Atan":return[x.atan(Object(Ks.d)("x",t,e,n))];case"Atan2":return[x.atan2(Object(Ks.d)("x",t,e,n),Object(Ks.d)("y",t,e,n))];case"Atanh":return[x.atanh(Object(Ks.d)("x",t,e,n))];case"Ceil":return[x.ceil(Object(Ks.d)("x",t,e,n))];case"Complex":return[x.complex(Object(Ks.d)("real",t,e,n),Object(Ks.d)("imag",t,e,n))];case"Cos":return[x.cos(Object(Ks.d)("x",t,e,n))];case"Cosh":return[x.cosh(Object(Ks.d)("x",t,e,n))];case"Elu":return[x.elu(Object(Ks.d)("x",t,e,n))];case"Erf":return[x.erf(Object(Ks.d)("x",t,e,n))];case"Exp":return[x.exp(Object(Ks.d)("x",t,e,n))];case"Expm1":return[x.expm1(Object(Ks.d)("x",t,e,n))];case"Floor":return[x.floor(Object(Ks.d)("x",t,e,n))];case"Log":return[x.log(Object(Ks.d)("x",t,e,n))];case"Log1p":return[x.log1p(Object(Ks.d)("x",t,e,n))];case"Imag":return[x.imag(Object(Ks.d)("x",t,e,n))];case"Neg":return[x.neg(Object(Ks.d)("x",t,e,n))];case"Reciprocal":return[x.reciprocal(Object(Ks.d)("x",t,e,n))];case"Real":return[x.real(Object(Ks.d)("x",t,e,n))];case"Relu":return[x.relu(Object(Ks.d)("x",t,e,n))];case"Round":return[x.round(Object(Ks.d)("x",t,e,n))];case"Selu":return[x.selu(Object(Ks.d)("x",t,e,n))];case"Sigmoid":return[x.sigmoid(Object(Ks.d)("x",t,e,n))];case"Sin":return[x.sin(Object(Ks.d)("x",t,e,n))];case"Sign":return[x.sign(Object(Ks.d)("x",t,e,n))];case"Sinh":return[x.sinh(Object(Ks.d)("x",t,e,n))];case"Softplus":return[x.softplus(Object(Ks.d)("x",t,e,n))];case"Sqrt":return[x.sqrt(Object(Ks.d)("x",t,e,n))];case"Square":return[x.square(Object(Ks.d)("x",t,e,n))];case"Tanh":return[x.tanh(Object(Ks.d)("x",t,e,n))];case"Tan":return[x.tan(Object(Ks.d)("x",t,e,n))];case"Relu6":case"ClipByValue":return[x.clipByValue(Object(Ks.d)("x",t,e,n),Object(Ks.d)("clipValueMin",t,e,n),Object(Ks.d)("clipValueMax",t,e,n))];case"Rsqrt":return[x.rsqrt(Object(Ks.e)(t.inputNames[0],e,n))];case"Prod":return[x.prod(Object(Ks.d)("x",t,e,n),Object(Ks.d)("axes",t,e,n))];case"LeakyRelu":return[x.leakyRelu(Object(Ks.d)("x",t,e,n),Object(Ks.d)("alpha",t,e,n))];case"Prelu":return[x.prelu(Object(Ks.d)("x",t,e,n),Object(Ks.d)("alpha",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"control":return ta(t,e,n);case"convolution":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const r=Object(Ks.d)("stride",t,e,n),s=Object(Ks.d)("pad",t,e,n),a=Object(Ks.d)("dataFormat",t,e,n).toUpperCase(),i=Object(Ks.d)("dilation",t,e,n);return[x.conv1d(Object(Ks.d)("x",t,e,n),Object(Ks.d)("filter",t,e,n),r,s,a,i)]}case"Conv2D":{const r=Object(Ks.d)("strides",t,e,n),s=Object(Ks.c)(t,e,n),a=Object(Ks.d)("dataFormat",t,e,n).toUpperCase(),i=Object(Ks.d)("dilations",t,e,n);return[x.conv2d(Object(Ks.d)("x",t,e,n),Object(Ks.d)("filter",t,e,n),[r[1],r[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:u,activationFunc:l}=ea(t,e,n);return[x.fused.conv2d({x:Object(Ks.d)("x",t,e,n),filter:Object(Ks.d)("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:l,preluActivationWeights:u})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:u,activationFunc:l}=ea(t,e,n);return[x.fused.depthwiseConv2d({x:Object(Ks.d)("x",t,e,n),filter:Object(Ks.d)("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:l,preluActivationWeights:u})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=Object(Ks.d)("outputShape",t,e,n),s=Object(Ks.d)("strides",t,e,n),a=Object(Ks.c)(t,e,n);return[x.conv2dTranspose(Object(Ks.d)("x",t,e,n),Object(Ks.d)("filter",t,e,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=Object(Ks.d)("strides",t,e,n),s=Object(Ks.c)(t,e,n),a=Object(Ks.d)("dilations",t,e,n),i=Object(Ks.d)("dataFormat",t,e,n).toUpperCase();return[x.depthwiseConv2d(Object(Ks.d)("input",t,e,n),Object(Ks.d)("filter",t,e,n),[r[1],r[2]],s,i,[a[1],a[2]])]}case"Conv3D":{const r=Object(Ks.d)("strides",t,e,n),s=Object(Ks.d)("pad",t,e,n),a=Object(Ks.d)("dataFormat",t,e,n).toUpperCase(),i=Object(Ks.d)("dilations",t,e,n);return[x.conv3d(Object(Ks.d)("x",t,e,n),Object(Ks.d)("filter",t,e,n),[r[1],r[2],r[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=Object(Ks.d)("strides",t,e,n),s=Object(Ks.d)("pad",t,e,n),a=Object(Ks.d)("kernelSize",t,e,n);return[x.avgPool(Object(Ks.d)("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=Object(Ks.d)("strides",t,e,n),s=Object(Ks.d)("pad",t,e,n),a=Object(Ks.d)("kernelSize",t,e,n);return[x.maxPool(Object(Ks.d)("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=Object(Ks.d)("strides",t,e,n),s=Object(Ks.d)("pad",t,e,n),a=Object(Ks.d)("kernelSize",t,e,n),i=Object(Ks.d)("includeBatchInIndex",t,e,n),{result:o,indexes:u}=x.maxPoolWithArgmax(Object(Ks.d)("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s,i);return[o,u]}case"AvgPool3D":{const r=Object(Ks.d)("strides",t,e,n),s=Object(Ks.d)("pad",t,e,n),a=Object(Ks.d)("kernelSize",t,e,n);return[x.avgPool3d(Object(Ks.d)("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=Object(Ks.d)("strides",t,e,n),s=Object(Ks.d)("pad",t,e,n),a=Object(Ks.d)("kernelSize",t,e,n);return[x.maxPool3d(Object(Ks.d)("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=Object(Ks.d)("strides",t,e,n),s=Object(Ks.d)("pad",t,e,n),a=Object(Ks.d)("dilations",t,e,n),i=r[1],o=r[2],u=a[1],l=a[2];return[x.dilation2d(Object(Ks.d)("x",t,e,n),Object(Ks.d)("filter",t,e,n),[i,o],s,[u,l],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"creation":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"Fill":{const r=Object(Ks.d)("shape",t,e,n),s=Object(Ks.d)("dtype",t,e,n),a=Object(Ks.d)("value",t,e,n);return[x.fill(r,a,s)]}case"LinSpace":{const r=Object(Ks.d)("start",t,e,n),s=Object(Ks.d)("stop",t,e,n),a=Object(Ks.d)("num",t,e,n);return[x.linspace(r,s,a)]}case"Multinomial":{const r=Object(Ks.d)("logits",t,e,n),s=Object(Ks.d)("numSamples",t,e,n),a=Object(Ks.d)("seed",t,e,n);return[x.multinomial(r,s,a)]}case"OneHot":{const r=Object(Ks.d)("indices",t,e,n),s=Object(Ks.d)("depth",t,e,n),a=Object(Ks.d)("onValue",t,e,n),i=Object(Ks.d)("offValue",t,e,n);return[x.oneHot(r,s,a,i)]}case"Ones":return[x.ones(Object(Ks.d)("shape",t,e,n),Object(Ks.d)("dtype",t,e,n))];case"OnesLike":return[x.onesLike(Object(Ks.d)("x",t,e,n))];case"RandomUniform":return[x.randomUniform(Object(Ks.d)("shape",t,e,n),Object(Ks.d)("minval",t,e,n),Object(Ks.d)("maxval",t,e,n),Object(Ks.d)("dtype",t,e,n))];case"Range":{const r=Object(Ks.d)("start",t,e,n),s=Object(Ks.d)("stop",t,e,n),a=Object(Ks.d)("step",t,e,n);return[x.range(r,s,a,Object(Ks.d)("dtype",t,e,n))]}case"TruncatedNormal":{const r=Object(Ks.d)("shape",t,e,n),s=Object(Ks.d)("mean",t,e,n),a=Object(Ks.d)("stdDev",t,e,n),i=Object(Ks.d)("seed",t,e,n);return[x.truncatedNormal(r,s,a,Object(Ks.d)("dtype",t,e,n),i)]}case"Zeros":return[x.zeros(Object(Ks.d)("shape",t,e,n),Object(Ks.d)("dtype",t,e,n))];case"ZerosLike":return[x.zerosLike(Object(Ks.d)("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=na(t,e,n),l=await x.image.nonMaxSuppressionWithScoreAsync(r,s,a,i,o,u);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=na(t,e,n),u=Object(Ks.d)("padToMaxOutputSize",t,e,n),l=await x.image.nonMaxSuppressionPaddedAsync(r,s,a,i,o,u);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=na(t,e,n);return[await x.image.nonMaxSuppressionAsync(r,s,a,i,o)]}case"Where":{const r=Object(Ks.d)("condition",t,e,n).asType("bool"),s=[await x.whereAsync(r)];return r.dispose(),s}case"ListDiff":return x.setdiff1dAsync(Object(Ks.d)("x",t,e,n),Object(Ks.d)("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"TopKV2":{const r=Object(Ks.d)("x",t,e,n),s=Object(Ks.d)("k",t,e,n),a=Object(Ks.d)("sorted",t,e,n),i=x.topk(r,s,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"image":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const r=Object(Ks.d)("images",t,e,n),s=Object(Ks.d)("size",t,e,n),a=Object(Ks.d)("alignCorners",t,e,n);return[x.image.resizeBilinear(r,[s[0],s[1]],a)]}case"ResizeNearestNeighbor":{const r=Object(Ks.d)("images",t,e,n),s=Object(Ks.d)("size",t,e,n),a=Object(Ks.d)("alignCorners",t,e,n);return[x.image.resizeNearestNeighbor(r,[s[0],s[1]],a)]}case"CropAndResize":{const r=Object(Ks.d)("image",t,e,n),s=Object(Ks.d)("boxes",t,e,n),a=Object(Ks.d)("boxInd",t,e,n),i=Object(Ks.d)("cropSize",t,e,n),o=Object(Ks.d)("method",t,e,n),u=Object(Ks.d)("extrapolationValue",t,e,n);return[x.image.cropAndResize(r,s,a,i,o,u)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"graph":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const r=Object(Ks.d)("default",t,e,n);return[Object(Ks.e)(t.name,e,n)||r];case"Placeholder":return[Object(Ks.e)(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{const r=Object(Ks.d)("x",t,e,n);return[Object(Ks.a)(r)]}case"IdentityN":return Object(Ks.d)("x",t,e,n).map(t=>Object(Ks.a)(t));case"Snapshot":const s=Object(Ks.d)("x",t,e,n);return[Object(Ks.a)(s)];case"Shape":return[x.tensor1d(Object(Ks.d)("x",t,e,n).shape,"int32")];case"ShapeN":return Object(Ks.d)("x",t,e,n).map(t=>x.tensor1d(t.shape));case"Size":return[x.scalar(Object(Ks.d)("x",t,e,n).size,"int32")];case"Rank":return[x.scalar(Object(Ks.d)("x",t,e,n).rank,"int32")];case"NoOp":return[x.scalar(1)];case"Print":const a=Object(Ks.d)("x",t,e,n),i=Object(Ks.d)("data",t,e,n),o=Object(Ks.d)("message",t,e,n),u=Object(Ks.d)("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let t=0;t<i.length;t++)console.log(Array.prototype.slice.call(i[t].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"logical":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"Equal":return[x.equal(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"NotEqual":return[x.notEqual(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"Greater":return[x.greater(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"GreaterEqual":return[x.greaterEqual(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"Less":return[x.less(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"LessEqual":return[x.lessEqual(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"LogicalAnd":return[x.logicalAnd(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"LogicalNot":return[x.logicalNot(Object(Ks.d)("a",t,e,n))];case"LogicalOr":return[x.logicalOr(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];case"Select":case"SelectV2":return[x.where(Object(Ks.d)("condition",t,e,n),Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"matrices":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[x.matMul(Object(Ks.d)("a",t,e,n),Object(Ks.d)("b",t,e,n),Object(Ks.d)("transposeA",t,e,n),Object(Ks.d)("transposeB",t,e,n))];case"Transpose":return[x.transpose(Object(Ks.d)("x",t,e,n),Object(Ks.d)("perm",t,e,n))];case"_FusedMatMul":const[r,s]=Object(Ks.d)("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o=Object(Ks.d)("numArgs",t,e,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,l]=Object(Ks.d)("args",t,e,n);return[x.fused.matMul({a:Object(Ks.d)("a",t,e,n),b:Object(Ks.d)("b",t,e,n),transposeA:Object(Ks.d)("transposeA",t,e,n),transposeB:Object(Ks.d)("transposeB",t,e,n),bias:u,activation:s,preluActivationWeights:l})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"normalization":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[x.batchNorm(Object(Ks.d)("x",t,e,n),Object(Ks.d)("mean",t,e,n),Object(Ks.d)("variance",t,e,n),Object(Ks.d)("offset",t,e,n),Object(Ks.d)("scale",t,e,n),Object(Ks.d)("epsilon",t,e,n))];case"LRN":return[x.localResponseNormalization(Object(Ks.d)("x",t,e,n),Object(Ks.d)("radius",t,e,n),Object(Ks.d)("bias",t,e,n),Object(Ks.d)("alpha",t,e,n),Object(Ks.d)("beta",t,e,n))];case"Softmax":return[x.softmax(Object(Ks.d)("x",t,e,n))];case"LogSoftmax":return[x.logSoftmax(Object(Ks.d)("x",t,e,n))];case"SparseToDense":return[x.sparseToDense(Object(Ks.d)("sparseIndices",t,e,n),Object(Ks.d)("outputShape",t,e,n),Object(Ks.d)("sparseValues",t,e,n),Object(Ks.d)("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"reduction":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"Max":{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("keepDims",t,e,n);return[x.max(Object(Ks.d)("x",t,e,n),r,s)]}case"Mean":{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("keepDims",t,e,n);return[x.mean(Object(Ks.d)("x",t,e,n),r,s)]}case"Min":{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("keepDims",t,e,n);return[x.min(Object(Ks.d)("x",t,e,n),r,s)]}case"Sum":{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("keepDims",t,e,n);return[x.sum(Object(Ks.d)("x",t,e,n),r,s)]}case"All":{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("keepDims",t,e,n);return[x.all(Object(Ks.d)("x",t,e,n),r,s)]}case"Any":{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("keepDims",t,e,n);return[x.any(Object(Ks.d)("x",t,e,n),r,s)]}case"ArgMax":{const r=Object(Ks.d)("axis",t,e,n);return[x.argMax(Object(Ks.d)("x",t,e,n),r)]}case"ArgMin":{const r=Object(Ks.d)("axis",t,e,n);return[x.argMin(Object(Ks.d)("x",t,e,n),r)]}case"Prod":{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("keepDims",t,e,n);return[x.prod(Object(Ks.d)("x",t,e,n),r,s)]}case"Cumsum":{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("exclusive",t,e,n),a=Object(Ks.d)("reverse",t,e,n);return[x.cumsum(Object(Ks.d)("x",t,e,n),r,s,a)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"slice_join":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"ConcatV2":case"Concat":{const r=Object(Ks.d)("n",t,e,n),s=Object(Ks.d)("axis",t,e,n);let a=Object(Ks.d)("tensors",t,e,n);return a=a.slice(0,r),[x.concat(a,s)]}case"GatherV2":case"Gather":{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("x",t,e,n),a=Object(Ks.d)("indices",t,e,n);return[x.gather(s,a.asType("int32"),r)]}case"ReverseV2":case"Reverse":{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("x",t,e,n);return[x.reverse(s,r)]}case"Slice":{const r=Object(Ks.d)("begin",t,e,n),s=Object(Ks.d)("size",t,e,n);return[x.slice(Object(Ks.d)("x",t,e,n),r,s)]}case"StridedSlice":{const r=Object(Ks.d)("begin",t,e,n),s=Object(Ks.d)("end",t,e,n),a=Object(Ks.d)("strides",t,e,n),i=Object(Ks.d)("beginMask",t,e,n),o=Object(Ks.d)("endMask",t,e,n),u=Object(Ks.d)("ellipsisMask",t,e,n),l=Object(Ks.d)("newAxisMask",t,e,n),c=Object(Ks.d)("shrinkAxisMask",t,e,n),h=Object(Ks.d)("x",t,e,n);return[x.stridedSlice(h,r,s,a,i,o,u,l,c)]}case"Pack":return x.tidy(()=>{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("tensors",t,e,n),a=s[0].shape,i=s[0].squeeze().shape,o=s.map(t=>{const e=x.util.arraysEqual(t.shape,a);if(!e&&!x.util.arraysEqual(t.squeeze().shape,i))throw new Error("the input tensors shape does not match");return e?t:t.reshape(a)});return[x.stack(o,r)]});case"Unpack":{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("tensor",t,e,n);return x.unstack(s,r)}case"Tile":{const r=Object(Ks.d)("reps",t,e,n);return[x.tile(Object(Ks.d)("x",t,e,n),r)]}case"Split":case"SplitV":{const r=Object(Ks.d)("axis",t,e,n),s=Object(Ks.d)("numOrSizeSplits",t,e,n),a=Object(Ks.d)("x",t,e,n);return x.split(a,s,r)}case"ScatterNd":{const r=Object(Ks.d)("indices",t,e,n),s=Object(Ks.d)("values",t,e,n),a=Object(Ks.d)("shape",t,e,n);return[x.scatterND(r,s,a)]}case"GatherNd":{const r=Object(Ks.d)("x",t,e,n),s=Object(Ks.d)("indices",t,e,n);return[x.gatherND(r,s)]}case"SparseToDense":{const r=Object(Ks.d)("sparseIndices",t,e,n),s=Object(Ks.d)("outputShape",t,e,n),a=Object(Ks.d)("sparseValues",t,e,n),i=Object(Ks.d)("defaultValue",t,e,n);return[x.sparseToDense(r,a,s,a.dtype===i.dtype?i:i.asType(a.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"spectral":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"FFT":return[x.fft(Object(Ks.d)("x",t,e,n))];case"IFFT":return[x.ifft(Object(Ks.d)("x",t,e,n))];case"RFFT":return[x.rfft(Object(Ks.d)("x",t,e,n))];case"IRFFT":return[x.irfft(Object(Ks.d)("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"transformation":return x.tidy(()=>((t,e,n)=>{switch(t.op){case"Cast":return[x.cast(Object(Ks.d)("x",t,e,n),Object(Ks.d)("dtype",t,e,n))];case"ExpandDims":{const r=Object(Ks.d)("axis",t,e,n);return[x.expandDims(Object(Ks.d)("x",t,e,n),r)]}case"Squeeze":{const r=Object(Ks.d)("axis",t,e,n);return[x.squeeze(Object(Ks.d)("x",t,e,n),r)]}case"Reshape":return[x.reshape(Object(Ks.d)("x",t,e,n),Object(Ks.d)("shape",t,e,n))];case"PadV2":case"Pad":return[x.pad(Object(Ks.d)("x",t,e,n),Object(Ks.d)("padding",t,e,n),Object(Ks.d)("constantValue",t,e,n))];case"SpaceToBatchND":{const r=Object(Ks.d)("blockShape",t,e,n),s=Object(Ks.d)("paddings",t,e,n);return[x.spaceToBatchND(Object(Ks.d)("x",t,e,n),r,s)]}case"BatchToSpaceND":{const r=Object(Ks.d)("blockShape",t,e,n),s=Object(Ks.d)("crops",t,e,n);return[x.batchToSpaceND(Object(Ks.d)("x",t,e,n),r,s)]}case"DepthToSpace":{const r=Object(Ks.d)("blockSize",t,e,n),s=Object(Ks.d)("dataFormat",t,e,n).toUpperCase();return[x.depthToSpace(Object(Ks.d)("x",t,e,n),r,s)]}case"BroadcastTo":return[x.broadcastTo(Object(Ks.d)("x",t,e,n),Object(Ks.d)("shape",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"custom":const r=Object(Ys.a)(t.op);if(r&&r.customExecutor)return r.customExecutor(new Xs(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return r instanceof Promise?r.then(t=>[].concat(t)):[].concat(r)}class sa{constructor(t={},e={},n={},r={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose();for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose()}}function aa(t,e,n){const r=new Set,s=[];let a=null,i=null;const o=new Set,u=Object.keys(t).map(t=>Object(Ks.g)(t)[0]),l=[...e];for(;l.length>0;){const t=l.pop();(ua(t)||la(t))&&null==a&&(a=t,i=a.children.map(t=>t.name).filter(t=>r.has(t))),r.add(t.name),null==n[t.name]&&(-1===u.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach(t=>{o.has(t.name)||(o.add(t.name),l.push(t))}):s.push(t.name)))}return{inputs:t,outputs:e,usedNodes:r,missingInputs:s,dynamicNode:a,syncInputs:i}}const ia=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],oa=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"];function ua(t){return ia.indexOf(t.op)>=0}function la(t){return oa.indexOf(t.op)>=0}class ca{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(e=>{this._functionExecutorMap[e]=new ca(t.functions[e],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(e=>t[e].map(t=>t.id));this._weightIds=[].concat(...e),this._weightMap=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}getCompilationKey(t,e){const n=t.map(t=>t.name).sort(),r=e.map(t=>t.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const n=aa(t,e,this.weightMap),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=e.map(t=>t.name),s=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:s}=n,a=[];Object.keys(s).map(t=>Object(Ks.g)(t)[0]).map(e=>t.nodes[e]).forEach(t=>{r.has(t.name)&&a.push(t)}),t.weights.forEach(t=>{r.has(t.name)&&a.push(t)});const i=new Set,o=[];for(;a.length>0;){const t=a.pop();i.add(t.name),e[t.name]||o.push(t),t.children.forEach(t=>{!i.has(t.name)&&r.has(t.name)&&t.inputs.every(t=>i.has(t.name))&&a.push(t)})}return o}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=n.map(t=>this.graph.nodes[Object(Ks.g)(t)[0]]),s=e.map(t=>this.graph.nodes[Object(Ks.g)(t)[0]]),a=this.getCompilationKey(r,s);let i=this.compiledMap.get(a);null==i&&(i=this.compile(t,s),this.compiledMap.set(a,i));const o={},u={};return Object(x.tidy)(()=>{const n=new sa(this.weightMap,o,u,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,s]=Object(Ks.g)(e),a=[];a[s]=t[e],r[n]=a});const s=this.getFrozenTensorIds(r),a={};for(let t=0;t<i.length;t++){const o=i[t];if(!r[o.name]){const t=ra(o,r,n);if(t instanceof Promise)throw new Error(`The execution of the op '${o.op}' returned a promise. Please use model.executeAsync() instead.`);r[o.name]=t,this.checkTensorForDisposal(o.name,o,r,n,s,e,a)}}return null==this.parent&&n.dispose(),e.map(t=>Object(Ks.e)(t,r,n))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(e=>t[e]).map(t=>t.map(t=>t.id)));return new Set(e)}checkTensorForDisposal(t,e,n,r,s,a,i){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach(t=>{null!=t&&(i[t.id]=(i[t.id]||0)+e.children.length)}),e.inputs.forEach(t=>{if("control"!==t.category){const e=Object(Ks.f)(t.name,n,r);null!=e&&e.forEach(t=>{if(t&&!s.has(t.id)){const e=i[t.id];1===e?(t.dispose(),delete i[t.id]):null!=e&&i[t.id]--}})}}))}async executeAsync(t,e){return this._executeAsync(t,e)}async _executeAsync(t,e,n=!1,r={},s={}){n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));const a=new sa(this.weightMap,r,s,this.functionExecutorMap),i=await this.executeWithControlFlow(t,a,e,n),o=e.map(t=>Object(Ks.e)(t,i,a)),u=new Set(o.map(t=>t.id)),l=new Set(Object.keys(t).map(e=>t[e].id));return Object.keys(i).forEach(t=>{i[t].forEach(t=>{!t||t.isDisposed||u.has(t.id)||l.has(t.id)||-1!==this.weightIds.indexOf(t.id)||t.dispose()})}),null==this.parent&&a.dispose(),o}async executeFunctionAsync(t,e,n){const r=t.reduce((t,e,n)=>(t[this.inputs[n].name]=e,t),{});return this._executeAsync(r,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,r){const s=Object.keys(t),a=s.map(t=>this.graph.nodes[Object(Ks.g)(t)[0]]),i=n.map(t=>this.graph.nodes[Object(Ks.g)(t)[0]]),{usedNodes:o,missingInputs:u,dynamicNode:l,syncInputs:c}=aa(t,i,this.weightMap),h=[...a,...this.graph.weights].map(t=>({node:t,contexts:e.currentContext})),d=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,r]=Object(Ks.g)(e),s=[];s[r]=t[e],d[n]=s});const p={},f=this.getFrozenTensorIds(d),m={};for(;h.length>0;){const t=this.processStack(a,h,e,d,m,f,n,p,o);await Promise.all(t)}null!=l||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const g=i.filter(t=>!ua(t)&&!Object(Ks.e)(t.name,d,e)).map(t=>t.name);if(g.length>0){let t="";throw null!=l&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${c}]`),new Error(`Cannot compute the outputs [${g}] from the provided inputs [${s}]. Consider providing the following inputs: [${u}]. ${t}`)}return d}processStack(t,e,n,r,s,a,i,o,u){const l=[];for(;e.length>0;){const c=e.pop();n.currentContext=c.contexts;let h="";if("Enter"===c.node.op&&Object(Ks.d)("isConstant",c.node,r,n)&&([h]=Object(Ks.b)(c.node.name,n)),-1===t.indexOf(c.node)){const t=ra(c.node,r,n);h||([h]=Object(Ks.b)(c.node.name,n));const d=n.currentContext;t instanceof Promise?l.push(t.then(t=>(r[h]=t,n.currentContext=d,this.checkTensorForDisposal(h,c.node,r,n,a,i,o),this.processChildNodes(c.node,e,n,r,s,u),t))):(r[h]=t,this.checkTensorForDisposal(h,c.node,r,n,a,i,o),this.processChildNodes(c.node,e,n,r,s,u))}else this.processChildNodes(c.node,e,n,r,s,u)}return l}processChildNodes(t,e,n,r,s,a){t.children.forEach(t=>{const[i]=Object(Ks.b)(t.name,n);!s[i]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some(t=>!!Object(Ks.e)(t,r,n))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every(t=>!!Object(Ks.e)(t,r,n))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(t=>t.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const n=t[e],[r]=Object(Ks.g)(e),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const t=s.attrParams.shape.value,e=t.length===n.shape.length&&n.shape.every((e,n)=>-1===t[n]||t[n]===e);x.util.assert(e,()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&x.util.assert(n.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter(t=>{const[e]=Object(Ks.g)(t);return null==this.graph.nodes[e]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t},{})}checkOutputs(t){t.forEach(t=>{const[e]=Object(Ks.g)(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)})}}class ha{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={})}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=x.io.browserHTTPRequest(t,this.loadOptions);else{const e=x.io.getLoadHandlers(t,this.loadOptions);if(0===e.length)e.push(x.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=await this.handler.load();return this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n={};null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature),this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=x.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);return this.executor=new ca(qs.a.Instance.transformGraph(e,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),!0}async save(t,e){if("string"==typeof t){const e=x.io.getSaveHandlers(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof x.Tensor||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce((e,n,r)=>(e[n]=t[r],e),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,n)=>(e[n]=[t[n]],e),{})}dispose(){this.executor.dispose()}}async function da(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t+="model.json?tfjs-format=file");const n=new ha(t,e);return await n.load(),n}var pa=n(19),fa=n(11),ma=n(18);class ga{constructor(){this.size=null}batch(t,e=!0){const n=this;let r;return x.util.assert(t>0,()=>"batchSize needs to be positive, but it is\n      "+t),r=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),ba(async()=>(await n.iterator()).columnMajorBatch(t,e,ya),r)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,ba(async()=>(await e.iterator()).concatenate(await t.iterator()),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,ba(async()=>(await e.iterator()).filter(e=>x.tidy(()=>t(e))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return ba(async()=>(await e.iterator()).map(e=>x.tidy(()=>t(e))),this.size)}mapAsync(t){const e=this;return ba(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return ba(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,ba(async()=>{const n=Object(fa.e)(async()=>({value:await e.iterator(),done:!1}));return Object(fa.d)(n.take(t))},n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,ba(async()=>(await e.iterator()).skip(t),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=pa.alea(e||x.util.now().toString());return ba(async()=>{let e=s.int32();return n&&(e+=s.int32()),(await r.iterator()).shuffle(t,e.toString())},this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,ba(async()=>(await e.iterator()).take(t),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function ba(t,e=null){return new class extends ga{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function ya(t){if(null===t)return null;const e=t[0];if(Object(ma.a)(e)){return{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof x.Tensor?x.stack(t):x.tensor(t)}(t),recurse:!1}}return{value:null,recurse:!0}}ga.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");fa.a;fa.a;var xa=n(48);xa.a;function wa(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&x.util.assert("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the CPU backend.")})}function va(t,e,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,d=s.padInfo.top,p=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Object(x.buffer)(s.outShape,n),g=m.values,b=s.outShape[1]*s.outShape[2]*s.outShape[3],y=s.outShape[2]*s.outShape[3],w=s.outShape[3];for(let e=0;e<s.batchSize;++e){const n=e*b,m=e*r[0];for(let e=0;e<s.inChannels;++e)for(let b=0;b<s.outHeight;++b){const x=b*i-d,v=Math.max(0,x),O=Math.min(s.inHeight,c+x),k=n+b*y;for(let n=0;n<s.outWidth;++n){const i=n*o-p,c=Math.max(0,i),d=Math.min(s.inWidth,h+i);let b=f,y=0,x=0;for(let n=v;n<O;n+=u){const s=m+n*r[1];for(let n=c;n<d;n+=l){const i=t[s+n*r[2]+e];"max"===a&&i>b?b=i:"avg"===a&&(y+=i,x++)}if(isNaN(b))break}g[k+n*w+e]="avg"===a?y/x:b}}}return m}function Oa(t,e,n,r,s=!1,a=!1){const i=Object(x.buffer)(r.outShape,"int32"),o=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=r.padInfo.top,f=r.padInfo.left,m=Object(x.buffer)(e,n,t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.outHeight;++n){const g=n*o-p;let b=g;for(;b<0;)b+=l;const y=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*u-f;let p=h;for(;p<0;)p+=c;const x=Math.min(r.inWidth,d+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=b;n<y;n+=l){const i=n-g;for(let o=p;o<x;o+=c){const u=o-h,l=m.get(t,n,o,e);l>w&&(w=l,v=s?a?((t*r.inHeight+n)*r.inWidth+o)*r.inChannels+e:(n*r.inWidth+o)*r.inChannels+e:i*d+u)}}i.set(v,t,n,o,e)}}return i}const ka=x.kernel_impls.nonMaxSuppressionV3Impl,Sa=x.kernel_impls.split,Ca=x.kernel_impls.tile,Na=x.kernel_impls.topkImpl,Ia=x.kernel_impls.whereImpl;function Aa(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}class Ea extends x.KernelBackend{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new x.DataStorage(this,Object(x.engine)())}write(t,e,n){this.firstUse&&(this.firstUse=!1,Object(x.env)().get("IS_NODE")&&x.backend_util.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:t,dtype:n}),r}move(t,e,n,r){this.data.set(t,{values:e,dtype:r})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensors:n}=this.data.get(t);if("complex64"===e){const t=this.readSync(n.real.dataId),e=this.readSync(n.imag.dataId);return x.backend_util.mergeRealAndImagArrays(t,e)}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map(t=>x.util.decodeString(t))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return x.buffer(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return Object(x.engine)().makeTensorFromDataId(r,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensors:e}=this.data.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}}async time(t){const e=x.util.now();t();return{kernelMs:x.util.now()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}complex(t,e){const n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:Object(x.engine)().keep(t.clone()),imag:Object(x.engine)().keep(e.clone())},n}real(t){return this.data.get(t.dataId).complexTensors.real.clone()}imag(t){return this.data.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){wa(t,"slice");if(x.slice_util.isSliceContinous(t.shape,e,n)){const r=x.slice_util.computeFlatOffset(e,t.strides),s=x.util.sizeFromShape(n),a=this.readSync(t.dataId);return x.tensor(a.subarray(r,r+s),n,t.dtype)}const r=x.buffer(n,t.dtype),s=this.bufferSync(t);for(let t=0;t<r.size;++t){const n=r.indexToLoc(t).map((t,n)=>t+e[n]);r.values[t]=s.get(...n)}return r.toTensor()}stridedSlice(t,e,n,r){wa(t,"stridedSlice");const s=x.slice_util.computeOutShape(e,n,r);if(s.some(t=>0===t))return x.tensor([],s);const a=x.buffer(s,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;t++){const n=a.indexToLoc(t),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[t]*r[t]+e[t];a.set(i.get(...s),...n)}return a.toTensor()}diag(t){const e=this.readSync(t.dataId),n=x.buffer([t.size,t.size],t.dtype),r=n.values;for(let n=0;n<e.length;n++)r[n*t.size+n]=e[n];return n.toTensor()}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}reverse(t,e){wa(t,"reverse");const n=x.buffer(t.shape,t.dtype),r=this.bufferSync(t);for(let s=0;s<n.size;s++){const a=n.indexToLoc(s),i=a.slice();e.forEach(e=>i[e]=t.shape[e]-1-i[e]),n.set(r.get(...i),...a)}return n.toTensor()}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>x.real(t)),r=t.map(t=>x.imag(t));return x.complex(this.concat(n,e),this.concat(r,e))}const n=t.map(t=>{const n=x.util.sizeFromShape(t.shape.slice(e));return t.as2D(-1,n)}),r=x.backend_util.computeOutShape(n.map(t=>t.shape),1),s=x.buffer(r,t[0].dtype).values;if(1===n[0].shape[0]){let t=0;n.forEach(e=>{s.set(this.readSync(e.dataId),t),t+=e.size})}else{let t=0;n.forEach(e=>{const n=this.readSync(e.dataId);let a=0;for(let i=0;i<e.shape[0];++i){const o=i*r[1]+t;for(let t=0;t<e.shape[1];++t)s[o+t]=n[a++]}t+=e.shape[1]})}const a=x.backend_util.computeOutShape(t.map(t=>t.shape),e);return x.tensor(s,a,t[0].dtype)}neg(t){return wa(t,"neg"),this.multiply(x.scalar(-1),t)}add(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t+n,imag:e+r})):this.broadcastedBinaryOp(t,e,Object(x.upcastType)(t.dtype,e.dtype),(t,e)=>t+e)}addN(t){wa(t,"addN");const e=t.map(t=>this.readSync(t.dataId)),n=x.buffer(t[0].shape,t[0].dtype),r=n.values;for(let n=0;n<t.length;n++){const t=e[n];for(let e=0;e<r.length;e++)r[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=x.util.parseAxisParam([e],t.shape),r=Object(x.max)(t,n),s=x.backend_util.expandShapeToKeepDim(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return x.div(i,o)}subtract(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t-n,imag:e-r})):this.broadcastedBinaryOp(t,e,Object(x.upcastType)(t.dtype,e.dtype),(t,e)=>t-e)}pow(t,e){return wa([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.pow(t,e))}batchMatMul(t,e,n,r){wa([t,e],"matMul");const s=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],o=t.shape[0],u=this.readSync(t.dataId),l=this.readSync(e.dataId),[c,h,d]=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],[p,f,m]=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],g=a*i,b=x.buffer([o,a,i],t.dtype),y=b.values,w=this.blockSize;for(let t=0;t<o;t++)for(let e=0;e<a;e+=w)for(let n=0;n<i;n+=w)for(let r=0;r<s;r+=w){const o=Math.min(e+w,a),b=Math.min(n+w,i),x=Math.min(r+w,s);for(let s=e;s<o;s++)for(let e=n;e<b;e++){let n=0;for(let a=r;a<x;a++)n+=u[t*c+s*h+a*d]*l[a*p+e*f+t*m];y[t*g+(s*i+e)]+=n}}return b.toTensor()}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){let o=this.batchMatMul(t,e,n,r);return s&&(o=this.add(o,s)),a&&(o=Aa(this,o,a,i)),o}multiply(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n})):this.broadcastedBinaryOp(t,e,Object(x.upcastType)(t.dtype,e.dtype),(t,e)=>t*e)}floorDiv(t,e){wa([t,e],"floorDiv");return this.broadcastedBinaryOp(t,e,"int32",(t,e)=>Math.floor(t/e))}sum(t,e){wa(t,"sum"),x.backend_util.assertAxesAreInnerMostDims("sum",e,t.rank);const[n,r]=x.backend_util.computeOutAndReduceShapes(t.shape,e),s=Object(x.upcastType)(t.dtype,"int32"),a=x.zeros(n,s),i=x.util.sizeFromShape(r),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=0;for(let t=0;t<i;++t)n+=u[e+t];o[t]=n}return a}prod(t,e){wa(t,"sum");const[n,r]=x.backend_util.computeOutAndReduceShapes(t.shape,e),s=Object(x.upcastType)(t.dtype,"int32"),a=x.zeros(n,s),i=x.util.sizeFromShape(r),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=1;for(let t=0;t<i;++t)n*=u[e+t];o[t]=n}return a}unsortedSegmentSum(t,e,n){wa(t,"unsortedSegmentSum");const r=[],s=t.rank-e.rank;for(let t=0;t<s;++t)e=e.expandDims(t+1);for(let s=0;s<n;++s){const n=x.scalar(s,"int32"),a=x.equal(n,e).asType("float32").mul(t).sum(0);r.push(a)}return x.stack(r)}argMin(t,e){wa(t,"argMin");const n=[e];x.backend_util.assertAxesAreInnerMostDims("argMin",n,t.rank);const[r,s]=x.backend_util.computeOutAndReduceShapes(t.shape,n),a=x.zeros(r,"int32"),i=x.util.sizeFromShape(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=u[e],r=0;for(let t=0;t<i;++t){const s=u[e+t];s<n&&(n=s,r=t)}o[t]=r}return a}argMax(t,e){wa(t,"argMax");const n=[e];x.backend_util.assertAxesAreInnerMostDims("argMax",n,t.rank);const[r,s]=x.backend_util.computeOutAndReduceShapes(t.shape,n),a=x.zeros(r,"int32"),i=x.util.sizeFromShape(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=u[e],r=0;for(let t=0;t<i;++t){const s=u[e+t];s>n&&(n=s,r=t)}o[t]=r}return a}cumsum(t,e,n,r){if(wa(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=Object(x.upcastType)(t.dtype,"int32"),a=x.zeros(t.shape,s),i=this.readSync(a.dataId),o=this.readSync(t.dataId),u=t.shape[t.rank-1],l=r?(t,e)=>t+u-e-1:(t,e)=>t+e;for(let t=0;t<o.length;t+=u)for(let e=0;e<u;e++){const r=l(t,e);if(0===e)i[r]=n?0:o[r];else{const s=l(t,e-1);i[r]=n?o[s]+i[s]:o[r]+i[s]}}return a}equal(t,e){return wa([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t===e?1:0)}notEqual(t,e){return wa([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t!==e?1:0)}less(t,e){return wa([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<e?1:0)}lessEqual(t,e){return wa([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<=e?1:0)}greater(t,e){return wa([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>e?1:0)}greaterEqual(t,e){return wa([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>=e?1:0)}logicalNot(t){wa(t,"logicalNot");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n[t]=e[t]?0:1;return this.makeOutput(n,t.shape,"bool")}logicalAnd(t,e){return wa([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t&&e)}logicalOr(t,e){return wa([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t||e)}select(t,e,n){wa([t,e,n],"select");const r=this.readSync(t.dataId),s=this.readSync(e.dataId),a=this.readSync(n.dataId),i=x.zeros(e.shape,Object(x.upcastType)(e.dtype,n.dtype)),o=this.readSync(i.dataId);let u=0;const l=0===t.rank||t.rank>1||1===e.rank?1:x.util.sizeFromShape(e.shape.slice(1));for(let t=0;t<r.length;t++)for(let e=0;e<l;e++)1===r[t]?o[u++]=s[t]:o[u++]=a[t];return i}where(t){wa([t],"where");const e=this.readSync(t.dataId);return Ia(t.shape,e)}topk(t,e,n){wa(t,"topk");const r=this.readSync(t.dataId);return Na(r,t.shape,t.dtype,e,n)}min(t,e){wa(t,"min"),x.backend_util.assertAxesAreInnerMostDims("min",e,t.rank);const[n,r]=x.backend_util.computeOutAndReduceShapes(t.shape,e),s=x.zeros(n,t.dtype),a=x.util.sizeFromShape(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];r<n&&(n=r)}i[t]=n}return s}minimum(t,e){return wa([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.min(t,e))}mod(t,e){return wa([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})}maximum(t,e){return wa([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.max(t,e))}all(t,e){wa(t,"all"),x.backend_util.assertAxesAreInnerMostDims("all",e,t.rank);const[n,r]=x.backend_util.computeOutAndReduceShapes(t.shape,e),s=x.zeros(n,t.dtype),a=x.util.sizeFromShape(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n&&r}i[t]=n}return s}any(t,e){wa(t,"any"),x.backend_util.assertAxesAreInnerMostDims("any",e,t.rank);const[n,r]=x.backend_util.computeOutAndReduceShapes(t.shape,e),s=x.zeros(n,t.dtype),a=x.util.sizeFromShape(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n||r}i[t]=n}return s}squaredDifference(t,e){return wa([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t-e;return n*n})}ceil(t){wa(t,"ceil");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.ceil(e[t]);return this.makeOutput(n,t.shape,"float32")}floor(t){wa(t,"floor");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.floor(e[t]);return this.makeOutput(n,t.shape,"float32")}sign(t){wa(t,"x");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)e[t]<0?n[t]=-1:e[t]>0?n[t]=1:n[t]=0;return this.makeOutput(n,t.shape,"float32")}isNaN(t){wa(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isNaN(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isInf(t){wa(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Math.abs(e[t])===1/0&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isFinite(t){wa(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isFinite(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}round(t){wa(t,"round");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=Math.floor(e[t]);e[t]-r<.5?n[t]=Math.floor(e[t]):e[t]-r>.5?n[t]=Math.ceil(e[t]):n[t]=r%2==0?r:r+1}return this.makeOutput(n,t.shape,"float32")}exp(t){wa(t,"exp");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.exp(e[t]);return this.makeOutput(n,t.shape,"float32")}expm1(t){wa(t,"expm1");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.expm1(e[t]);return this.makeOutput(n,t.shape,"float32")}log(t){wa(t,"log");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log(r)}return this.makeOutput(n,t.shape,"float32")}log1p(t){wa(t,"log1p");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log1p(r)}return this.makeOutput(n,t.shape,"float32")}sqrt(t){wa(t,"sqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}rsqrt(t){wa(t,"rsqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=1/Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}reciprocal(t){wa(t,"reciprocal");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=1/e[t];return this.makeOutput(n,t.shape,"float32")}linear(t){return t}relu(t){wa(t,"relu");const e=x.zeros(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.max(0,r[t]);return e}relu6(t){wa(t,"relu");const e=x.zeros(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.min(Math.max(0,r[t]),6);return e}prelu(t,e){return wa([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>t<0?e*t:t)}elu(t){wa(t,"elu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?r:Math.exp(r)-1}return this.makeOutput(e,t.shape,"float32")}eluDer(t,e){wa([t,e],"eluDer");const n=new Float32Array(e.size),r=this.readSync(e.dataId),s=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const e=r[t];n[t]=e>=1?s[t]:s[t]*(e+1)}return this.makeOutput(n,e.shape,"float32")}selu(t){wa(t,"selu");const e=x.backend_util.SELU_SCALEALPHA,n=x.backend_util.SELU_SCALE,r=new Float32Array(t.size),s=this.readSync(t.dataId);for(let t=0;t<s.length;++t){const a=s[t];r[t]=a>=0?n*a:e*(Math.exp(a)-1)}return this.makeOutput(r,t.shape,"float32")}clip(t,e,n){wa(t,"clip");const r=new Float32Array(t.size),s=this.readSync(t.dataId);for(let t=0;t<s.length;++t){const a=s[t];r[t]=a>n?n:a<e?e:a}return this.makeOutput(r,t.shape,"float32")}abs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.abs(n[t]);return this.makeOutput(e,t.shape,"float32")}complexAbs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<t.size;++r){const t=n[2*r],s=n[2*r+1];e[r]=Math.hypot(t,s)}return this.makeOutput(e,t.shape,"float32")}int(t){wa(t,"int");const e=new Int32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=n[t];return this.makeOutput(e,t.shape,"int32")}sigmoid(t){wa(t,"sigmoid");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=1/(1+Math.exp(-n[t]));return this.makeOutput(e,t.shape,"float32")}softplus(t){wa(t,"softplus");const e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t]>-e,a=r[t]<e,i=Math.exp(r[t]);let o;o=a?i:s?r[t]:Math.log(1+i),n[t]=o}return this.makeOutput(n,t.shape,"float32")}sin(t){wa(t,"sin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sin(n[t]);return this.makeOutput(e,t.shape,"float32")}cos(t){wa(t,"cos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cos(n[t]);return this.makeOutput(e,t.shape,"float32")}tan(t){wa(t,"tan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.tan(n[t]);return this.makeOutput(e,t.shape,"float32")}asin(t){wa(t,"asin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asin(n[t]);return this.makeOutput(e,t.shape,"float32")}acos(t){wa(t,"acos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acos(n[t]);return this.makeOutput(e,t.shape,"float32")}atan(t){wa(t,"atan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atan(n[t]);return this.makeOutput(e,t.shape,"float32")}atan2(t,e){return wa([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.atan2(t,e))}sinh(t){wa(t,"sinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sinh(n[t]);return this.makeOutput(e,t.shape,"float32")}cosh(t){wa(t,"cosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cosh(n[t]);return this.makeOutput(e,t.shape,"float32")}tanh(t){wa(t,"tanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=x.util.tanh(n[t]);return this.makeOutput(e,t.shape,"float32")}asinh(t){wa(t,"asinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asinh(n[t]);return this.makeOutput(e,t.shape,"float32")}acosh(t){wa(t,"acosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acosh(n[t]);return this.makeOutput(e,t.shape,"float32")}atanh(t){wa(t,"atanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atanh(n[t]);return this.makeOutput(e,t.shape,"float32")}erf(t){wa(t,"erf");const e=new Float32Array(t.size),n=this.readSync(t.dataId),r=x.backend_util.ERF_P,s=x.backend_util.ERF_A1,a=x.backend_util.ERF_A2,i=x.backend_util.ERF_A3,o=x.backend_util.ERF_A4,u=x.backend_util.ERF_A5;for(let t=0;t<n.length;++t){const l=Math.sign(n[t]),c=Math.abs(n[t]),h=1/(1+r*c);e[t]=l*(1-((((u*h+o)*h+i)*h+a)*h+s)*h*Math.exp(-c*c))}return this.makeOutput(e,t.shape,"float32")}step(t,e=0){wa(t,"step");const n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t];isNaN(s)?n[t]=NaN:n[t]=s>0?1:e}return this.makeOutput(n,t.shape,"float32")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.conv2d(t,e,n);return r&&(i=this.add(i,r)),s&&(i=Aa(this,i,s,a)),i}conv2d(t,e,n){wa([t,e],"conv2d");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,u=n.padInfo.top,l="channelsLast"===n.dataFormat,c=x.buffer(n.outShape,t.dtype),h=t.strides[0],d=l?t.strides[1]:t.strides[2],p=l?t.strides[2]:1,f=l?1:t.strides[1],m=c.strides[0],g=l?c.strides[1]:c.strides[2],b=l?c.strides[2]:1,y=l?1:c.strides[1],w=this.readSync(t.dataId),v=this.readSync(e.dataId),O=c.values;for(let t=0;t<n.batchSize;++t){const l=t*h,c=t*m;for(let t=0;t<n.outHeight;++t){const h=c+t*g,m=t*n.strideHeight-u;for(let t=0;t<r;t++){const r=m+t*a;if(r<0||r>=n.inHeight)continue;const u=t*e.strides[0],c=l+r*d;for(let t=0;t<n.outWidth;++t){const r=h+t*b,a=t*n.strideWidth-o;for(let t=0;t<s;t++){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=c+s*p;let l=u+t*e.strides[1];for(let t=0;t<n.inChannels;++t){const e=w[o+t*f];for(let t=0;t<n.outChannels;++t)O[r+t*y]+=e*v[l+t];l+=n.outChannels}}}}}}return c.toTensor()}conv3d(t,e,n){const r=n.filterDepth,s=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,o=n.dilationHeight,u=n.dilationWidth,l=n.padInfo.front,c=n.padInfo.left,h=n.padInfo.top,d=x.buffer(n.outShape,t.dtype),p=this.readSync(t.dataId),f=this.readSync(e.dataId),m=d.values;for(let g=0;g<n.batchSize;++g){const b=g*t.strides[0],y=g*d.strides[0];for(let g=0;g<n.outDepth;++g){const x=y+g*d.strides[1],w=g*n.strideDepth-l;for(let l=0;l<r;l++){const r=w+l*i;if(r<0||r>=n.inDepth)continue;const g=l*e.strides[0],y=b+r*t.strides[1];for(let r=0;r<n.outHeight;++r){const i=x+r*d.strides[2],l=r*n.strideHeight-h;for(let r=0;r<s;r++){const s=l+r*o;if(s<0||s>=n.inHeight)continue;const h=g+r*e.strides[1],d=y+s*t.strides[2];for(let t=0;t<n.outWidth;++t){const r=i+t*n.outChannels,s=t*n.strideWidth-c;for(let t=0;t<a;t++){const a=s+t*u;if(a<0||a>=n.inWidth)continue;const i=h+t*e.strides[2],o=d+a*n.inChannels;let l=i;for(let t=0;t<n.inChannels;++t){const e=p[o+t];for(let t=0;t<n.outChannels;++t)m[r+t]+=e*f[l+t];l+=n.outChannels}}}}}}}}return d.toTensor()}conv2dDerInput(t,e,n){wa([t,e],"conv2dDerInput");const r=x.buffer(n.inShape,"float32"),s=r.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),[o,u,l]=e.strides,{batchSize:c,filterHeight:h,filterWidth:d,inChannels:p,inHeight:f,inWidth:m,outChannels:g,outHeight:b,outWidth:y,strideHeight:w,strideWidth:v,dataFormat:O}=n,k=h-1-n.padInfo.top,S=d-1-n.padInfo.left,C="channelsLast"===O,N=r.strides[0],I=C?r.strides[1]:r.strides[2],A=C?r.strides[2]:1,E=C?1:r.strides[1],T=t.strides[0],R=C?t.strides[1]:t.strides[2],$=C?t.strides[2]:1,j=C?1:t.strides[1];for(let t=0;t<c;++t)for(let e=0;e<p;++e)for(let n=0;n<f;++n){const r=n-k,c=Math.max(0,Math.ceil(r/w)),p=Math.min(b,(h+r)/w);for(let f=0;f<m;++f){const m=f-S,b=Math.max(0,Math.ceil(m/v)),x=Math.min(y,(d+m)/v);let O=0;for(let n=c;n<p;++n){const s=n*w-r;for(let r=b;r<x;++r){const c=T*t+R*n+$*r,p=o*(h-1-s)+u*(d-1-(r*v-m))+l*e;for(let t=0;t<g;++t){O+=a[c+j*t]*i[p+t]}}}s[N*t+I*n+A*f+E*e]=O}}return r.toTensor()}conv3dDerInput(t,e,n){const r=x.buffer(n.inShape,"float32"),s=r.values,[a,i,o,u]=r.strides,l=this.readSync(t.dataId),[c,h,d,p]=t.strides,f=this.readSync(e.dataId),[m,g,b,y]=e.strides,{batchSize:w,filterDepth:v,filterHeight:O,filterWidth:k,inChannels:S,inDepth:C,inHeight:N,inWidth:I,outChannels:A,outDepth:E,outHeight:T,outWidth:R,strideDepth:$,strideHeight:j,strideWidth:D}=n,_=v-1-n.padInfo.front,F=O-1-n.padInfo.top,M=k-1-n.padInfo.left;for(let t=0;t<w;++t)for(let e=0;e<S;++e)for(let n=0;n<C;++n){const r=n-_,x=Math.max(0,Math.ceil(r/$)),w=Math.min(E,(v+r)/$);for(let S=0;S<N;++S){const C=S-F,N=Math.max(0,Math.ceil(C/j)),E=Math.min(T,(O+C)/j);for(let T=0;T<I;++T){const I=T-M,_=Math.max(0,Math.ceil(I/D)),F=Math.min(R,(k+I)/D);let z=0;for(let n=x;n<w;++n){const s=n*$-r;for(let r=N;r<E;++r){const a=r*j-C;for(let i=_;i<F;++i){const o=c*t+h*n+d*r+p*i,u=m*(v-1-s)+g*(O-1-a)+b*(k-1-(i*D-I))+y*e;for(let t=0;t<A;++t){z+=l[o+t]*f[u+t]}}}}s[a*t+i*n+o*S+u*T+e]=z}}}return r.toTensor()}conv2dDerFilter(t,e,n){wa([t,e],"conv2dDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o="channelsLast"===n.dataFormat,u=x.buffer(n.filterShape,"float32"),l=n.padInfo.left,c=n.padInfo.top,h=this.bufferSync(t),d=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((c-t)/r)),a=Math.min(n.outHeight,(n.inHeight+c-t)/r);for(let p=0;p<i;++p){const i=Math.max(0,Math.ceil((l-p)/s)),f=Math.min(n.outWidth,(n.inWidth+l-p)/s);for(let m=0;m<n.inChannels;++m)for(let g=0;g<n.outChannels;++g){let b=0;for(let u=0;u<n.batchSize;++u)for(let n=e;n<a;++n){const e=t+n*r-c;for(let t=i;t<f;++t){const r=p+t*s-l;b+=o?h.get(u,e,r,m)*d.get(u,n,t,g):h.get(u,m,e,r)*d.get(u,g,n,t)}}u.set(b,t,p,m,g)}}}return u.toTensor()}conv3dDerFilter(t,e,n){const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,u=n.filterWidth,l=x.buffer(n.filterShape,"float32"),c=l.values,[h,d,p,f]=l.strides,m=this.readSync(e.dataId),[g,b,y,w]=e.strides,v=this.readSync(t.dataId),[O,k,S,C]=t.strides,N=n.padInfo.front,I=n.padInfo.left,A=n.padInfo.top;for(let t=0;t<i;++t){const e=Math.max(0,Math.ceil((N-t)/r)),i=Math.min(n.outDepth,(n.inDepth+N-t)/r),l=t*h;for(let h=0;h<o;++h){const o=Math.max(0,Math.ceil((A-h)/s)),x=Math.min(n.outHeight,(n.inHeight+A-h)/s),E=h*d+l;for(let l=0;l<u;++l){const u=Math.max(0,Math.ceil((I-l)/a)),d=Math.min(n.outWidth,(n.inWidth+I-l)/a),T=l*p+E;for(let p=0;p<n.inChannels;++p){const E=p*f+T;for(let f=0;f<n.outChannels;++f){let T=0;for(let c=0;c<n.batchSize;++c){const n=c*O,E=c*g;for(let c=e;c<i;++c){const e=(t+c*r-N)*k+n,i=c*b+E;for(let t=o;t<x;++t){const n=(h+t*s-A)*S+e,r=t*y+i;for(let t=u;t<d;++t){const e=t*w+r;T+=v[(l+t*a-I)*C+n+p]*m[e+f]}}}}c[E+f]=T}}}}}return l.toTensor()}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.depthwiseConv2D(t,e,n);return r&&(i=this.add(i,r)),s&&(i=Aa(this,i,s,a)),i}depthwiseConv2D(t,e,n){wa([t,e],"depthwiseConv2D");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,u=n.padInfo.top,l=n.outChannels/n.inChannels,c=x.buffer(n.outShape,t.dtype),h=this.readSync(t.dataId),d=this.readSync(e.dataId),p=c.values;for(let f=0;f<n.batchSize;++f){const m=f*t.strides[0],g=f*c.strides[0];for(let f=0;f<n.outHeight;++f){const b=g+f*c.strides[1],y=f*n.strideHeight-o;for(let o=0;o<r;++o){const r=y+o*a;if(r<0||r>=n.inHeight)continue;const f=o*e.strides[0],g=m+r*t.strides[1];for(let t=0;t<n.outWidth;++t){const r=b+t*c.strides[2],a=t*n.strideWidth-u;for(let t=0;t<s;++t){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=f+t*e.strides[1],u=g+s*n.inChannels;let c=r,m=o;for(let t=0;t<n.inChannels;++t){const e=h[u+t];for(let t=0;t<l;++t)p[c+t]+=e*d[m+t];c+=l,m+=l}}}}}}return c.toTensor()}depthwiseConv2DDerInput(t,e,n){wa([t,e],"depthwiseConv2DDerInput");const r=x.buffer(n.inShape,"float32"),s=r.values,[a,i,o]=r.strides,u=this.readSync(t.dataId),[l,c,h]=t.strides,d=this.readSync(e.dataId),[p,f,m]=e.strides,{batchSize:g,filterHeight:b,filterWidth:y,inChannels:w,inHeight:v,inWidth:O,outChannels:k,outHeight:S,outWidth:C,strideHeight:N,strideWidth:I}=n,A=b-1-n.padInfo.top,E=y-1-n.padInfo.left,T=k/w;for(let t=0;t<g;++t)for(let e=0;e<w;++e)for(let n=0;n<v;++n){const r=n-A,g=Math.max(0,Math.ceil(r/N)),x=Math.min(S,(b+r)/N);for(let w=0;w<O;++w){const v=w-E,O=Math.max(0,Math.ceil(v/I)),k=Math.min(C,(y+v)/I);let S=0;for(let n=g;n<x;++n){const s=n*N-r;for(let r=O;r<k;++r){const a=l*t+c*n+h*r,i=p*(b-1-s)+f*(y-1-(r*I-v))+m*e;for(let t=0;t<T;++t){S+=u[a+(e*T+t)]*d[i+t]}}}s[a*t+i*n+o*w+e]=S}}return r.toTensor()}depthwiseConv2DDerFilter(t,e,n){wa([t,e],"depthwiseConv2DDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=x.buffer(n.filterShape,"float32"),u=n.padInfo.left,l=n.padInfo.top,c=n.outChannels/n.inChannels,h=this.bufferSync(t),d=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((l-t)/r)),a=Math.min(n.outHeight,(n.inHeight+l-t)/r);for(let p=0;p<i;++p){const i=Math.max(0,Math.ceil((u-p)/s)),f=Math.min(n.outWidth,(n.inWidth+u-p)/s);for(let m=0;m<n.outChannels;++m){const g=Math.trunc(m/c),b=m%c;let y=0;for(let o=0;o<n.batchSize;++o)for(let n=e;n<a;++n){const e=t+n*r-l;for(let t=i;t<f;++t){const r=p+t*s-u;y+=h.get(o,e,r,g)*d.get(o,n,t,m)}}o.set(y,t,p,g,b)}}}return o.toTensor()}tile(t,e){return wa(t,"tile"),Ca(this.bufferSync(t),e)}pad(t,e,n){wa(t,"pad");const r=e.map((e,n)=>e[0]+t.shape[n]+e[1]),s=e.map(t=>t[0]),a=this.bufferSync(t),i=x.buffer(r,t.dtype);0!==n&&i.values.fill(n);for(let e=0;e<t.size;e++){const t=a.indexToLoc(e),n=t.map((t,e)=>t+s[e]);i.set(a.get(...t),...n)}return i.toTensor()}gather(t,e,n){wa([t,e],"gather");const r=t.shape.slice(),s=this.readSync(e.dataId);r[n]=s.length;const a=x.buffer(r,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;++t){const e=a.indexToLoc(t),r=e.slice();r[n]=s[e[n]];const o=i.locToIndex(r);a.values[t]=i.values[o]}return a.toTensor()}batchToSpaceND(t,e,n){wa([t],"batchToSpaceND");const r=e.reduce((t,e)=>t*e),s=x.backend_util.getReshaped(t.shape,e,r),a=x.backend_util.getPermuted(s.length,e.length),i=x.backend_util.getReshapedPermuted(t.shape,e,r),o=x.backend_util.getSliceBeginCoords(n,e.length),u=x.backend_util.getSliceSize(i,n,e.length);return x.transpose(t.reshape(s),a).reshape(i).slice(o,u)}spaceToBatchND(t,e,n){wa([t],"spaceToBatchND");const r=e.reduce((t,e)=>t*e),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=x.backend_util.getReshaped(a.shape,e,r,!1),o=x.backend_util.getPermuted(i.length,e.length,!1),u=x.backend_util.getReshapedPermuted(a.shape,e,r,!1),l=x.transpose(a.reshape(i),o);return Object(x.reshape)(l,u)}maxPool(t,e){wa(t,"maxPool");return va(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"max").toTensor()}maxPoolBackprop(t,e,n,r){wa([e,n],"maxPoolBackprop");const s=this.readSync(e.dataId),a=Object(x.buffer)(r.outShape,e.dtype,Oa(s,e.shape,e.dtype,r).values),i=r.strideHeight,o=r.strideWidth,u=r.dilationHeight,l=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=h-1-r.padInfo.left,p=c-1-r.padInfo.top,f=x.buffer(e.shape,"float32"),m=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inHeight;++n)for(let s=0;s<r.inWidth;++s){const g=n-p,b=s-d;let y=0;for(let n=0;n<c;n+=u){const s=(g+n)/i;if(!(s<0||s>=r.outHeight||Math.floor(s)!==s))for(let i=0;i<h;i+=l){const u=(b+i)/o;if(u<0||u>=r.outWidth||Math.floor(u)!==u)continue;const l=c*h-1-a.get(t,s,u,e)===n*h+i?1:0;if(0===l)continue;y+=m.get(t,s,u,e)*l}}f.set(y,t,n,s,e)}return f.toTensor()}avgPoolBackprop(t,e,n){wa([t,e],"avgPoolBackprop");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=n.dilationHeight,u=n.dilationWidth,l=n.effectiveFilterHeight,c=n.effectiveFilterWidth,h=c-1-n.padInfo.left,d=l-1-n.padInfo.top,p=x.buffer(e.shape,"float32"),f=1/(a*i),m=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let a=0;a<n.inHeight;++a)for(let i=0;i<n.inWidth;++i){const g=a-d,b=i-h;let y=0;for(let a=0;a<l;a+=o){const i=(g+a)/r;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<c;r+=u){const a=(b+r)/s;if(a<0||a>=n.outWidth||Math.floor(a)!==a)continue;y+=m.get(t,i,a,e)}}p.set(y*f,t,a,i,e)}return p.toTensor()}pool3d(t,e,n){wa(t,"pool3d");const r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,u=e.dilationWidth,l=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,p=e.padInfo.top,f=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),b=x.buffer(e.outShape,t.dtype),y=b.values,w=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],v=e.outShape[2]*e.outShape[3]*e.outShape[4],O=e.outShape[3]*e.outShape[4],k=e.outShape[4];for(let b=0;b<e.batchSize;++b){const x=b*w,S=b*t.strides[0];for(let b=0;b<e.inChannels;++b)for(let w=0;w<e.outDepth;++w){const C=w*r-d;let N=C;for(;N<0;)N+=i;const I=Math.min(e.inDepth,l+C),A=x+w*v;for(let r=0;r<e.outHeight;++r){const l=r*s-p;let d=l;for(;d<0;)d+=o;const x=Math.min(e.inHeight,c+l),w=A+r*O;for(let r=0;r<e.outWidth;++r){const s=r*a-f;let l=s;for(;l<0;)l+=u;const c=Math.min(e.inWidth,h+s),p=w+r*k;let v=m,O=0,C=0;for(let e=N;e<I;e+=i){const r=S+e*t.strides[1];for(let e=d;e<x;e+=o){const s=r+e*t.strides[2];for(let e=l;e<c;e+=u){const r=g[s+e*t.strides[3]+b];if("max"===n&&r>v?v=r:"avg"===n&&(O+=r,C++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}y[p+b]="avg"===n?O/C:v}}}}return b.toTensor()}avgPool3d(t,e){return wa(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){wa([t,e],"avgPool3dBackprop");const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,u=n.filterWidth,l=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,d=n.effectiveFilterDepth,p=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=d-1-n.padInfo.front,g=f-1-n.padInfo.left,b=p-1-n.padInfo.top,y=x.buffer(e.shape,"float32"),w=1/(i*o*u),v=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let i=0;i<n.inDepth;++i)for(let o=0;o<n.inHeight;++o)for(let u=0;u<n.inWidth;++u){const x=i-m,O=o-b,k=u-g;let S=0;for(let i=0;i<d;i+=l){const o=(x+i)/r;if(!(o<0||o>=n.outDepth||Math.floor(o)!==o))for(let r=0;r<p;r+=c){const i=(O+r)/s;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<f;r+=h){const s=(k+r)/a;if(s<0||s>=n.outWidth||Math.floor(s)!==s)continue;S+=v.get(t,o,i,s,e)}}}y.set(S*w,t,i,o,u,e)}return y.toTensor()}maxPool3d(t,e){return wa(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=x.buffer(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,u=e.dilationWidth,l=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,p=e.padInfo.top,f=e.padInfo.left,m=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let g=0;g<e.inChannels;++g)for(let b=0;b<e.outDepth;++b){const y=b*r-d;let x=y;for(;x<0;)x+=i;const w=Math.min(e.inDepth,l+y);for(let r=0;r<e.outHeight;++r){const l=r*s-p;let d=l;for(;d<0;)d+=o;const v=Math.min(e.inHeight,c+l);for(let s=0;s<e.outWidth;++s){const p=s*a-f;let O=p;for(;O<0;)O+=u;const k=Math.min(e.inWidth,h+p);let S=Number.NEGATIVE_INFINITY,C=-1;for(let e=x;e<w;e+=i){const n=e-y;for(let r=d;r<v;r+=o){const s=r-l;for(let a=O;a<k;a+=u){const i=a-p,o=m.get(t,e,r,a,g);o>=S&&(S=o,C=n*c*h+s*c+i)}}}n.set(C,t,b,r,s,g)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,r){wa([e,n],"maxPool3dBackprop");const s=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,o=r.strideWidth,u=r.dilationDepth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterDepth,d=r.effectiveFilterHeight,p=r.effectiveFilterWidth,f=h-1-r.padInfo.front,m=p-1-r.padInfo.left,g=d-1-r.padInfo.top,b=x.buffer(e.shape,"float32"),y=this.bufferSync(s),w=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inDepth;++n)for(let s=0;s<r.inHeight;++s)for(let x=0;x<r.inWidth;++x){const v=n-f,O=s-g,k=x-m;let S=0;for(let n=0;n<h;n+=u){const s=(v+n)/a;if(!(s<0||s>=r.outDepth||Math.floor(s)!==s))for(let a=0;a<d;a+=l){const u=(O+a)/i;if(!(u<0||u>=r.outHeight||Math.floor(u)!==u))for(let i=0;i<p;i+=c){const l=(k+i)/o;if(l<0||l>=r.outWidth||Math.floor(l)!==l)continue;const c=h*d*p-1-y.get(t,s,u,l,e)===n*d*p+a*p+i?1:0;if(0===c)continue;S+=w.get(t,s,u,l,e)*c}}}b.set(S,t,n,s,x,e)}return b.toTensor()}cast(t,e){return x.backend_util.castTensor(t,e,this)}reshape(t,e){return x.backend_util.reshapeTensor(t,e)}avgPool(t,e){wa(t,"avgPool"),wa(t,"maxPool");return va(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"avg").toTensor().toFloat()}resizeBilinear(t,e,n,r){wa(t,"resizeBilinear");const[s,a,i,o]=t.shape,u=this.readSync(t.dataId),l=new Float32Array(x.util.sizeFromShape([s,e,n,o])),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n];let d=0;const p=c[0]/h[0],f=c[1]/h[1];for(let r=0;r<s;r++)for(let s=0;s<e;s++){const e=p*s,c=Math.floor(e),h=e-c,m=Math.min(a-1,Math.ceil(e)),g=r*t.strides[0]+c*t.strides[1],b=r*t.strides[0]+m*t.strides[1];for(let e=0;e<n;e++){const n=f*e,r=Math.floor(n),s=n-r,a=Math.min(i-1,Math.ceil(n)),c=g+r*t.strides[2],p=b+r*t.strides[2],m=g+a*t.strides[2],y=b+a*t.strides[2];for(let t=0;t<o;t++){const e=u[c+t],n=u[p+t],r=e+(u[m+t]-e)*s,a=r+(n+(u[y+t]-n)*s-r)*h;l[d++]=a}}}return x.tensor(l,[s,e,n,o])}resizeBilinearBackprop(t,e,n){wa([t,e],"resizeBilinearBackprop");const[r,s,a,i]=e.shape,[,o,u]=t.shape,l=new Float32Array(r*s*a*i),c=[n&&o>1?s-1:s,n&&u>1?a-1:a],h=[n&&o>1?o-1:o,n&&u>1?u-1:u],d=c[0]/h[0],p=c[1]/h[1],f=this.readSync(t.dataId);let m=0;for(let t=0;t<r;t++){const n=t*e.strides[0];for(let t=0;t<o;t++){const r=t*d,o=Math.floor(r),c=Math.min(Math.ceil(r),s-1),h=n+o*e.strides[1],g=n+c*e.strides[1],b=r-o,y=1-b;for(let t=0;t<u;t++){const n=t*p,r=Math.floor(n),s=Math.min(Math.ceil(n),a-1),o=n-r,u=1-o,c=h+r*e.strides[2],d=h+s*e.strides[2],x=g+r*e.strides[2],w=g+s*e.strides[2],v=y*u,O=y*o,k=b*u,S=b*o;for(let t=0;t<i;t++){const e=f[m++];l[c+t]+=e*v,l[d+t]+=e*O,l[x+t]+=e*k,l[w+t]+=e*S}}}}return x.tensor4d(l,[r,a,s,i],e.dtype)}resizeNearestNeighbor(t,e,n,r){wa(t,"resizeNearestNeighbor");const[s,a,i,o]=t.shape,u=this.readSync(t.dataId),l=new Float32Array(s*e*n*o),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=c[0]/h[0],p=c[1]/h[1];let f=0;for(let c=0;c<s;c++){const s=c*t.strides[0];for(let c=0;c<e;c++){const e=d*c,h=s+Math.min(a-1,r?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=p*e,s=h+Math.min(i-1,r?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<o;t++){const e=u[s+t];l[f++]=e}}}}return x.tensor(l,[s,e,n,o],t.dtype)}resizeNearestNeighborBackprop(t,e,n){wa([t,e],"resizeNearestNeighborBackprop");const[r,s,a,i]=e.shape,[,o,u]=t.shape,l=new Float32Array(r*s*a*i),c=this.readSync(t.dataId),h=[n&&o>1?s-1:s,n&&u>1?a-1:a],d=[n&&o>1?o-1:o,n&&u>1?u-1:u],p=h[0]/d[0],f=h[1]/d[1],m=1/p,g=1/f,b=2*Math.ceil(m)+2,y=2*Math.ceil(g)+2;for(let h=0;h<r;h++){const r=h*e.strides[0];for(let h=0;h<s;h++){const d=r+h*e.strides[1],x=Math.floor(h*m),w=Math.floor(x-b/2);for(let m=0;m<a;m++){const x=d+m*e.strides[2],v=Math.floor(m*g),O=Math.floor(v-y/2);for(let e=0;e<i;e++){let i=0;for(let l=0;l<b;l++){const d=l+w;if(d<0||d>=o)continue;const g=r+d*t.strides[1],b=d*p;if(h===Math.min(s-1,n?Math.round(b):Math.floor(b)))for(let r=0;r<y;r++){const s=r+O;if(s<0||s>=u)continue;const o=g+s*t.strides[2],l=s*f;m===Math.min(a-1,n?Math.round(l):Math.floor(l))&&(i+=c[o+e])}}l[x+e]=i}}}}return x.tensor4d(l,e.shape,e.dtype)}batchNorm(t,e,n,r,s,a){wa([t,e,n,s,r],"batchNorm");const i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=this.readSync(n.dataId),l=s?this.readSync(s.dataId):new Float32Array([1]),c=r?this.readSync(r.dataId):new Float32Array([0]),h=new Float32Array(i.length),d=c.length,p=l.length,f=u.length,m=o.length;let g=0,b=0,y=0,w=0;for(let t=0;t<i.length;++t)h[t]=c[g++]+(i[t]-o[b++])*l[y++]/Math.sqrt(u[w++]+a),g>=d&&(g=0),b>=m&&(b=0),y>=p&&(y=0),w>=f&&(w=0);return x.tensor4d(h,t.shape)}localResponseNormalization4D(t,e,n,r,s){wa(t,"localResponseNormalization4D");const a=t.shape[3],i=a-1,o=this.readSync(t.dataId),u=t.size,l=new Float32Array(u);function c(t){const n=t%a;let r=t-n+Math.max(0,n-e);const s=t-n+Math.min(n+e,i);let u=0;for(;r<=s;r++){const t=o[r];u+=t*t}return u}for(let t=0;t<u;t++){const e=c(t),a=o[t]*Math.pow(n+r*e,-s);l[t]=a}return x.tensor4d(l,t.shape)}LRNGrad(t,e,n,r,s,a,i){wa(t,"LRNGrad");const o=t.shape[3],u=this.readSync(t.dataId),l=this.readSync(e.dataId),c=this.readSync(n.dataId),h=new Float32Array(t.size),d=t.size;for(let t=0;t<d;t++){const e=t%o,n=t-e+Math.max(0,e-r),d=t-e+Math.min(o,e+r+1);let p=0;for(let t=n;t<d;t++)p+=Math.pow(l[t],2);p=a*p+s;for(let e=n;e<d;e++){let n=-2*a*i*l[e]*c[t]/p;t===e&&(n+=Math.pow(p,-i)),n*=u[t],h[e]+=n}}return x.tensor4d(h,t.shape)}multinomial(t,e,n,r){wa(t,"multinomial");const s=e?t:x.softmax(t),a=s.shape[0],i=s.shape[1],o=x.zeros([a,n],"int32"),u=this.readSync(o.dataId),l=this.readSync(s.dataId);for(let t=0;t<a;++t){const e=t*i,s=new Float32Array(i-1);s[0]=l[e];for(let t=1;t<s.length;++t)s[t]=s[t-1]+l[e+t];const a=pa.alea(r.toString()),o=t*n;for(let t=0;t<n;++t){const e=a();u[o+t]=s.length;for(let n=0;n<s.length;n++)if(e<s[n]){u[o+t]=n;break}}}return o}oneHot(t,e,n,r){wa(t,"oneHot");const s=new Float32Array(t.size*e);s.fill(r);const a=this.readSync(t.dataId);for(let r=0;r<t.size;++r)a[r]>=0&&a[r]<e&&(s[r*e+a[r]]=n);return x.tensor2d(s,[t.size,e],"int32")}nonMaxSuppression(t,e,n,r,s){wa(t,"nonMaxSuppression");const a=this.readSync(t.dataId),i=this.readSync(e.dataId);return ka(a,i,n,r,s)}fft(t){return this.fftBatch(t,!1)}ifft(t){return this.fftBatch(t,!0)}fftBatch(t,e){const n=t.shape[0],r=t.shape[1],s=x.buffer(t.shape,"float32"),a=x.buffer(t.shape,"float32"),i=x.real(t).as2D(n,r),o=x.imag(t).as2D(n,r);for(let t=0;t<n;t++){const n=i.slice([t,0],[1,r]),u=o.slice([t,0],[1,r]),l=x.complex(n,u),c=this.readSync(this.fftImpl(l,e).dataId);for(let e=0;e<r;e++){const n=x.backend_util.getComplexWithIndex(c,e);s.values[t*r+e]=n.real,a.values[t*r+e]=n.imag}}return x.complex(s.toTensor(),a.toTensor()).as2D(n,r)}fftImpl(t,e){const n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){let s=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(s=x.complex(x.real(s).div(x.scalar(r)),x.imag(s).div(x.scalar(r)))),s}{const n=this.readSync(t.dataId),s=this.fourierTransformByMatmul(n,r,e),a=x.backend_util.splitRealAndImagArrays(s);return x.complex(a.real,a.imag).as2D(t.shape[0],t.shape[1])}}isExponentOf2(t){return 0==(t&t-1)}fftRadix2(t,e,n){if(1===e)return t;const r=this.readSync(t.dataId),s=e/2,a=x.backend_util.complexWithEvenIndex(r);let i=x.complex(a.real,a.imag).as1D();const o=x.backend_util.complexWithOddIndex(r);let u=x.complex(o.real,o.imag).as1D();i=this.fftRadix2(i,s,n),u=this.fftRadix2(u,s,n);const l=x.backend_util.exponents(e,n),c=x.complex(l.real,l.imag).mul(u),h=i.add(c),d=i.sub(c),p=x.real(h).concat(x.real(d)),f=x.imag(h).concat(x.imag(d));return x.complex(p,f).as1D()}fourierTransformByMatmul(t,e,n){const r=new Float32Array(2*e);for(let s=0;s<e;s++){let a=0,i=0;for(let r=0;r<e;r++){const o=x.backend_util.exponent(s*r,e,n),u=x.backend_util.getComplexWithIndex(t,r);a+=u.real*o.real-u.imag*o.imag,i+=u.real*o.imag+u.imag*o.real}n&&(a/=e,i/=e),x.backend_util.assignToTypedArray(r,a,i,s)}return r}depthToSpace(t,e,n){x.util.assert("NHWC"===n,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n),x.util.assert(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],s=t.shape[1],a=t.shape[2],i=t.shape[3],o=s*e,u=a*e,l=i/(e*e),c=this.readSync(t.dataId),h=new Float32Array(r*o*u*l);let d=0;for(let t=0;t<r;++t)for(let n=0;n<o;++n){const r=Math.floor(n/e),o=n%e;for(let n=0;n<u;++n){const u=Math.floor(n/e),p=(o*e+n%e)*l;for(let e=0;e<l;++e){const n=e+p+i*(u+a*(r+s*t));h[d++]=c[n]}}}return x.tensor4d(h,[r,o,u,l])}broadcastedBinaryOp(t,e,n,r){const s=x.backend_util.assertAndGetBroadcastShape(t.shape,e.shape),a=x.buffer(s,n),i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=x.backend_util.getBroadcastDims(t.shape,s),l=x.backend_util.getBroadcastDims(e.shape,s),c=a.values;if(u.length+l.length===0)for(let t=0;t<c.length;++t)c[t]=r(i[t%i.length],o[t%o.length]);else{const n=this.bufferSync(t),s=this.bufferSync(e);for(let h=0;h<c.length;++h){const d=a.indexToLoc(h),p=d.slice(-t.rank);u.forEach(t=>p[t]=0);const f=n.locToIndex(p),m=d.slice(-e.rank);l.forEach(t=>m[t]=0);const g=s.locToIndex(m);c[h]=r(i[f],o[g])}}return a.toTensor()}broadcastedBinaryComplexOp(t,e,n){const r=x.backend_util.assertAndGetBroadcastShape(t.shape,e.shape),s=x.buffer(r,"float32"),a=x.buffer(r,"float32"),i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=x.backend_util.getBroadcastDims(t.shape,r),l=x.backend_util.getBroadcastDims(e.shape,r),c=s.values,h=a.values;if(u.length+l.length===0)for(let t=0;t<c.length;t++){const e=t%i.length,r=t%o.length,s=n(i[2*e],i[2*e+1],o[2*r],o[2*r+1]);c[t]=s.real,h[t]=s.imag}else{const r=this.bufferSync(this.data.get(t.dataId).complexTensors.real),a=this.bufferSync(this.data.get(e.dataId).complexTensors.real);for(let d=0;d<c.length;d++){const p=s.indexToLoc(d),f=p.slice(-t.rank);u.forEach(t=>f[t]=0);const m=r.locToIndex(f),g=p.slice(-e.rank);l.forEach(t=>g[t]=0);const b=a.locToIndex(g),y=n(i[2*m],i[2*m+1],o[2*b],o[2*b+1]);c[d]=y.real,h[d]=y.imag}}return this.complex(s.toTensor(),a.toTensor())}split(t,e,n){return Sa(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,r,s,a){const[i,o,u,l]=t.shape,c=e.shape[0],[h,d]=r,p=x.buffer([c,h,d,l],"float32"),f=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),b=t.strides,y=p.strides;for(let t=0;t<c;t++){const e=4*t,n=f[e],r=f[e+1],c=f[e+2],x=f[e+3],w=m[t];if(w>=i)continue;const v=h>1?(c-n)*(o-1)/(h-1):0,O=d>1?(x-r)*(u-1)/(d-1):0;for(let e=0;e<h;e++){const i=h>1?n*(o-1)+e*v:.5*(n+c)*(o-1);if(i<0||i>o-1)for(let n=0;n<d;n++)for(let r=0;r<l;r++){const s=r+n*y[2]+e*y[1]+t*y[0];p.values[s]=a}else if("bilinear"===s){const n=Math.floor(i),s=Math.ceil(i),o=i-n;for(let i=0;i<d;i++){const c=d>1?r*(u-1)+i*O:.5*(r+x)*(u-1);if(c<0||c>u-1){for(let n=0;n<l;n++){const r=n+i*y[2]+e*y[1]+t*y[0];p.values[r]=a}continue}const h=Math.floor(c),f=Math.ceil(c),m=c-h;for(let r=0;r<l;r++){let a=r+h*b[2]+n*b[1]+w*b[0];const u=g[a];a=r+f*b[2]+n*b[1]+w*b[0];const l=g[a];a=r+h*b[2]+s*b[1]+w*b[0];const c=g[a];a=r+f*b[2]+s*b[1]+w*b[0];const d=u+(l-u)*m,x=c+(g[a]-c)*m;a=r+i*y[2]+e*y[1]+t*y[0],p.values[a]=d+(x-d)*o}}}else for(let n=0;n<d;++n){const s=d>1?r*(u-1)+n*O:.5*(r+x)*(u-1);if(s<0||s>u-1){for(let r=0;r<l;r++){const s=r+n*y[2]+e*y[1]+t*y[0];p.values[s]=a}continue}const o=Math.round(s),c=Math.round(i);for(let r=0;r<l;r++){const s=r+o*b[2]+c*b[1]+w*b[0],a=r+n*y[2]+e*y[1]+t*y[0];p.values[a]=g[s]}}}}return p.toTensor()}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,sliceSize:i,strides:o,outputSize:u}=x.backend_util.calculateShapes(e,t,n);return this.scatter(t,e,n,u,i,a,s,o,r,!1)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=x.backend_util.prepareAndValidate(t,e);if(0===a)return x.tensor([],s,t.dtype);const u=new x.TensorBuffer([a,i],t.dtype),l=this.readSync(e.dataId),c=this.readSync(t.dataId);for(let e=0;e<a;e++){const n=[];let s=0;for(let t=0;t<r;t++){const a=l[e*r+t];s+=a*o[t],n.push(a)}if(s<0||s>=t.size/i)throw new Error(`Invalid indices: ${n} does not index into ${t.shape}`);for(let t=0;t<i;t++)u.values[e*i+t]=c[s*i+t]}return u.toTensor().reshape(s)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=x.backend_util.calculateShapes(e,t,n),u=x.scalar(0);return this.scatter(t,e,n,o,a,s,r,i,u,!0)}fill(t,e,n){n=n||x.util.inferDtype(e);const r=x.util.getArrayFromDType(n,x.util.sizeFromShape(t));return r.fill(e),Object(x.engine)().makeTensor(r,t,n,this)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)}zerosLike(t){const e=x.util.getArrayFromDType(t.dtype,x.util.sizeFromShape(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return x.backend_util.linspaceImpl(t,e,n)}scatter(t,e,n,r,s,a,i,o,u,l){const c=[r/s,s],h=this.readSync(t.dataId),d=this.readSync(e.dataId);if(0===r)return x.tensor([],n,e.dtype);const p=new x.TensorBuffer(c,e.dtype);p.values.fill(this.readSync(u.dataId)[0]);for(let t=0;t<a;t++){const a=[];let u=0;for(let e=0;e<i;e++){const n=h[t*i+e];a.push(n),u+=n*o[e]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)l?p.values[u*s+n]+=d[t*s+n]:p.values[u*s+n]=0===e.rank?d[0]:d[t*s+n]}return p.toTensor().reshape(n)}}Object(x.registerBackend)("cpu",()=>new Ea,1);const Ta={kernelName:x.Dilation2D,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s}=t,{strides:a,pad:i,dilations:o}=n,u=e,l=x.util.toNestedArray(r.shape,u.data.get(r.dataId).values),c=x.util.toNestedArray(s.shape,u.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:p,inChannels:f,outHeight:m,outWidth:g,padInfo:b,strideHeight:y,strideWidth:w,filterHeight:v,filterWidth:O,dilationHeight:k,dilationWidth:S,outShape:C}=x.backend_util.computeDilation2DInfo(r.shape,s.shape,a,i,"NHWC",o),N=x.util.makeZerosNestedTypedArray(C,r.dtype);for(let t=0;t<h;++t)for(let e=0;e<m;++e){const n=e*y-b.top;for(let r=0;r<g;++r){const s=r*w-b.left;for(let a=0;a<f;++a){let i=Number.MIN_SAFE_INTEGER;for(let e=0;e<v;++e){const r=n+e*k;if(r>=0&&r<d)for(let n=0;n<O;++n){const o=s+n*S;if(o>=0&&o<p){const s=l[t][r][o][a]+c[e][n][a];s>i&&(i=s)}}}N[t][e][r][a]=i}}}return{dataId:u.write(x.util.toTypedArray(N,r.dtype),C,r.dtype),shape:C,dtype:r.dtype}}},Ra={kernelName:x.Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:u}=n,l=e,c=x.util.toNestedArray(r.shape,l.data.get(r.dataId).values),h=x.util.toNestedArray(s.shape,l.data.get(s.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:b,padInfo:y,strideHeight:w,strideWidth:v,filterHeight:O,filterWidth:k,dilationHeight:S,dilationWidth:C,outShape:N}=x.backend_util.computeDilation2DInfo(r.shape,s.shape,i,o,"NHWC",u);x.util.assert(a.rank===N.length,()=>`Error in ${x.Dilation2DBackpropFilter}, dy must have the same rank as output ${N.length}, but got `+a.rank);const I=x.util.toNestedArray(N,l.data.get(a.dataId).values),A=x.util.makeZerosNestedTypedArray(s.shape,s.dtype);for(let t=0;t<d;++t)for(let e=0;e<g;++e){const n=e*w-y.top;for(let r=0;r<b;++r){const s=r*v-y.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,u=0;for(let e=0;e<O;++e){const r=n+e*S;if(r>=0&&r<p)for(let n=0;n<k;++n){const l=s+n*C;if(l>=0&&l<f){const s=c[t][r][l][a]+h[e][n][a];s>i&&(i=s,o=e,u=n)}}}A[o][u][a]+=I[t][e][r][a]}}}return{dataId:l.write(x.util.toTypedArray(A,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},$a={kernelName:x.Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:u}=n,l=e,c=x.util.toNestedArray(r.shape,l.data.get(r.dataId).values),h=x.util.toNestedArray(s.shape,l.data.get(s.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:b,padInfo:y,strideHeight:w,strideWidth:v,filterHeight:O,filterWidth:k,dilationHeight:S,dilationWidth:C,outShape:N}=x.backend_util.computeDilation2DInfo(r.shape,s.shape,i,o,"NHWC",u);x.util.assert(a.rank===N.length,()=>`Error in ${x.Dilation2DBackpropInput}, dy must have the same rank as output ${N.length}, but got `+a.rank);const I=x.util.toNestedArray(N,l.data.get(a.dataId).values),A=x.util.makeZerosNestedTypedArray(r.shape,r.dtype);for(let t=0;t<d;++t)for(let e=0;e<g;++e){const n=e*w-y.top;for(let r=0;r<b;++r){const s=r*v-y.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,u=s<0?0:s;for(let e=0;e<O;++e){const r=n+e*S;if(r>=0&&r<p)for(let n=0;n<k;++n){const l=s+n*C;if(l>=0&&l<f){const s=c[t][r][l][a]+h[e][n][a];s>i&&(i=s,o=r,u=l)}}}A[t][o][u][a]+=I[t][e][r][a]}}}return{dataId:l.write(x.util.toTypedArray(A,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};function ja(t,e){return{kernelName:t,backendName:"cpu",kernelFunc:({inputs:n,backend:r})=>{const{a:s,b:a}=n,i=r;wa([s,a],t);const o=i.data.get(s.dataId).values,u=i.data.get(a.dataId).values,[l,c]=e(s.shape,a.shape,o,u,s.dtype);return{dataId:i.write(l,c,s.dtype),shape:c,dtype:s.dtype}}}}function Da(t){return(e,n,r,s,a)=>{const i=x.backend_util.assertAndGetBroadcastShape(e,n),o=i.length,u=x.util.computeStrides(i),l=x.util.sizeFromShape(i),c=x.util.getTypedArrayFromDType(a,l),h=e.length,d=n.length,p=x.util.computeStrides(e),f=x.util.computeStrides(n),m=x.backend_util.getBroadcastDims(e,i),g=x.backend_util.getBroadcastDims(n,i);if(m.length+g.length===0)for(let e=0;e<c.length;++e)c[e]=t(r[e%r.length],s[e%s.length]);else for(let e=0;e<c.length;++e){const n=x.util.indexToLoc(e,o,u),a=n.slice(-h);m.forEach(t=>a[t]=0);const i=x.util.locToIndex(a,h,p),l=n.slice(-d);g.forEach(t=>l[t]=0);const b=x.util.locToIndex(l,d,f);c[e]=t(r[i],s[b])}return[c,i]}}const _a=Da((t,e)=>t/e),Fa=ja(x.Div,_a),Ma={kernelName:x.FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,s=n,a=x.util.getTypedArrayFromDType(r.dtype,x.util.sizeFromShape(r.shape)),[i,o,u,l]=r.shape,c=s.data.get(r.dataId).values;for(let t=0;t<i;t++){const e=t*u*o*l;for(let t=0;t<o;t++){const n=t*(u*l);for(let r=0;r<u;r++){const s=r*l;for(let o=0;o<l;o++){const h=[i,t,r,o][2],d=Math.round(u-h),p=e+n+s+o;let f=c[p];if(d>=0&&d<u){f=c[e+n+d*l+o]}a[p]=f}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};function za(t,e,n,r){const s=x.util.getTypedArrayFromDType(r,x.util.sizeFromShape(n));for(let n=0;n<s.length;++n){const r=n*e;let a=t[r];for(let n=0;n<e;++n){const e=t[r+n];e>a&&(a=e)}s[n]=a}return s}function La(t,e,n,r,s){const a=e.length,i=x.util.sizeFromShape(e),o=x.util.computeStrides(e),u=x.util.computeStrides(s),l=x.util.getTypedArrayFromDType(n,x.util.sizeFromShape(s));for(let e=0;e<i;++e){const n=x.util.indexToLoc(e,a,o),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[r[t]];l[x.util.locToIndex(s,a,u)]=t[e]}return l}const Ba={kernelName:x.Max,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n;let o=r.shape;const u=o.length,l=x.util.parseAxisParam(s,o);let c=l;const h=x.backend_util.getAxesPermutation(c,u);let d=i.data.get(r.dataId).values;if(null!=h){const t=new Array(u);for(let e=0;e<t.length;e++)t[e]=o[h[e]];d=La(d,o,r.dtype,h,t),c=x.backend_util.getInnerMostAxes(c.length,u),o=t}wa(r,"max"),x.backend_util.assertAxesAreInnerMostDims("max",c,u);const[p,f]=x.backend_util.computeOutAndReduceShapes(o,c),m=za(d,x.util.sizeFromShape(f),p,r.dtype),g=i.write(m,p,r.dtype);let b=p;if(a){b=x.backend_util.expandShapeToKeepDim(p,l)}return{dataId:g,shape:b,dtype:r.dtype}}};const Pa={kernelName:x.MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,u=n;wa(r,"MaxPoolWithArgmax");const l=u.data.get(r.dataId).values,c=x.backend_util.computePool2DInfo(r.shape,s,a,[1,1],i),[h,d]=function(t,e,n,r,s){const a=va(t,0,n,x.util.computeStrides(e),s,"max"),i=Oa(t,e,n,s,!0,r);return[a.values,i.values]}(l,r.shape,r.dtype,o,c),p=u.write(h,c.outShape,r.dtype),f=u.write(d,c.outShape,r.dtype);return[{dataId:p,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},Wa=x.kernel_impls.nonMaxSuppressionV4Impl,Va={kernelName:x.NonMaxSuppressionV4,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:u}=n,l=e;wa(r,"NonMaxSuppressionPadded");const c=l.data.get(r.dataId).values,h=l.data.get(s.dataId).values,{selectedIndices:d,validOutputs:p}=Wa(c,h,a,i,o,u);return[d,p]}},Ua=x.kernel_impls.nonMaxSuppressionV5Impl,Ga={kernelName:x.NonMaxSuppressionV5,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=n,l=e;wa(r,"NonMaxSuppressionWithScore");const c=l.data.get(r.dataId).values,h=l.data.get(s.dataId).values,d=a,p=i,f=o,m=u,{selectedIndices:g,selectedScores:b}=Ua(c,h,d,p,f,m);return[g,b]}},Ha={kernelName:x.RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,u=x.util.getTypedArrayFromDType(r.dtype,x.util.sizeFromShape(r.shape)),[l,c,h,d]=r.shape,[p,f]=x.backend_util.getImageCenter(i,c,h),m=Math.sin(s),g=Math.cos(s),b=o.data.get(r.dataId).values;for(let t=0;t<l;t++){const e=t*h*c*d;for(let t=0;t<c;t++){const n=t*(h*d);for(let r=0;r<h;r++){const s=r*d;for(let i=0;i<d;i++){const o=[l,t,r,i],y=o[2],x=o[1];let w=(y-p)*g-(x-f)*m,v=(y-p)*m+(x-f)*g;w=Math.round(w+p),v=Math.round(v+f);let O=a;if("number"!=typeof a&&(O=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){O=b[e+v*(h*d)+w*d+i]}u[e+n+s+i]=O}}}}return{dataId:o.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},qa={kernelName:x.Square,backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;wa(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let t=0;t<s.length;++t){const e=s[t];a[t]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Ka=Da((t,e)=>{const n=t-e;return n*n}),Xa=[Ta,$a,Ra,Fa,Ma,Pa,Ba,Va,Ga,Ha,qa,ja(x.SquaredDifference,Ka),{kernelName:x.Transpose,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n;wa(r,"transpose");const i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];const u=La(a.data.get(r.dataId).values,r.shape,r.dtype,s,o);return{dataId:a.write(u,o,r.dtype),shape:o,dtype:r.dtype}}}];for(const t of Xa)Object(x.registerKernel)(t);const Ya={},Ja={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Za(t){t in Ya||(Ya[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete Ya[t]},!1),1===t)return e.getContext("webgl",Ja)||e.getContext("experimental-webgl",Ja);return e.getContext("webgl2",Ja)}(t));const e=Ya[t];return e.isContextLost()?(delete Ya[t],Za(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Ya[t])}var Qa,ti,ei;function ni(t,e){return[e,t]}function ri(t){const e=x.util.sizeFromShape(t),n=Math.ceil(e/4);return x.util.sizeToSquarishShape(n)}function si(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function ai(t,e){const n=t;let r,s,a,i,o,u,l,c,h,d;return 2===Object(x.env)().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,l=4,c=1,h=n.HALF_FLOAT,d=n.FLOAT):(r=t.RGBA,s=t.RGBA,a=t.RGBA,i=n.RGBA,o=t.RGBA,l=4,c=4,h=null!=e?e.HALF_FLOAT_OES:null,d=t.FLOAT),u=t.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function ii(t,e){const n=e();return Object(x.env)().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),n}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(Qa||(Qa={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(ti||(ti={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(ei||(ei={}));function oi(t){return!!(Object(x.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function ui(t,e){return bi(t,()=>t.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function li(t,e){const n=bi(t,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(ii(t,()=>t.shaderSource(n,e)),ii(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=ci.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const r=+n[1],s=t.split("\n"),a=s.length.toString().length+2,i=s.map((t,e)=>x.util.rightPad((e+1).toString(),a)+t);let o=0;for(let t=0;t<i.length;t++)o=Math.max(i[t].length,o);const u=i.slice(0,r-1),l=i.slice(r-1,r),c=i.slice(r);console.log(u.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+x.util.rightPad(l[0],o),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const ci=/ERROR: [0-9]+:([0-9]+):/g;function hi(t,e){if(ii(t,()=>t.validateProgram(e)),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function di(t,e,n,r,s,a,i){const o=t.getAttribLocation(e,n);return-1!==o&&(ii(t,()=>t.bindBuffer(t.ARRAY_BUFFER,r)),ii(t,()=>t.vertexAttribPointer(o,s,t.FLOAT,!1,a,i)),ii(t,()=>t.enableVertexAttribArray(o)),!0)}function pi(t,e,n,r){ii(t,()=>function(t,e,n){yi(t,n),ii(t,()=>t.activeTexture(t.TEXTURE0+n)),ii(t,()=>t.bindTexture(t.TEXTURE_2D,e))}(t,e,r)),ii(t,()=>t.uniform1i(n,r))}function fi(t,e,n){ii(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),ii(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0))}function mi(t,e){ii(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,e)),ii(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function gi(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function bi(t,e,n){const r=ii(t,()=>e());if(null==r)throw new Error(n);return r}function yi(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function xi(t,e=2){return x.util.sizeFromShape(t.slice(0,t.length-e))}function wi(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function vi(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[xi(t),...wi(t)]),e}function Oi(t){return t%2==0}function ki(t,e){if(t=t.slice(-2),e=e.slice(-2),x.util.arraysEqual(t,e))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(Oi(n)&&Oi(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Oi(t[0])&&Oi(e[0])}let Si,Ci;function Ni(t,e){return null!=t.getExtension(e)}function Ii(t){try{if(null!=Za(t))return!0}catch(t){return!1}return!1}function Ai(t){if(0===t)return!1;const e=Za(t);if(1!==t){if(Ni(e,"EXT_color_buffer_float"))return Ei(e);const t="EXT_color_buffer_half_float";if(Ni(e,t)){const n=e.getExtension(t);return function(t,e){const n=ai(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);const s=1,a=1;t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,s,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,i),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(i),o}(e,n)}return!1}if(!Ni(e,"OES_texture_float"))return!1;if(!Ni(e,"WEBGL_color_buffer_float"))return!1;return Ei(e)}function Ei(t){const e=ai(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),s}const Ti=Object(x.env)();Ti.registerFlag("HAS_WEBGL",()=>Ti.getNumber("WEBGL_VERSION")>0),Ti.registerFlag("WEBGL_VERSION",()=>Ii(2)?2:Ii(1)?1:0),Ti.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),Ti.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===Ti.get("WEBGL_VERSION")),Ti.registerFlag("WEBGL_CPU_FORWARD",()=>!0),Ti.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),Ti.registerFlag("WEBGL_PACK",()=>Ti.getBool("HAS_WEBGL")),Ti.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Ti.getBool("WEBGL_PACK")),Ti.registerFlag("WEBGL_PACK_CLIP",()=>Ti.getBool("WEBGL_PACK")),Ti.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),Ti.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Ti.getBool("WEBGL_PACK")),Ti.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Ti.getBool("WEBGL_PACK")),Ti.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Ti.getBool("WEBGL_PACK")),Ti.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Ti.getBool("WEBGL_PACK")),Ti.registerFlag("WEBGL_PACK_REDUCE",()=>Ti.getBool("WEBGL_PACK")),Ti.registerFlag("WEBGL_LAZILY_UNPACK",()=>Ti.getBool("WEBGL_PACK")),Ti.registerFlag("WEBGL_CONV_IM2COL",()=>Ti.getBool("WEBGL_PACK")),Ti.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(t){if(null==Si){const e=Za(t);Si=e.getParameter(e.MAX_TEXTURE_SIZE)}return Si}(Ti.getNumber("WEBGL_VERSION"))),Ti.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(t){if(null==Ci){const e=Za(t);Ci=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Ci)}(Ti.getNumber("WEBGL_VERSION"))),Ti.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=Ti.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=Za(t);return e=Ni(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:Ni(n,"EXT_disjoint_timer_query")?1:0,e}(t)}),Ti.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Ti.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!x.device_util.isMobile()),Ti.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(t){if(0===t)return!1;const e=Za(t);if(1===t){if(!Ni(e,"OES_texture_float"))return!1}else if(!Ni(e,"EXT_color_buffer_float"))return!1;return Ei(e)}(Ti.getNumber("WEBGL_VERSION"))),Ti.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!Ti.getBool("WEBGL_FORCE_F16_TEXTURES")&&Ti.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),Ti.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>Ai(Ti.getNumber("WEBGL_VERSION"))),Ti.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(t=Ti.getNumber("WEBGL_VERSION"))&&null!=Za(t).fenceSync;var t}),Ti.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Ti.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),Ti.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)});class Ri{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`float v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class $i{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class ji{constructor(t,e,n){this.variableNames=["A"];const r=t.windowSize,s=t.batchSize,a=t.inSize,i=Math.ceil(a/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];const o="max"===e?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${u};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function Di(t,e){return["x","y","z","w","u","v"].slice(0,e).map(e=>`${t}.${e}`)}function _i(t,e){return 1===e?[t]:Di(t,e)}function Fi(){let t,e,n,r,s,a,i,o,u,l;return 2===Object(x.env)().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:u,defineRound:l}}function Mi(t,e,n="index"){const r=x.util.computeStrides(e);return r.map((e,s)=>`${`int ${t[s]} = ${n} / ${e}`}; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * ${e}`:`index -= ${t[s]} * ${e}`};`).join("")}function zi(t){const e=x.util.computeStrides(t).map(t=>t.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const Li="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Bi}=x.backend_util;function Pi(t,e,n,r){const s=[];t.forEach(t=>{const e=x.util.sizeFromShape(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?s.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(s.push(`uniform sampler2D ${t.name};`),s.push(`uniform int offset${t.name};`))});const a=s.join("\n"),i=t.map(t=>function(t,e,n=!1){let r="";r+=n?Vi(t):Wi(t);const s=t.shapeInfo.logicalShape,a=e.logicalShape;s.length<=a.length&&(r+=n?function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,o=Bi(t.shapeInfo.logicalShape,e.logicalShape),u=Ji(i),l=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map(t=>`coords.${h[t+l]} = 0;`).join("\n");let d="";d=i<2&&a>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+h[e+l]).join(", ");let p="return outputValue;";const f=1===x.util.sizeFromShape(t.shapeInfo.logicalShape),m=1===x.util.sizeFromShape(e.logicalShape);if(1!==a||f||m){if(f&&!m)p=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const t=a-2,e=a-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?p="return vec4(outputValue.x);":o.indexOf(t)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(e)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${d});\n      ${p}\n    }\n  `}(t,e):function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.texShape,i=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===u&&null==t.shapeInfo.flatOffset&&x.util.arraysEqual(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=Ji(u),c=Bi(t.shapeInfo.logicalShape,e.logicalShape),h=u-o;let d;const p=["x","y","z","w","u","v"];d=0===o?"":u<2&&c.length>=1?"coords = 0;":c.map(t=>`coords.${p[t+h]} = 0;`).join("\n");let f="";f=u<2&&o>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+p[e+h]).join(", ");return`\n    float ${s}() {\n      ${l} coords = getOutputCoords();\n      ${d}\n      return get${r}(${f});\n    }\n  `}(t,e));return r}(t,e,r)).join("\n"),o=e.texShape,u=Fi(),l=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,h,d=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Ui}\n    ${Gi}\n    ${Hi}\n  `}(u);e.isPacked?(c=function(t,e){switch(t.length){case 0:return Ki();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(x.util.arraysEqual(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),s=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),s=r*Math.ceil(t[t.length-2]/2);let a=s,i="",o="b, r, c";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],i=`\n      int b${e} = index / ${a};\n      index -= b${e} * ${a};\n    `+i,o=`b${e}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(u)):(c=function(t,e){switch(t.length){case 0:return Ki();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(x.util.arraysEqual(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=Mi(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=Mi(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=Mi(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=Mi(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),r&&(d+=qi);return[d,l,h,a,c,i,n].join("\n")}function Wi(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,s]=t.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[a,i]=t.shapeInfo.texShape,o=Xi(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${Yi(t)}\n      }\n    `;const r=t.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=Xi(e);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape;if(null!=s&&x.util.arraysEqual(e,s)){const t=s[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${s[1]}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=x.util.squeezeShape(e),o=a;if(o.length<e.length){const e=["row","col"];return`\n      ${Wi(Zi(t,o))}\n      float ${r}(int row, int col) {\n        return ${r}(${Qi(e,i)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Yi(t)}\n      }\n    `;const u=s[0],l=s[1],c=Xi(n);if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${l}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${u}, ${l}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[1]*e[2],a=e[2],{newShape:i,keptDims:o}=x.util.squeezeShape(e),u=i;if(u.length<e.length){const e=["row","col","depth"];return`\n        ${Wi(Zi(t,u))}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Qi(e,o)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${a}, 1)));\n        ${Yi(t)}\n      }\n    `;const l=t.shapeInfo.texShape,c=l[0],h=l[1],d=t.shapeInfo.flatOffset;if(h===s&&null==d)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==d)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const p=Xi(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${a} + depth + ${p};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[3],a=e[2]*s,i=e[1]*a,{newShape:o,keptDims:u}=x.util.squeezeShape(e);if(o.length<e.length){const e=["row","col","depth","depth2"];return`\n      ${Wi(Zi(t,o))}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Qi(e,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${s}, 1)));\n        ${Yi(t)}\n      }\n    `;const l=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,h=c[0],d=c[1];if(d===i&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const p=Xi(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${p});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[4],a=e[3]*s,i=e[2]*a,o=e[1]*i,{newShape:u,keptDims:l}=x.util.squeezeShape(e);if(u.length<e.length){const e=["row","col","depth","depth2","depth3"];return`\n      ${Wi(Zi(t,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${Qi(e,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${Yi(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,d=h[0],p=h[1];if(p===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Xi(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=x.util.squeezeShape(e);if(s.length<e.length){const e=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Wi(Zi(t,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${Qi(e,a)});\n      }\n    `}const i=e[5],o=e[4]*i,u=e[3]*o,l=e[2]*u,c=e[1]*l;if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${Yi(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=Xi(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function Vi(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=Fi();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Fi();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=s[0],i=s[1],o=Fi();if(null!=s&&x.util.arraysEqual(e,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],l=Math.ceil(e[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${l}, ${u[0]}, ${u[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===e[0]){const n=[1,2],s=["b","row","col"];return`\n        ${Vi(Zi(t,e.slice(1)))}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Qi(s,n)});\n        }\n      `}const i=a[0],o=a[1],u=Math.ceil(e[2]/2),l=u*Math.ceil(e[1]/2),c=Fi();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${l}, ${u}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],u=i[1],l=Math.ceil(e[n-1]/2);let c=l*Math.ceil(e[n-2]/2),h="int b, int row, int col",d=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,c*=e[n-t-1],d=`b${t} * ${c} + `+d;const p=Fi();return`\n    vec4 ${s}(${h}) {\n      int index = ${d};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${o});\n      return ${p.texture2D}(${r}, uv);\n    }\n  `}(t)}}const Ui="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Gi="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Hi="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",qi="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Ki(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Xi(t){return"offset"+t}function Yi(t){const e=t.name,n=x.util.sizeFromShape(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function Ji(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function Zi(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function Qi(t,e){return e.map(e=>t[e]).join(", ")}class to{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,x.util.assert(t.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const s=t[t.length-1],a=Math.ceil(s/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,u=Ji(o),l=_i("coords",o);let c,h;if(1===a){h=o+1;const t=Ji(h);c=`\n        ${t} sourceLocR = ${t}(${l.join()}, 0);\n        ++${l[o-1]};\n        ${t} sourceLocG = ${t}(${l.join()}, 0);\n        ++${l[o-2]};\n        ${t} sourceLocA = ${t}(${l.join()}, 0);\n        --${l[o-1]};\n        ${t} sourceLocB = ${t}(${l.join()}, 0);\n        --${l[o-2]};`}else h=o,c=`\n        ${u} sourceLocR = coords;\n        ++${l[o-1]};\n        ${u} sourceLocG = coords;\n        ++${l[o-2]};\n        ${u} sourceLocA = coords;\n        --${l[o-1]};\n        ${u} sourceLocB = coords;\n        --${l[o-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map(t=>"int "+t),m=_i("sourceLocR",h-1).concat("inIdx.r"),g=_i("sourceLocG",h-1).concat("inIdx.g"),b=_i("sourceLocB",h-1).concat("inIdx.b"),y=_i("sourceLocA",h-1).concat("inIdx.a"),w="max"===n?"greaterThan":"lessThan",v=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${y.join()})));`,O=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`,k=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${l[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${O};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${v}\n          vec4 candidate = ${O};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class eo{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterHeight,u=t.effectiveFilterWidth,l=o-1-t.padInfo.top,c=u-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class no{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,u=t.dilationHeight,l=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=c-1-t.padInfo.front,f=h-1-t.padInfo.top,m=d-1-t.padInfo.left,g=1/(e*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ro{constructor(t,e,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],x.backend_util.assertAndGetBroadcastShape(t,e),x.backend_util.assertAndGetBroadcastShape(t,n);let i="0.0";null!=r&&(x.backend_util.assertAndGetBroadcastShape(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(x.backend_util.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class so{constructor(t,e,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],x.backend_util.assertAndGetBroadcastShape(t,e),x.backend_util.assertAndGetBroadcastShape(t,n);let i="vec4(0.0)";null!=r&&(x.backend_util.assertAndGetBroadcastShape(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(x.backend_util.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const ao="return areal * breal - aimag * bimag;",io="return areal * bimag + aimag * breal;";class oo{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=x.backend_util.assertAndGetBroadcastShape(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const uo="return a + b;",lo="return a - b;",co="return a * b;",ho="return (a < 0.) ? b * a : a;";class po{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=x.backend_util.assertAndGetBroadcastShape(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const fo="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class mo{constructor(t,e,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=x.backend_util.assertAndGetBroadcastShape(e,n);const s=this.outputShape.length;let a="";if(r)if(0===s||1===x.util.sizeFromShape(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${Ji(s)} coords = getOutputCoords();\n        `,1===s)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=_i("coords",s);a+=`\n            bool nextRowOutOfBounds =\n              (${t[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${t[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class go{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class bo{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class yo{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class xo{constructor(t){this.outputShape=[],this.outputShape=x.backend_util.computeOutShape(t,1),this.variableNames=t.map((t,e)=>"T"+e);const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const r=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`)}const r=e.length,s=e[e.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class wo{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=x.backend_util.computeOutShape(t,e);const n=this.outputShape,r=n.length,s=Ji(r),a=_i("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((t,e)=>"T"+e);const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const u=i[e],l=i.slice(-2),c=i.join();let h=`if (${u} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\n        if (${u} < ${o[t]}  && ${u} >= ${o[t-1]}) {\n          return getChannel(\n            getT${t}(${vo(i,u,e)}),\n            vec2(${vo(l,u,e)}));\n        }`}const d=o.length,p=o[o.length-1];h+=`\n        return getChannel(\n          getT${d}(${vo(i,u,p)}),\n          vec2(${vo(l,u,p)}));`,this.userCode=`\n      float getValue(${i.map(t=>"int "+t)}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function vo(t,e,n){const r=t.indexOf(e);return t.map((t,e)=>e===r?`${t} - ${n}`:t).join()}class Oo{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ko{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class So{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${s};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Co{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=e-1-t.padInfo.front,u=n-1-t.padInfo.top,l=r-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class No{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Io{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ao{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,u=t.dilationHeight,l=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4,f="channelsLast"===t.dataFormat,m=f?1:2,g=f?2:3,b=f?3:1;let y="",x="";n&&(y=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${l};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===p}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===p}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===p}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class Eo{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,u=t.dilationHeight,l=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,d=t.filterWidth,p=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class To{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,u=t.strideHeight,l=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=t.outChannels/t.inChannels;let m="",g="";n&&(m=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${g}\n        setOutput(result);\n      }\n    `}}class Ro{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,u=t.strideHeight,l=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=p;let m="int xR; int xC; int xCOffset;";for(let t=0;t<d;t++)for(let e=0;e<p;e++)m+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<d;t++)for(let e=0;e<f;e++){const n=2*e;if(m+=`\n          xR = xRCorner + ${t*c};\n          xC = xCCorner + ${n*h};\n        `,1===l){if(n<p&&(m+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${s} && xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<p)){const e=o%2==0?x.util.nearestLargerEven(h):h;h%2==0&&o%2==1||h%2!=0&&o%2!=1?(m+=`\n                  xCOffset = xC + ${o%2} + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(m+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${s} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):m+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<p&&(m+=`\n              if(xR >= 0 && xR < ${s}) {\n            `,o%2==1?(m+=`\n                xCOffset = xC + 1 - ${l};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<p&&(m+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${l};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(m+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${l};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<p&&(m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),m+="}");n<p&&(m+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<p&&(m+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<d;t++)for(let e=0;e<p;e++)m+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let g="",b="";n&&(g=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,b="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${y}\n        ${b}\n        setOutput(result);\n      }\n    `}}class $o{constructor(t,e,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=t,[l]=e,[c,h]=n;this.outputShape=[l,c,h,u];const d="bilinear"===r?1:0,[p,f]=[i-1+".0",o-1+".0"],[m,g,b]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+p],[y,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${y});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${b};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class jo{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,s=e?"0.0":`getX(${Do(r,"coords")})`,a=t[t.length-1];let i="",o="";e?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?"end + pow2 < "+a:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${Ji(r)} coords = getOutputCoords();\n        int end = ${_o(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${_o(r,"coords")} = idx;\n          val += getX(${Do(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function Do(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function _o(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class Fo{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Qa.DENSE;const e=ri(t),n=Fi();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${Mi(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class Mo{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Qa.DENSE;const e=ri(t),n=Fi();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${Mi(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class zo{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class Lo{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class Bo{constructor(t){this.variableNames=["A"],this.outTexUsage=ti.DOWNLOAD;const e=Fi();this.outputShape=t,this.userCode=`\n      ${Li}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class Po{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=ti.DOWNLOAD;const e=Fi();this.outputShape=t,this.userCode=`\n      ${Li}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class Wo{constructor(t,e,n=!1){this.variableNames=["A"];const r=Fi(),[s,a]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${zi(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class Vo{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=Fi(),[s,a]=e;this.outputShape=t;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const o=2*e+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${zi(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}const Uo="return real * expR - imag * expI;",Go="return real * expI + imag * expR;";class Ho{constructor(t,e,n){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const s=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${t}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class qo{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class Ko{constructor(t,e,n){this.variableNames=["A","indices"];const r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;const s=Ji(this.rank),a=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let n=0;n<t.length;n++)n===e?s.push(`int(getIndices(${r[n]}))`):s.push(""+r[n]);return s.join()}(t,n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class Xo{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=Ji(e.length),s=Ji(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function Yo(t){const e=Fi();return function(t,e){const n=bi(t,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(ii(t,()=>t.shaderSource(n,e)),ii(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Jo(t){return function(t,e){const n=bi(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return ii(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),ii(t,()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Zo(t){return function(t,e){const n=bi(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return ii(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n)),ii(t,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Uint16Array([0,1,2,2,1,3]))}function Qo(t,e,n,r,s,a){!function(t,e){const n=Object(x.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0)throw new Error(`Requested texture size [${t}x${e}] is invalid.`);if(t>n||e>n)throw new Error(`Requested texture size [${t}x${e}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(e,n);const i=function(t){return bi(t,()=>t.createTexture(),"Unable to create WebGLTexture.")}(t),o=t.TEXTURE_2D;return ii(t,()=>t.bindTexture(o,i)),ii(t,()=>t.texParameteri(o,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),ii(t,()=>t.texParameteri(o,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),ii(t,()=>t.texParameteri(o,t.TEXTURE_MIN_FILTER,t.NEAREST)),ii(t,()=>t.texParameteri(o,t.TEXTURE_MAG_FILTER,t.NEAREST)),ii(t,()=>t.texImage2D(o,0,r,e,n,0,s,a,null)),ii(t,()=>t.bindTexture(t.TEXTURE_2D,null)),i}function tu(t){return t.internalFormatFloat}function eu(t){return t.internalFormatHalfFloat}function nu(t){return t.downloadTextureFormat}function ru(t){return t.internalFormatPackedFloat}function su(t){return t.internalFormatPackedHalfFloat}function au(t,e,n,r,s,a,i,o){const u=t,l=new Float32Array(function(t,e){const[n,r]=si(t,e);return n*r*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class iu{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=Object(x.env)().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){Ya[t]=e}(e,t)):this.gl=Za(e);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===Object(x.env)().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=ui(this.gl,t),Ni(this.gl,e))this.textureHalfFloatExtension=ui(this.gl,e);else if(Object(x.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Ni(this.gl,r))this.colorBufferHalfFloatExtension=ui(this.gl,r);else if(Object(x.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Ni(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Ni(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=Jo(this.gl),this.indexBuffer=Zo(this.gl),this.framebuffer=function(t){return bi(t,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=ai(this.gl,this.textureHalfFloatExtension)}get debug(){return Object(x.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;ii(t,()=>t.finish()),ii(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),ii(t,()=>t.deleteFramebuffer(this.framebuffer)),ii(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),ii(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),ii(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=ni(e,n);return Qo(t,s,a,tu(r),r.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=ni(e,n);return Qo(t,s,a,eu(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=ni(e,n);return Qo(t,s,a,nu(r),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){ii(t,()=>t.bindTexture(t.TEXTURE_2D,e)),n.data instanceof Uint8Array?ii(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data)):ii(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n)),ii(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,s,a){let i,o,u;ii(t,()=>t.bindTexture(t.TEXTURE_2D,e)),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=t.UNSIGNED_BYTE,u=t.RGBA):(i=new Float32Array(n*r*4),o=t.FLOAT,u=a.internalFormatPackedFloat),i.set(s),ii(t,()=>t.texImage2D(t.TEXTURE_2D,0,u,n,r,0,t.RGBA,o,i)),ii(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=si(e,n);return Qo(t,s,a,su(r),t.RGBA,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=si(e,n);return Qo(t,s,a,ru(r),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(mi(this.gl,this.framebuffer),this.outputTexture=null),ii(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,r){const[s,a]=ni(e,n),i=new Uint8Array(e*n*4);return ii(t,()=>t.readPixels(0,0,s,a,r.downloadTextureFormat,t.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,n,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,n,r,s,a){return au(this.gl,t,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r){const s=t.createBuffer();ii(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,s));const a=16*e*n;return ii(t,()=>t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ)),ii(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0)),ii(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),s}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(Object(x.env)().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=r.clientWaitSync(s,0,0);return t===r.ALREADY_SIGNALED||t===r.CONDITION_SATISFIED},e=s}else Object(x.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,Object(x.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n){const r=new Float32Array(e*n*4);return ii(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,r)),r}(this.gl,e,n))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=li(e,t),r=Yo(e),s=function(t){return bi(t,()=>t.createProgram(),"Unable to create WebGLProgram.")}(e);return ii(e,()=>e.attachShader(s,r)),ii(e,()=>e.attachShader(s,n)),function(t,e){if(ii(t,()=>t.linkProgram(e)),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,s),this.debug&&hi(e,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(t,e,n){return ii(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),di(t,e,"clipSpacePos",n,3,20,0)&&di(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),s}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&ii(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&hi(this.gl,this.program),ii(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return bi(t,()=>t.getUniformLocation(e,n),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),ii(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),pi(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,s]=si(e,n);this.setOutputMatrixTextureDriver(t,r,s)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&hi(this.gl,this.program),gi(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),ii(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),ii(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=ui(this.gl,2===Object(x.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Object(x.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===Object(x.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await x.util.repeatedTry(()=>this.disposed||this.isQueryAvailable(t,Object(x.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,Object(x.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||x.util.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),fi(this.gl,t,this.framebuffer),this.debug&&gi(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(fi(this.gl,this.outputTexture,this.framebuffer),this.debug&&gi(this.gl)):mi(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;fi(r,t,this.framebuffer),this.debug&&gi(r),this.outputTexture=t,ii(r,()=>r.viewport(0,0,e,n)),ii(r,()=>r.scissor(0,0,e,n))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),ii(this.gl,()=>this.gl.scissor(t,e,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function ou(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach((t,n)=>{const r=t.logicalShape,s=e[n],a=s.shape;if(!x.util.arraysEqual(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(t.isUniform&&s.isUniform)return;const i=t.texShape,o=s.isUniform?null:s.texData.texShape;if(!x.util.arraysEqual(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}class uu{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:h}=n,{left:d,top:p}=o,f=s*r,m=Fi(),g="channelsLast"===h,b=g?0:1,y=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${i} - ${p};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${e[b]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${a}. - ${d}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${e[y]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class lu{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let o;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class cu{constructor(t,e,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class hu{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let o;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class du{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,s=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=s-1-t.padInfo.top,o=a-1-t.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class pu{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterDepth,u=t.effectiveFilterHeight,l=t.effectiveFilterWidth,c=o-1-t.padInfo.front,h=u-1-t.padInfo.top,d=l-1-t.padInfo.left,p=o*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class fu{constructor(t,e,n=!1,r=!1,s=!1,a=null,i=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const o=n?t[1]:t[2],u=Math.ceil(o/2),l=n?"i * 2, rc.y":"rc.y, i * 2",c=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let p="",f="";a&&(p=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,f="result = activation(result);");const m=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${p}\n\n      const float sharedDimension = ${u}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${u}; i++) {\n          vec4 a = getMatrixA(rc.x, ${l});\n          vec4 b = getMatrixB(rc.x, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${d[0]});\n          result += (${h[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${m}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `}}class mu{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class gu{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class bu{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=_i("rc",e),r=Ji(e),s=function(t,e,n){if(1===t)return"rc > "+e[0];let r="";for(let s=t-2;s<t;s++)r+=`${n[s]} >= ${e[s]}`,s<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<t;n++)a=e[e.length-1-n]+","+a;n.push(a)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class yu{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=Ji(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class xu{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=Ji(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=_i("rc",r),u=_i("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[s+" rc = outputLoc;",`${o[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${l}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let t=0,e=1===r?2:4;t<e;t++)p+=`\n        ${h[t]}\n        if (${d}) {\n          result[${t}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${t}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;p+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}class wu{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,u=t.dilationHeight,l=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.top,p=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,g=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let b="0.0";if(f||(b="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let y=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(y="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${y});\n      }\n    `}}class vu{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,o=t.strideHeight,u=t.strideWidth,l=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,d=t.effectiveFilterDepth,p=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,b=t.padInfo.left;this.outputShape=t.outShape;const y="avg"===e;let x="0.0";if(y||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${b});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(a/4),O=a%4,k=`\n      if (${y}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${b});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${k}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===O}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${k}\n            } else if (${2===O}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${k}\n            } else if (${3===O}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${k}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class Ou{constructor(t,e){this.variableNames=["x"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=Math.ceil(s/n);this.outputShape=[r,a];let i="0.0",o="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",o="min"):"max"===e&&(i="-1.0 / 1e-20",o="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,d="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}class ku{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${Mi(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${zi(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Su{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class Cu{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Nu{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]},\n          ${u[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class Iu{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class Au{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class Eu{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),s=Ji(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class Tu{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=_i("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=Ji(n);function o(n){const r=t.map((r,s)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:""+r[n]}(s,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(r.slice())};\n          if(${s}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class Ru{constructor(t,e,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=Ji(s.length),u=Ji(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const d=`getUpdates(${h})`,p=e>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${p};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class $u{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=t.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class ju{constructor(t,e,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<e.length;r++)i.push(""+n[r]),r<t&&a.push(""+n[r]);r=a.join(),s=i.join()}const a=Ji(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}class Du{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=Ji(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return _u.slice(0,t).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let s;s=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((t,e)=>`sourceLoc.${_u[e]} = start[${e}] + coords.${_u[e]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const _u=["x","y","z","w","u","v"];class Fu{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=Ji(this.rank),n=_i("coords",this.rank),r=_i("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((t,e)=>`start[${e}]`).join()});`:t.map((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class Mu{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=Ji(n.length),a=Ji(n.length);let i="";if(1===r)i="coords * strides + begin";else{let t=0;i=n.map((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${s} begin = ${s}(${t});\n      ${s} strides = ${s}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class zu{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=Bu(e,n),s=Pu(t,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=Lu(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const t=this.freeTextures[s].shift();return this.usedTextures[s].push(t),t}let i;return r===ei.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===ei.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===ei.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===ei.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===ei.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,n,r){if(null==this.freeTextures)return;const s=Bu(n,r),a=Pu(e,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=Lu(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=Object(x.env)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=i):(this.freeTextures[a].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],l=u.indexOf(t);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});for(const t in this.usedTextures)this.usedTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Lu(t,e,n,r,s){const a=function(t,e){switch(t){case ei.PACKED_2X2_FLOAT32:return ru(e);case ei.PACKED_2X2_FLOAT16:return su(e);case ei.UNPACKED_FLOAT32:return tu(e);case ei.UNPACKED_FLOAT16:return eu(e);case ei.PACKED_4X1_UNSIGNED_BYTE:return nu(e);default:throw new Error("Unknown physical texture type "+t)}}(e,r);let i;if(s){const[e,n]=si(t[0],t[1]);i=e*n}else{const[e,n]=ni(t[0],t[1]);i=e*n}return i*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error("Unknown internal format "+e)}(n,a)}function Bu(t,e){if(t===ti.UPLOAD)return ei.PACKED_2X2_FLOAT32;if(t===ti.RENDER||null==t)return function(t){return Object(x.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?ei.PACKED_2X2_FLOAT32:ei.UNPACKED_FLOAT32:t?ei.PACKED_2X2_FLOAT16:ei.UNPACKED_FLOAT16}(e);if(t===ti.DOWNLOAD||t===ti.PIXELS)return ei.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function Pu(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class Wu{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const r=Ji(this.rank),s=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let e=0;e<t.length;e++)r.push(`imod(${n[e]}, ${t[e]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class Vu{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Uu="return abs(x);",Gu="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",Hu="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",qu="return (x >= 0.0) ? x : (exp(x) - 1.0);",Ku=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${x.backend_util.SELU_SCALEALPHA};\n  float scale = ${x.backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;const Xu="return -x;",Yu="return ceil(x);",Ju="return floor(x);",Zu="return exp(x);",Qu="return exp(x) - 1.0;",tl=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${x.backend_util.ERF_P};\n  float a1 = ${x.backend_util.ERF_A1};\n  float a2 = ${x.backend_util.ERF_A2};\n  float a3 = ${x.backend_util.ERF_A3};\n  float a4 = ${x.backend_util.ERF_A4};\n  float a5 = ${x.backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`,el="return x;",nl="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",rl="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",sl="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class al{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class il{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=_i("rc",e),r=Ji(e),s=function(t,e){if(1===t)return"rc";let n="";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const{segment_util:ol}=x.backend_util,ul=x.kernel_impls.split,ll=x.kernel_impls.tile,cl=x.kernel_impls.topkImpl,hl=x.kernel_impls.whereImpl,dl={};function pl(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?nl:Gu;if("elu"===t)return e?sl:qu;if("relu6"===t)return e?rl:Hu;if("prelu"===t)return e?fo:ho;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class fl extends x.KernelBackend{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!Object(x.env)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=Za(Object(x.env)().getNumber("WEBGL_VERSION"));this.binaryCache=((e=Object(x.env)().getNumber("WEBGL_VERSION"))in dl||(dl[e]={}),dl[e]),this.gpgpu=new iu(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new zu(this.gpgpu),this.numMBBeforeWarning=null==Object(x.env)().global.screen?1024:Object(x.env)().global.screen.height*Object(x.env)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new x.DataStorage(this,Object(x.engine)())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if((Object(x.env)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Object(x.env)().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:ti.UPLOAD}),r}move(t,e,n,r){if(Object(x.env)().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:r,values:e,usage:ti.UPLOAD})}readSync(t){const e=this.texData.get(t),{values:n,dtype:r,complexTensors:s,slice:a,shape:i,isPacked:o}=e;if(null!=a){let e;e=o?new al(i,el):new Vu(i,el);const n=this.runWebGLProgram(e,[{dataId:t,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=x.util.now()),"complex64"===r){const t=s.real.dataSync(),e=s.imag.dataSync();c=x.backend_util.mergeRealAndImagArrays(t,e)}else c=this.getValuesFromTexture(t);return u&&(this.downloadWaitMs+=x.util.now()-l),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise(t=>e.push(t))}const e=this.texData.get(t),{values:n,shape:r,slice:s,dtype:a,complexTensors:i,isPacked:o}=e;if(null!=s){let e;e=o?new al(r,el):new Vu(r,el);const n=this.runWebGLProgram(e,[{dataId:t,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(t);if(!Object(x.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Object(x.env)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==a&&Object(x.env)().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(t);const e=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(e.texture,...ri(r))}if(this.pendingRead.set(t,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const t=await Promise.all([i.real.data(),i.imag.data()]),e=t[0],n=t[1];l=x.backend_util.mergeRealAndImagArrays(e,n)}else if(null==c)l=this.getValuesFromTexture(t);else{const t=x.util.sizeFromShape(r);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,t)}null!=u&&this.disposeData(u.dataId);const h=this.convertAndCacheOnCPU(t,l),d=this.pendingRead.get(t);return this.pendingRead.delete(t),d.forEach(t=>t(h)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),h}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!oi(n)){if(Object(x.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:r}=this.texData.get(t),s=x.util.sizeFromShape(e);if(Object(x.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...ri(e)).subarray(0,s);return this.disposeData(n.dataId),a}const a=Object(x.env)().getBool("WEBGL_PACK")&&!0===r,i=a?vi(e):e,o=a?new Po(i):new Bo(i),u=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:t}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture,l.texShape[0],l.texShape[1]).subarray(0,s);return this.disposeData(u.dataId),c}async time(t){const e=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t();const s=x.util.flatten(this.activeTimers.map(t=>t.query)).filter(t=>null!=t),a=x.util.flatten(this.activeTimers.map(t=>t.name)).filter(t=>null!=t);this.activeTimers=e,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(Object(x.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(s);i.kernelMs=x.util.sum(t),i.getExtraProfileInfo=()=>t.map((t,e)=>({name:a[e],ms:t})).map(t=>`${t.name}: ${t.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Object(x.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:x.util.now(),endMs:null}}endTimer(t){return Object(x.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=x.util.now(),t)}async getQueryTime(t){if(Object(x.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;this.releaseGPUData(t);const{complexTensors:e}=this.texData.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(t),o=i&&i.origDataId||t,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,s,a)));const l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return Object(x.env)().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Object(x.engine)().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||Object(x.env)().getBool("IS_TEST")||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&t.every(t=>null==this.texData.get(t.dataId).texture&&x.util.sizeFromShape(t.shape)<e)}getGPGPUContext(){return this.gpgpu}complex(t,e){const n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Object(x.engine)().keep(t.clone()),imag:Object(x.engine)().keep(e.clone())},n}real(t){return this.texData.get(t.dataId).complexTensors.real.clone()}imag(t){return this.texData.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===x.util.sizeFromShape(n))return Object(x.tensor)([],n,t.dtype);const{isPacked:r}=this.texData.get(t.dataId),s=x.slice_util.isSliceContinous(t.shape,e,n);if(r||!s){const r=Object(x.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Fu(n):new Du(n),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[t],null,s)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)}shallowSlice(t,e,n){const r=this.texData.get(t.dataId),s=this.makeOutput(n,t.dtype),a=this.texData.get(s.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;let i=x.slice_util.computeFlatOffset(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};const o=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,o+1),s}stridedSlice(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);const s=x.slice_util.computeOutShape(e,n,r);if(s.some(t=>0===t))return Object(x.tensor)([],s);const a=new Mu(e,r,s);return this.compileAndRun(a,[t])}reverse(t,e){const n=Object(x.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Tu(t.shape,e):new Eu(t.shape,e);return this.compileAndRun(n,[t])}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>Object(x.real)(t)),r=t.map(t=>Object(x.imag)(t));return Object(x.complex)(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>Object(x.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(t.length/2),r=this.concat(t.slice(0,n),e),s=this.concat(t.slice(n),e);return this.concat([r,s],e)}if(Object(x.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){const n=new wo(t.map(t=>t.shape),e);return this.compileAndRun(n,t)}const n=x.backend_util.computeOutShape(t.map(t=>t.shape),e),r=t.map(t=>t.as2D(-1,x.util.sizeFromShape(t.shape.slice(e)))),s=new xo(r.map(t=>t.shape));return this.compileAndRun(s,r).reshape(n)}neg(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(Object(x.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Xu,t.dtype);const e=new Vu(t.shape,Xu);return this.compileAndRun(e,[t])}batchMatMul(t,e,n,r){const s=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],[o,,]=t.shape;if((1===s||1===a)&&i>1e3){n&&(t=Object(x.transpose)(t,[0,2,1])),r&&(e=Object(x.transpose)(e,[0,2,1]));const s=1===a?t:t.as3D(o,i,1),u=1===a?2:1,l=1===a?e.as3D(o,1,i):e;return this.multiply(s,l).sum(u,!0)}const u=Object(x.upcastType)(t.dtype,e.dtype),l=new fu(t.shape,[o,s,a],n,r);return this.compileAndRun(l,[t,e],u)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){const o=n?t.shape[2]:t.shape[1],u=r?e.shape[1]:e.shape[2],[l,,]=t.shape,c=Object(x.upcastType)(t.dtype,e.dtype),h=null!=s,d=null!=i,p=a?pl(a,!0):null,f=new fu(t.shape,[l,o,u],n,r,h,p,d),m=[t,e];return s&&m.push(s),i&&m.push(i),this.compileAndRun(f,m,c)}multiply(t,e){if("complex64"===t.dtype){const n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),s=new oo(ao,t.shape,e.shape),a=new oo(io,t.shape,e.shape),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],o=this.compileAndRun(s,i),u=this.compileAndRun(a,i),l=this.complex(o,u);return o.dispose(),u.dispose(),l}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,co,t.dtype);const n=new po(co,t.shape,e.shape);return this.compileAndRun(n,[t,e],t.dtype)}batchNorm(t,e,n,r,s,a){const i=[t,e,n];let o=null;null!=r&&(o=r.shape,i.push(r));let u=null;if(null!=s&&(u=s.shape,i.push(s)),Object(x.env)().getBool("WEBGL_PACK_NORMALIZATION")){const r=new so(t.shape,e.shape,n.shape,o,u,a);return this.compileAndRun(r,i)}const l=new ro(t.shape,e.shape,n.shape,o,u,a);return this.compileAndRun(l,i)}localResponseNormalization4D(t,e,n,r,s){const a=Object(x.env)().getBool("WEBGL_PACK_NORMALIZATION")?new hu(t.shape,e,n,r,s):new lu(t.shape,e,n,r,s);return this.compileAndRun(a,[t])}LRNGrad(t,e,n,r,s,a,i){const o=new cu(e.shape,r,s,a,i);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map(t=>x.util.decodeString(t)),r=Object(x.buffer)(t.shape,t.dtype,n);return ll(r,e)}const n=new Wu(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,n){const r=Object(x.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xu(t.shape,e,n):new yu(t.shape,e,n);return this.compileAndRun(r,[t])}gather(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);const r=new Ko(t.shape,e.size,n);return this.compileAndRun(r,[t,e])}batchToSpaceND(t,e,n){x.util.assert(t.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),s=x.backend_util.getReshaped(t.shape,e,r),a=x.backend_util.getPermuted(s.length,e.length),i=x.backend_util.getReshapedPermuted(t.shape,e,r),o=x.backend_util.getSliceBeginCoords(n,e.length),u=x.backend_util.getSliceSize(i,n,e.length);return Object(x.transpose)(t.reshape(s),a).reshape(i).slice(o,u)}spaceToBatchND(t,e,n){x.util.assert(t.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=x.backend_util.getReshaped(a.shape,e,r,!1),o=x.backend_util.getPermuted(i.length,e.length,!1),u=x.backend_util.getReshapedPermuted(a.shape,e,r,!1),l=Object(x.transpose)(a.reshape(i),o);return Object(x.reshape)(l,u)}reduce(t,e,n){const r=t.shape[0],s=t.shape[1],a=x.backend_util.computeOptimalWindowSize(s),i=new Ou({windowSize:a,inSize:s,batchSize:r},e),o=this.compileAndRun(i,[t],n);return 1===o.shape[1]?o:this.reduce(o,e,n)}argReduce(t,e,n=null){let r=t.shape[0],s=t.shape[1];null!=n&&(r=n.shape[0],s=n.shape[1]);const a=x.backend_util.computeOptimalWindowSize(s),i=new ji({windowSize:a,inSize:s,batchSize:r},e,null==n),o=[t];null!=n&&o.push(n);const u=this.compileAndRun(i,o,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)}argReducePacked(t,e,n=null){const r=null!=n?n.shape:t.shape,s=r[r.length-1],a=x.backend_util.computeOptimalWindowSize(s),i=new to(r,a,e,null==n),o=null==n?[t]:[t,n],u=this.compileAndRun(i,o,"int32");return u.rank===t.rank?this.argReducePacked(t,e,u):u}sum(t,e){x.backend_util.assertAxesAreInnerMostDims("sum",e,t.rank);const[n,r]=x.backend_util.computeOutAndReduceShapes(t.shape,e),s=x.util.sizeFromShape(r),a=t.as2D(-1,s),i=x.sumOutType(t.dtype);return this.reduce(a,"sum",i).reshape(n)}prod(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);const[n,r]=x.backend_util.computeOutAndReduceShapes(t.shape,e),s=x.util.sizeFromShape(r),a=t.as2D(-1,s),i=x.sumOutType(t.dtype);return this.reduce(a,"prod",i).reshape(n)}unsortedSegmentSum(t,e,n){let r=0;const s=x.backend_util.getAxesPermutation([r],t.rank);let a=t;null!=s&&(a=Object(x.transpose)(t,s),r=x.backend_util.getInnerMostAxes(1,t.rank)[0]);const i=ol.computeOutShape(a.shape,r,n),o=x.util.sizeFromShape([a.shape[r]]),u=a.as2D(-1,o),l=x.sumOutType(t.dtype);let c=this.segOpCompute(u,"unsortedSegmentSum",e,l,n).reshape(i);return null!=s&&(c=Object(x.transpose)(c,x.backend_util.getUndoAxesPermutation(s))),c}segOpCompute(t,e,n,r,s){const a=t.shape[0],i=t.shape[1],o=ol.segOpComputeOptimalWindowSize(i,s),u=new $u({windowSize:o,inSize:i,batchSize:a,numSegments:s},e),l=this.compileAndRun(u,[t,n],r);return l.shape[1]===s?l:(n=Object(x.range)(0,s).tile([i/o]),this.segOpCompute(l,e,n,r,s))}argMinMaxReduce(t,e,n){const r=[e];if(x.backend_util.assertAxesAreInnerMostDims("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!Object(x.env)().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,s]=x.backend_util.computeOutAndReduceShapes(t.shape,r),a=x.util.sizeFromShape(s),i=t.as2D(-1,a);return this.argReduce(i,n).reshape(e)}return this.argReducePacked(t,n)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,r){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=t.shape[e];let a=t;for(let e=0;e<=Math.ceil(Math.log2(s))-1;e++){const n=new jo(t.shape,!1,r),s=n.getCustomSetupFunc(e),i=a;a=this.compileAndRun(n,[a],a.dtype,s),i.dispose()}if(n){const e=new jo(t.shape,n,r),s=a;a=this.compileAndRun(e,[a]),s.dispose()}return a}equal(t,e){if(Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const n=new po("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}notEqual(t,e){if(Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");const n=new po("return float(a != b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}less(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const n=new po("return float(a < b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}lessEqual(t,e){if(Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new po("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greater(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const n=new po("return float(a > b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greaterEqual(t,e){if(Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new po("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalNot(t){const e=new Vu(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new po("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalOr(t,e){if(Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new po("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}select(t,e,n){const r=new ju(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],Object(x.upcastType)(e.dtype,n.dtype))}where(t){x.backend_util.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return hl(t.shape,e)}topk(t,e,n){const r=t.dataSync();return cl(r,t.shape,t.dtype,e,n)}min(t,e){x.backend_util.assertAxesAreInnerMostDims("min",e,t.rank);const[n,r]=x.backend_util.computeOutAndReduceShapes(t.shape,e),s=x.util.sizeFromShape(r),a=t.as2D(-1,s);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);const n=Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new mo("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new po("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}mod(t,e){const n=Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new mo("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new po("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}maximum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);const n=Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new mo("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new po("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}all(t,e){x.backend_util.assertAxesAreInnerMostDims("all",e,t.rank);const[n,r]=x.backend_util.computeOutAndReduceShapes(t.shape,e),s=x.util.sizeFromShape(r),a=t.as2D(-1,s);return this.reduce(a,"all",a.dtype).reshape(n)}any(t,e){x.backend_util.assertAxesAreInnerMostDims("any",e,t.rank);const[n,r]=x.backend_util.computeOutAndReduceShapes(t.shape,e),s=x.util.sizeFromShape(r),a=t.as2D(-1,s);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(t,e){const n="int32";if(Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",n);const r=new po("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}add(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,uo);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);const n=Object(x.upcastType)(t.dtype,e.dtype);if(Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,uo,n);const r=new po(uo,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}packedUnaryOp(t,e,n){const r=new al(t.shape,e);return this.compileAndRun(r,[t],n)}packedBinaryOp(t,e,n,r,s=!1){const a=new mo(n,t.shape,e.shape,s);return this.compileAndRun(a,[t,e],r)}complexSeparableBinaryOp(t,e,n){const r=this.texData.get(t.dataId),s=this.texData.get(e.dataId),[a,i]=[[r.complexTensors.real,s.complexTensors.real],[r.complexTensors.imag,s.complexTensors.imag]].map(r=>{const[s,a]=r,i=this.makeComplexComponentTensorInfo(t,s),o=this.makeComplexComponentTensorInfo(e,a),u=new po(n,t.shape,e.shape);return this.compileAndRun(u,[i,o],Object(x.upcastType)(s.dtype,a.dtype))}),o=this.complex(a,i);return a.dispose(),i.dispose(),o}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>Object(x.env)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}const e=t.map(t=>t.dtype).reduce((t,e)=>Object(x.upcastType)(t,e)),n=t.map(t=>t.shape),r=Object(x.env)().getBool("WEBGL_PACK")?new $i(t[0].shape,n):new Ri(t[0].shape,n);return this.compileAndRun(r,t,e)}subtract(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,lo);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);const n=Object(x.upcastType)(t.dtype,e.dtype);if(Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,lo,t.dtype);const r=new po(lo,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}pow(t,e){const n=Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new mo("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new po("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),r=Object(x.upcastType)(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)}ceil(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(Object(x.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Yu,t.dtype);const e=new Vu(t.shape,Yu);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(Object(x.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Ju,t.dtype);const e=new Vu(t.shape,Ju);return this.compileAndRun(e,[t])}sign(t){const e=new Vu(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new Vu(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new Vu(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new Vu(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new Vu(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(Object(x.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Zu,t.dtype);const e=new Vu(t.shape,Zu);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(Object(x.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Qu,t.dtype);const e=new Vu(t.shape,Qu);return this.compileAndRun(e,[t])}softmax(t,e){const n=x.util.parseAxisParam([e],t.shape),r=Object(x.max)(t,n),s=x.backend_util.expandShapeToKeepDim(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return Object(x.div)(i,o)}log(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(Object(x.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new Vu(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new Vu(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new Vu(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);const e=new Vu(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new Vu(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=Object(x.env)().getBool("WEBGL_PACK")?new al(t.shape,nl):new Vu(t.shape,Gu),this.compileAndRun(e,[t])}relu6(t){let e;return e=Object(x.env)().getBool("WEBGL_PACK")?new al(t.shape,rl):new Vu(t.shape,Hu),this.compileAndRun(e,[t])}prelu(t,e){const n=Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new mo(fo,t.shape,e.shape):new po(ho,t.shape,e.shape);return this.compileAndRun(n,[t,e])}elu(t){if(Object(x.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,sl,t.dtype);const e=new Vu(t.shape,qu);return this.compileAndRun(e,[t])}eluDer(t,e){const n=Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new mo("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new po("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}selu(t){const e=new Vu(t.shape,Ku);return this.compileAndRun(e,[t])}int(t){const e=new Vu(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")}clip(t,e,n){let r;r=Object(x.env)().getBool("WEBGL_PACK_CLIP")?new bo(t.shape):new go(t.shape);const s=r.getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,s)}abs(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(Object(x.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Uu,t.dtype);const e=new Vu(t.shape,Uu);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new yo(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)}sigmoid(t){const e=new Vu(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new Vu(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}sin(t){const e=new Vu(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])}cos(t){const e=new Vu(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])}tan(t){const e=new Vu(t.shape,"return tan(x);");return this.compileAndRun(e,[t])}asin(t){const e=new Vu(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new Vu(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new Vu(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}atan2(t,e){const n=Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new mo("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new po("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}sinh(t){const e=new Vu(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new Vu(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new Vu(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new Vu(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new Vu(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new Vu(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new Vu(t.shape,tl);return this.compileAndRun(e,[t])}step(t,e){const n=new Vu(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,n,r,s,a){const i=t.shape,o=this.texData.get(t.dataId),u=n.inChannels,l=i[0]*i[1]*i[2],c=n.outChannels,h="channelsLast"===n.dataFormat,d=(1===l||1===c)&&u>1e3,p=i[2]%2!=0&&!!o.isPacked;if(d||!Object(x.env)().getBool("WEBGL_LAZILY_UNPACK")||!Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!p){const o=h?i[0]*i[1]*i[2]:i[0]*i[2]*i[3],u=this.reshape(t,[1,o,n.inChannels]),l=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:u,b:l,transposeA:false,transposeB:false,bias:r,activation:s,preluActivationWeights:a}),n.outShape)}const f=h?i[0]*i[1]*(i[2]+1):i[0]*i[2]*(i[3]+1),m={dataId:t.dataId,shape:[1,f,n.inChannels],dtype:t.dtype},g=o.shape;o.shape=o.shape.slice(),o.shape[o.shape.length-2]++,x.util.assert(ki(o.shape,m.shape),()=>`packed reshape ${o.shape} to ${m.shape} isn't free`);const b=this.reshape(e,[1,n.inChannels,n.outChannels]),y=this.fusedBatchMatMul({a:m,b:b,transposeA:false,transposeB:false,bias:r,activation:s,preluActivationWeights:a}),w=this.texData.get(y.dataId);return x.util.assert(w.isPacked,()=>"batchMatMul result is expected to be packed"),o.shape=g,w.shape=n.outShape,Object(x.engine)().makeTensorFromDataId(y.dataId,n.outShape,y.dtype)}conv2dWithIm2Row(t,e,n,r,s,a){const{filterWidth:i,filterHeight:o,inChannels:u,outWidth:l,outHeight:c,dataFormat:h}=n,d="channelsLast"===h,p=i*o*u,f=c*l,m=[p,f],g=t.squeeze([0]),b=e.reshape([1,p,-1]),y=new uu(m,g.shape,n),x=this.compileAndRun(y,[g]).reshape([1,m[0],m[1]]),w=null!=r,v=null!=a,O=s?pl(s,!0):null,k=new fu(x.shape,[1,f,n.outChannels],!0,!1,w,O,v),S=[x,b];r&&S.push(r),v&&S.push(a);const C=this.compileAndRun(k,S);return d?C.reshape([1,c,l,n.outChannels]):C.reshape([1,n.outChannels,c,l])}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n,r,s,a);if(Object(x.env)().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n,r,s,a);const i=null!=r,o=null!=a,u=s?pl(s,!1):null,l=new Ao(n,i,u,o),c=[t,e];return r&&c.push(r),a&&c.push(a),this.compileAndRun(l,c)}conv2d(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(Object(x.env)().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);const r=new Ao(n);return this.compileAndRun(r,[t,e])}conv2dDerInput(t,e,n){const r=new ko(n);return this.compileAndRun(r,[t,e])}conv2dDerFilter(t,e,n){const r=new Oo(n);return this.compileAndRun(r,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){const i=Object(x.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,o=s?pl(s,i):null,u=[t,e],l=null!=r,c=null!=a;let h;return l&&u.push(r),c&&u.push(a),i?(h=new Ro(n,l,o,c),this.compileAndRun(h,u)):(h=new To(n,l,o,c),this.compileAndRun(h,u))}depthwiseConv2D(t,e,n){let r;return Object(x.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new Ro(n),this.compileAndRun(r,[t,e])):(r=new To(n),this.compileAndRun(r,[t,e]))}depthwiseConv2DDerInput(t,e,n){const r=new Io(n);return this.compileAndRun(r,[t,e])}depthwiseConv2DDerFilter(t,e,n){const r=new No(n);return this.compileAndRun(r,[t,e])}conv3d(t,e,n){const r=new Eo(n);return this.compileAndRun(r,[t,e])}conv3dDerInput(t,e,n){const r=new Co(n);return this.compileAndRun(r,[t,e])}conv3dDerFilter(t,e,n){const r=new So(n);return this.compileAndRun(r,[t,e])}maxPool(t,e){const n=new wu(e,"max",!1);return this.compileAndRun(n,[t])}avgPool(t,e){const n=new wu(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}maxPoolBackprop(t,e,n,r){const s=new wu(r,"max",!0),a=this.compileAndRun(s,[e]),i=new du(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}avgPoolBackprop(t,e,n){const r=new eo(n);return this.compileAndRun(r,[t],e.dtype)}cast(t,e){return x.backend_util.castTensor(t,e,this)}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}avgPool3d(t,e){const n=new vu(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const r=new no(n);return this.compileAndRun(r,[t],e.dtype)}maxPool3d(t,e){const n=new vu(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,r){const s=new vu(r,"max",!0),a=this.compileAndRun(s,[e]),i=new pu(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}reshape(t,e){const n=this.texData.get(t.dataId);if(n.isPacked&&!ki(t.shape,e)&&(null===n.texture||!ki(n.shape,e))){const n=this.packedReshape(t,e);return Object(x.engine)().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}return x.backend_util.reshapeTensor(t,e)}resizeBilinear(t,e,n,r){const s=Object(x.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Nu(t.shape,e,n,r):new Cu(t.shape,e,n,r);return this.compileAndRun(s,[t],"float32")}resizeBilinearBackprop(t,e,n){const r=new Su(t,e,n);return this.compileAndRun(r,[t])}resizeNearestNeighbor(t,e,n,r){const s=new Au(t.shape,e,n,r);return this.compileAndRun(s,[t])}resizeNearestNeighborBackprop(t,e,n){const r=new Iu(t,e,n);return this.compileAndRun(r,[t])}multinomial(t,e,n,r){const s=e?t:Object(x.softmax)(t),a=s.shape[0],i=s.shape[1],o=new mu(a,i,n),u=o.getCustomSetupFunc(r);return this.compileAndRun(o,[s],"int32",u)}oneHot(t,e,n,r){const s=new gu(t.size,e,n,r);return this.compileAndRun(s,[t])}diag(t){const e=new Lo(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,r,s,a){const i=new $o(t.shape,e.shape,r,s,a);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){x.util.assert(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],s="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],o=s*e,u=a*e,l=i/(e*e),c=new zo("NHWC"===n?[r,o,u,l]:[r,l,o,u],e,n);return this.compileAndRun(c,[t])}split(t,e,n){return ul(t,e,n)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=x.backend_util.calculateShapes(e,t,n),u=[o/a,a],l=t.reshape([s,r]),c=e.reshape([s,a]);if(0===o)return x.backend_util.reshapeTensor(Object(x.tensor)([]),n);const h=Object(x.scalar)(0),d=new Ru(s,r,l.rank,c.rank,i,u);return this.compileAndRun(d,[c,l,h]).reshape(n)}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,strides:i,outputSize:o}=x.backend_util.calculateShapes(e,t,n),u=new Ru(a,s,t.rank,e.rank,i,[o,1],!1);return this.compileAndRun(u,[e,t,r]).reshape(n)}fft(t){return this.fftImpl(t,!1)}ifft(t){return this.fftImpl(t,!0)}fftImpl(t,e){const n=this.texData.get(t.dataId),r=new Ho(Uo,t.shape,e),s=new Ho(Go,t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,a),o=this.compileAndRun(s,a),u=this.complex(i,o).as2D(t.shape[0],t.shape[1]);return i.dispose(),o.dispose(),u}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=x.backend_util.prepareAndValidate(t,e),u=e.reshape([a,r]),l=t.reshape([t.size/i,i]),c=new Xo(r,o,[a,i]);return this.compileAndRun(c,[l,u]).reshape(s)}fill(t,e,n){if("string"===(n=n||x.util.inferDtype(e))){const r=x.util.getArrayFromDType(n,x.util.sizeFromShape(t));return r.fill(e),Object(x.engine)().makeTensor(r,t,n,this)}{const r=new qo(t,e),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[],n,s)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return x.backend_util.linspaceImpl(t,e,n)}makeTensorInfo(t,e){const n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e){const{dataId:n}=this.makeTensorInfo(t,e);return Object(x.engine)().makeTensorFromDataId(n,t,e,this)}unpackTensor(t){const e=new il(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new bu(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[xi(t.shape),...wi(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},s=[xi(e),...wi(e)],a=new ku(s,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:s}=e,a=vi(r);let i;i=n?new Mo(a):new Fo(a);return{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:t}],s,null,!0).dataId}}runWebGLProgram(t,e,n,r,s=!1){const a=this.makeTensorInfo(t.outputShape,n),i=this.texData.get(a.dataId);if(t.packedOutput&&(i.isPacked=!0),t.outPackingScheme===Qa.DENSE){const e=ri(t.outputShape);i.texShape=e.map(t=>2*t)}if(null!=t.outTexUsage&&(i.usage=t.outTexUsage),0===x.util.sizeFromShape(a.shape))return i.values=x.util.getTypedArrayFromDType(a.dtype,0),a;const o=[],u=e.map(e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&x.util.sizeFromShape(e.shape)<=Object(x.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),o.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!ki(n.shape,e.shape)){const t=e,r=e.shape;e.shape=n.shape,e=this.packedReshape(e,r),o.push(e),n=this.texData.get(e.dataId),t.shape=r}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}});this.uploadToGPU(a.dataId);const l={shape:a.shape,texData:i,isUniform:!1},c=function(t,e,n){let r="";e.concat(n).forEach(t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${n}_${e}`});const s=t.userCode;let a=t.constructor.name;return a+="_"+r+"_"+s,a}(t,u,l),h=this.getAndSaveBinary(c,()=>function(t,e,n,r){const s=e.userCode,a=n.map((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}}),i=a.map(t=>t.shapeInfo),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=Pi(a,o,s,e.packedInputs),l=t.createProgram(u);let c=null;const h=t.getUniformLocation(l,"NAN",!1);1===Object(x.env)().getNumber("WEBGL_VERSION")&&(c=t.getUniformLocation(l,"INFINITY",!1));const d={};for(let n=0;n<e.variableNames.length;n++){const r=e.variableNames[n],s=!1;d[r]=t.getUniformLocation(l,r,s),d["offset"+r]=t.getUniformLocation(l,"offset"+r,s)}return{program:e,source:u,webGLProgram:l,uniformLocations:d,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,t,u,l)),d=null!=this.activeTimers;let p;if(d&&(p=this.startTimer()),function(t,e,n,r,s){ou(e.inShapeInfos,n),ou([e.outShapeInfo],[r]);const a=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(a,i[0],i[1]):t.setOutputMatrixTexture(a,i[0],i[1]),t.setProgram(e.webGLProgram),1===Object(x.env)().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((n,r)=>{const s=e.program.variableNames[r],a=e.uniformLocations[s],i=e.uniformLocations["offset"+s];if(null!=a)if(n.isUniform)if(x.util.sizeFromShape(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(a,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)}),null!=s&&s(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,h,u,l,r),o.forEach(t=>this.disposeData(t.dataId)),d&&(p=this.endTimer(p),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(p)})),!Object(x.env)().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const t=this.unpackTensor(a);return this.disposeData(a.dataId),t}return a}compileAndRun(t,e,n,r,s=!1){n=n||e[0].dtype;const a=this.runWebGLProgram(t,e,n,r,s);return Object(x.engine)().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!Object(x.env)().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Object(x.tidy)(()=>{if(!Object(x.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=Object(x.env)().getBool("DEBUG");Object(x.env)().set("DEBUG",!1);const e=this.abs(Object(x.scalar)(1e-8)).dataSync()[0];if(Object(x.env)().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:r,values:s,texture:a,usage:i,isPacked:o}=e;if(null!=a)return;const u=null!=this.activeTimers;let l;u&&(l=x.util.now());let c=e.texShape;if(null==c&&(c=function(t,e=!1){let n=Object(x.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map((e,n)=>n>=t.length-2?x.util.nearestLargerEven(t[n]):t[n])).length&&(t=[2,t[0]])),2!==t.length){const e=x.util.squeezeShape(t);t=e.newShape}let r=x.util.sizeFromShape(t);if(t.length<=1&&r<=n)return[1,r];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=xi(t);let n=2,s=2;return t.length&&([n,s]=wi(t)),r=e*(n/2)*(s/2),x.util.sizeToSquarishShape(r).map(t=>2*t)}return x.util.sizeToSquarishShape(r)}(n,o),e.texShape=c),null!=s){const t=vi(n);let a,i=c[1],h=c[0];const d=s instanceof Uint8Array;o?([i,h]=si(c[0],c[1]),a=new Vo(t,[h,i],d)):a=new Wo(t,[h,i],d);const p=this.makeTensorInfo([h,i],r);this.texData.get(p.dataId).usage=d?ti.PIXELS:ti.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(p.dataId),i,h,s);const f=!0,m=this.runWebGLProgram(a,[p],r,null,f),g=this.texData.get(m.dataId);e.texture=g.texture,e.texShape=g.texShape,e.isPacked=g.isPacked,e.usage=g.usage,this.disposeData(p.dataId),this.texData.delete(m.dataId),e.values=null,u&&(this.uploadWaitMs+=x.util.now()-l)}else{const t=this.acquireTexture(c,i,r,o);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*x.util.bytesPerElement(e)}}x.device_util.isBrowser()&&Object(x.registerBackend)("webgl",()=>new fl,2);const ml={kernelName:x.Div,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:n,b:r}=t;return function(t,e,n){let r=new po("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape);return Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&(r=new mo("\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",t.shape,e.shape,!0)),n.runWebGLProgram(r,[t,e],"float32")}(n,r,e)}};class gl{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const bl={kernelName:x.FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{image:n}=t,r=e,s=new gl(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}};class yl{constructor(t){this.variableNames=["A"];const e=Fi(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class xl{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=Fi(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const wl={kernelName:x.FromPixels,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t;let{pixels:s}=e;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,l]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[l,u],h=[l,u,a];(o||i)&&(null==vl&&(vl=document.createElement("canvas").getContext("2d")),vl.canvas.width=u,vl.canvas.height=l,vl.drawImage(s,0,0,u,l),s=vl.canvas);const d=n.makeTensorInfo(c,"int32");n.texData.get(d.dataId).usage=ti.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),s);const p=Object(x.env)().getBool("WEBGL_PACK")?new xl(h):new yl(h),f=n.runWebGLProgram(p,[d],"int32");return n.disposeData(d.dataId),f}};let vl;const{maxImpl:Ol,transposeImpl:kl}=r;function Sl(t,e,n,r){const[s,a]=t.shape,i=x.backend_util.computeOptimalWindowSize(a),o=new Ou({windowSize:i,inSize:a,batchSize:s},n),u=r.runWebGLProgram(o,[t],e);return 1===u.shape[1]?u:Sl(u,e,n,r)}function Cl(t,e,n){const r=n.texData.get(t.dataId);return!r.isPacked||ki(t.shape,e)||null!==r.texture&&ki(r.shape,e)?{dataId:t.dataId,shape:e,dtype:t.dtype}:function(t,e,n){const r=[xi(t.shape),...wi(t.shape)],s={dtype:t.dtype,shape:r,dataId:t.dataId},a=[xi(e),...wi(e)],i=new ku(a,r),o=n.runWebGLProgram(i,[s],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}(t,e,n)}function Nl(t,e,n,r){const s=x.util.sizeFromShape(e),a=Cl(t,[x.util.sizeFromShape(t.shape)/s,s],r),i=Sl(a,t.dtype,"max",r);return a.dataId!==t.dataId&&r.disposeData(a.dataId),Cl(i,n,r)}class Il{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const r=Ji(this.rank),s=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let e=0;e<t.length;e++)r[t[e]]=n[e];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class Al{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Ji(this.rank),s=Di("rc",this.rank),a=new Array(this.rank);for(let t=0;t<e.length;t++)a[e[t]]=s[t];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function El(t,e,n){const r=Object(x.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Al(t.shape,e):new Il(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}const Tl={kernelName:x.Max,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n,o=r.shape.length,u=x.util.parseAxisParam(s,r.shape);let l=u;const c=x.backend_util.getAxesPermutation(l,o),h=null!=c,d=i.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const t=i.texData.get(p.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=r.shape[c[t]];const n=kl(t,r.shape,r.dtype,c,e);p=i.makeTensorInfo(e,r.dtype);i.texData.get(p.dataId).values=n}else p=El(r,c,i);l=x.backend_util.getInnerMostAxes(l.length,o)}x.backend_util.assertAxesAreInnerMostDims("max",l,o);const[f,m]=x.backend_util.computeOutAndReduceShapes(p.shape,l);let g,b=f;if(a&&(b=x.backend_util.expandShapeToKeepDim(f,u)),d){const t=i.texData.get(p.dataId).values,e=Ol(t,x.util.sizeFromShape(m),b,r.dtype);g=i.makeTensorInfo(b,r.dtype);i.texData.get(g.dataId).values=e}else g=Nl(p,m,b,i);return h&&i.disposeData(p.dataId),g}};const Rl={kernelName:x.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,u=n;x.util.assert(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const l=[1,1];x.util.assert(x.backend_util.eitherStridesOrDilationsAreOne(a,l),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`);const c=x.backend_util.computePool2DInfo(r.shape,s,a,l,i),[h,d]=function(t,e,n,r){let s=new wu(n,"max",!1);const a=r.runWebGLProgram(s,[t],"float32");return s=new wu(n,"max",!0,!0,e),[a,r.runWebGLProgram(s,[t],"float32")]}(r,o,c,u);return[h,d]}},$l={kernelName:x.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{x.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=n,u=e,l=u.readSync(r.dataId),c=u.readSync(s.dataId),h=a,d=i,p=o;return x.kernel_impls.nonMaxSuppressionV3Impl(l,c,h,d,p)}},jl=x.kernel_impls.nonMaxSuppressionV4Impl,Dl={kernelName:x.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{x.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:u}=n,l=e,c=l.readSync(r.dataId),h=l.readSync(s.dataId),{selectedIndices:d,validOutputs:p}=jl(c,h,a,i,o,u);return[d,p]}},_l=x.kernel_impls.nonMaxSuppressionV5Impl,Fl={kernelName:x.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{x.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=n,l=e,c=l.readSync(r.dataId),h=l.readSync(s.dataId),d=a,p=i,f=o,m=u,{selectedIndices:g,selectedScores:b}=_l(c,h,d,p,f,m);return[g,b]}};class Ml{constructor(t,e,n,r){this.variableNames=["Image"],this.outputShape=[];const s=t[1],a=t[2],i=Math.sin(e).toFixed(3),o=Math.cos(e).toFixed(3);this.outputShape=t;const[u,l]=x.backend_util.getImageCenter(r,s,a),c=u.toFixed(3),h=l.toFixed(3);let d="";d="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${d}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const zl=[Tl,bl,wl,ml,Rl,$l,Dl,Fl,{kernelName:x.RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,u=new Ml(r.shape,s,a,i);return o.runWebGLProgram(u,[r],r.dtype)}},{kernelName:x.Square,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e,s=new Vu(n.shape,"return x * x;");return r.runWebGLProgram(s,[n],n.dtype)}},{kernelName:x.SquaredDifference,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:n,b:r}=t,s="return (a - b) * (a - b);",a=e,i=Object(x.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new mo(s,n.shape,r.shape):new po(s,n.shape,r.shape);return a.compileAndRun(i,[n,r])}},{kernelName:x.Transpose,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n,i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];let u;if(a.shouldExecuteOnCPU([r])){const t=a.texData.get(r.dataId).values,e=kl(t,r.shape,r.dtype,s,o);u=a.makeTensorInfo(o,r.dtype);a.texData.get(u.dataId).values=e}else u=El(r,s,a);return u}}];for(const t of zl)Object(x.registerKernel)(t);x.version_core;function Ll(t,e,n,r){return new(n||(n=Promise))((function(s,a){function i(t){try{u(r.next(t))}catch(t){a(t)}}function o(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?s(t.value):new n((function(e){e(t.value)})).then(i,o)}u((r=r.apply(t,e||[])).next())}))}function Bl(t,e){var n,r,s,a,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(s=(s=i.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i)}catch(t){a=[6,t],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}}var Pl={0:"tench, Tinca tinca",1:"goldfish, Carassius auratus",2:"great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias",3:"tiger shark, Galeocerdo cuvieri",4:"hammerhead, hammerhead shark",5:"electric ray, crampfish, numbfish, torpedo",6:"stingray",7:"cock",8:"hen",9:"ostrich, Struthio camelus",10:"brambling, Fringilla montifringilla",11:"goldfinch, Carduelis carduelis",12:"house finch, linnet, Carpodacus mexicanus",13:"junco, snowbird",14:"indigo bunting, indigo finch, indigo bird, Passerina cyanea",15:"robin, American robin, Turdus migratorius",16:"bulbul",17:"jay",18:"magpie",19:"chickadee",20:"water ouzel, dipper",21:"kite",22:"bald eagle, American eagle, Haliaeetus leucocephalus",23:"vulture",24:"great grey owl, great gray owl, Strix nebulosa",25:"European fire salamander, Salamandra salamandra",26:"common newt, Triturus vulgaris",27:"eft",28:"spotted salamander, Ambystoma maculatum",29:"axolotl, mud puppy, Ambystoma mexicanum",30:"bullfrog, Rana catesbeiana",31:"tree frog, tree-frog",32:"tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui",33:"loggerhead, loggerhead turtle, Caretta caretta",34:"leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea",35:"mud turtle",36:"terrapin",37:"box turtle, box tortoise",38:"banded gecko",39:"common iguana, iguana, Iguana iguana",40:"American chameleon, anole, Anolis carolinensis",41:"whiptail, whiptail lizard",42:"agama",43:"frilled lizard, Chlamydosaurus kingi",44:"alligator lizard",45:"Gila monster, Heloderma suspectum",46:"green lizard, Lacerta viridis",47:"African chameleon, Chamaeleo chamaeleon",48:"Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis",49:"African crocodile, Nile crocodile, Crocodylus niloticus",50:"American alligator, Alligator mississipiensis",51:"triceratops",52:"thunder snake, worm snake, Carphophis amoenus",53:"ringneck snake, ring-necked snake, ring snake",54:"hognose snake, puff adder, sand viper",55:"green snake, grass snake",56:"king snake, kingsnake",57:"garter snake, grass snake",58:"water snake",59:"vine snake",60:"night snake, Hypsiglena torquata",61:"boa constrictor, Constrictor constrictor",62:"rock python, rock snake, Python sebae",63:"Indian cobra, Naja naja",64:"green mamba",65:"sea snake",66:"horned viper, cerastes, sand viper, horned asp, Cerastes cornutus",67:"diamondback, diamondback rattlesnake, Crotalus adamanteus",68:"sidewinder, horned rattlesnake, Crotalus cerastes",69:"trilobite",70:"harvestman, daddy longlegs, Phalangium opilio",71:"scorpion",72:"black and gold garden spider, Argiope aurantia",73:"barn spider, Araneus cavaticus",74:"garden spider, Aranea diademata",75:"black widow, Latrodectus mactans",76:"tarantula",77:"wolf spider, hunting spider",78:"tick",79:"centipede",80:"black grouse",81:"ptarmigan",82:"ruffed grouse, partridge, Bonasa umbellus",83:"prairie chicken, prairie grouse, prairie fowl",84:"peacock",85:"quail",86:"partridge",87:"African grey, African gray, Psittacus erithacus",88:"macaw",89:"sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita",90:"lorikeet",91:"coucal",92:"bee eater",93:"hornbill",94:"hummingbird",95:"jacamar",96:"toucan",97:"drake",98:"red-breasted merganser, Mergus serrator",99:"goose",100:"black swan, Cygnus atratus",101:"tusker",102:"echidna, spiny anteater, anteater",103:"platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus",104:"wallaby, brush kangaroo",105:"koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus",106:"wombat",107:"jelly fish",108:"sea anemone, anemone",109:"brain coral",110:"flatworm, platyhelminth",111:"nematode, nematode worm, roundworm",112:"conch",113:"snail",114:"slug",115:"sea slug, nudibranch",116:"chiton, coat-of-mail shell, sea cradle, polyplacophore",117:"chambered nautilus, pearly nautilus, nautilus",118:"Dungeness crab, Cancer magister",119:"rock crab, Cancer irroratus",120:"fiddler crab",121:"king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica",122:"American lobster, Northern lobster, Maine lobster, Homarus americanus",123:"spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish",124:"crayfish, crawfish, crawdad, crawdaddy",125:"hermit crab",126:"isopod",127:"white stork, Ciconia ciconia",128:"black stork, Ciconia nigra",129:"spoonbill",130:"flamingo",131:"little blue heron, Egretta caerulea",132:"American egret, great white heron, Egretta albus",133:"bittern",134:"crane",135:"limpkin, Aramus pictus",136:"European gallinule, Porphyrio porphyrio",137:"American coot, marsh hen, mud hen, water hen, Fulica americana",138:"bustard",139:"ruddy turnstone, Arenaria interpres",140:"red-backed sandpiper, dunlin, Erolia alpina",141:"redshank, Tringa totanus",142:"dowitcher",143:"oystercatcher, oyster catcher",144:"pelican",145:"king penguin, Aptenodytes patagonica",146:"albatross, mollymawk",147:"grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus",148:"killer whale, killer, orca, grampus, sea wolf, Orcinus orca",149:"dugong, Dugong dugon",150:"sea lion",151:"Chihuahua",152:"Japanese spaniel",153:"Maltese dog, Maltese terrier, Maltese",154:"Pekinese, Pekingese, Peke",155:"Shih-Tzu",156:"Blenheim spaniel",157:"papillon",158:"toy terrier",159:"Rhodesian ridgeback",160:"Afghan hound, Afghan",161:"basset, basset hound",162:"beagle",163:"bloodhound, sleuthhound",164:"bluetick",165:"black-and-tan coonhound",166:"Walker hound, Walker foxhound",167:"English foxhound",168:"redbone",169:"borzoi, Russian wolfhound",170:"Irish wolfhound",171:"Italian greyhound",172:"whippet",173:"Ibizan hound, Ibizan Podenco",174:"Norwegian elkhound, elkhound",175:"otterhound, otter hound",176:"Saluki, gazelle hound",177:"Scottish deerhound, deerhound",178:"Weimaraner",179:"Staffordshire bullterrier, Staffordshire bull terrier",180:"American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier",181:"Bedlington terrier",182:"Border terrier",183:"Kerry blue terrier",184:"Irish terrier",185:"Norfolk terrier",186:"Norwich terrier",187:"Yorkshire terrier",188:"wire-haired fox terrier",189:"Lakeland terrier",190:"Sealyham terrier, Sealyham",191:"Airedale, Airedale terrier",192:"cairn, cairn terrier",193:"Australian terrier",194:"Dandie Dinmont, Dandie Dinmont terrier",195:"Boston bull, Boston terrier",196:"miniature schnauzer",197:"giant schnauzer",198:"standard schnauzer",199:"Scotch terrier, Scottish terrier, Scottie",200:"Tibetan terrier, chrysanthemum dog",201:"silky terrier, Sydney silky",202:"soft-coated wheaten terrier",203:"West Highland white terrier",204:"Lhasa, Lhasa apso",205:"flat-coated retriever",206:"curly-coated retriever",207:"golden retriever",208:"Labrador retriever",209:"Chesapeake Bay retriever",210:"German short-haired pointer",211:"vizsla, Hungarian pointer",212:"English setter",213:"Irish setter, red setter",214:"Gordon setter",215:"Brittany spaniel",216:"clumber, clumber spaniel",217:"English springer, English springer spaniel",218:"Welsh springer spaniel",219:"cocker spaniel, English cocker spaniel, cocker",220:"Sussex spaniel",221:"Irish water spaniel",222:"kuvasz",223:"schipperke",224:"groenendael",225:"malinois",226:"briard",227:"kelpie",228:"komondor",229:"Old English sheepdog, bobtail",230:"Shetland sheepdog, Shetland sheep dog, Shetland",231:"collie",232:"Border collie",233:"Bouvier des Flandres, Bouviers des Flandres",234:"Rottweiler",235:"German shepherd, German shepherd dog, German police dog, alsatian",236:"Doberman, Doberman pinscher",237:"miniature pinscher",238:"Greater Swiss Mountain dog",239:"Bernese mountain dog",240:"Appenzeller",241:"EntleBucher",242:"boxer",243:"bull mastiff",244:"Tibetan mastiff",245:"French bulldog",246:"Great Dane",247:"Saint Bernard, St Bernard",248:"Eskimo dog, husky",249:"malamute, malemute, Alaskan malamute",250:"Siberian husky",251:"dalmatian, coach dog, carriage dog",252:"affenpinscher, monkey pinscher, monkey dog",253:"basenji",254:"pug, pug-dog",255:"Leonberg",256:"Newfoundland, Newfoundland dog",257:"Great Pyrenees",258:"Samoyed, Samoyede",259:"Pomeranian",260:"chow, chow chow",261:"keeshond",262:"Brabancon griffon",263:"Pembroke, Pembroke Welsh corgi",264:"Cardigan, Cardigan Welsh corgi",265:"toy poodle",266:"miniature poodle",267:"standard poodle",268:"Mexican hairless",269:"timber wolf, grey wolf, gray wolf, Canis lupus",270:"white wolf, Arctic wolf, Canis lupus tundrarum",271:"red wolf, maned wolf, Canis rufus, Canis niger",272:"coyote, prairie wolf, brush wolf, Canis latrans",273:"dingo, warrigal, warragal, Canis dingo",274:"dhole, Cuon alpinus",275:"African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus",276:"hyena, hyaena",277:"red fox, Vulpes vulpes",278:"kit fox, Vulpes macrotis",279:"Arctic fox, white fox, Alopex lagopus",280:"grey fox, gray fox, Urocyon cinereoargenteus",281:"tabby, tabby cat",282:"tiger cat",283:"Persian cat",284:"Siamese cat, Siamese",285:"Egyptian cat",286:"cougar, puma, catamount, mountain lion, painter, panther, Felis concolor",287:"lynx, catamount",288:"leopard, Panthera pardus",289:"snow leopard, ounce, Panthera uncia",290:"jaguar, panther, Panthera onca, Felis onca",291:"lion, king of beasts, Panthera leo",292:"tiger, Panthera tigris",293:"cheetah, chetah, Acinonyx jubatus",294:"brown bear, bruin, Ursus arctos",295:"American black bear, black bear, Ursus americanus, Euarctos americanus",296:"ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus",297:"sloth bear, Melursus ursinus, Ursus ursinus",298:"mongoose",299:"meerkat, mierkat",300:"tiger beetle",301:"ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle",302:"ground beetle, carabid beetle",303:"long-horned beetle, longicorn, longicorn beetle",304:"leaf beetle, chrysomelid",305:"dung beetle",306:"rhinoceros beetle",307:"weevil",308:"fly",309:"bee",310:"ant, emmet, pismire",311:"grasshopper, hopper",312:"cricket",313:"walking stick, walkingstick, stick insect",314:"cockroach, roach",315:"mantis, mantid",316:"cicada, cicala",317:"leafhopper",318:"lacewing, lacewing fly",319:"dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk",320:"damselfly",321:"admiral",322:"ringlet, ringlet butterfly",323:"monarch, monarch butterfly, milkweed butterfly, Danaus plexippus",324:"cabbage butterfly",325:"sulphur butterfly, sulfur butterfly",326:"lycaenid, lycaenid butterfly",327:"starfish, sea star",328:"sea urchin",329:"sea cucumber, holothurian",330:"wood rabbit, cottontail, cottontail rabbit",331:"hare",332:"Angora, Angora rabbit",333:"hamster",334:"porcupine, hedgehog",335:"fox squirrel, eastern fox squirrel, Sciurus niger",336:"marmot",337:"beaver",338:"guinea pig, Cavia cobaya",339:"sorrel",340:"zebra",341:"hog, pig, grunter, squealer, Sus scrofa",342:"wild boar, boar, Sus scrofa",343:"warthog",344:"hippopotamus, hippo, river horse, Hippopotamus amphibius",345:"ox",346:"water buffalo, water ox, Asiatic buffalo, Bubalus bubalis",347:"bison",348:"ram, tup",349:"bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis",350:"ibex, Capra ibex",351:"hartebeest",352:"impala, Aepyceros melampus",353:"gazelle",354:"Arabian camel, dromedary, Camelus dromedarius",355:"llama",356:"weasel",357:"mink",358:"polecat, fitch, foulmart, foumart, Mustela putorius",359:"black-footed ferret, ferret, Mustela nigripes",360:"otter",361:"skunk, polecat, wood pussy",362:"badger",363:"armadillo",364:"three-toed sloth, ai, Bradypus tridactylus",365:"orangutan, orang, orangutang, Pongo pygmaeus",366:"gorilla, Gorilla gorilla",367:"chimpanzee, chimp, Pan troglodytes",368:"gibbon, Hylobates lar",369:"siamang, Hylobates syndactylus, Symphalangus syndactylus",370:"guenon, guenon monkey",371:"patas, hussar monkey, Erythrocebus patas",372:"baboon",373:"macaque",374:"langur",375:"colobus, colobus monkey",376:"proboscis monkey, Nasalis larvatus",377:"marmoset",378:"capuchin, ringtail, Cebus capucinus",379:"howler monkey, howler",380:"titi, titi monkey",381:"spider monkey, Ateles geoffroyi",382:"squirrel monkey, Saimiri sciureus",383:"Madagascar cat, ring-tailed lemur, Lemur catta",384:"indri, indris, Indri indri, Indri brevicaudatus",385:"Indian elephant, Elephas maximus",386:"African elephant, Loxodonta africana",387:"lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens",388:"giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca",389:"barracouta, snoek",390:"eel",391:"coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch",392:"rock beauty, Holocanthus tricolor",393:"anemone fish",394:"sturgeon",395:"gar, garfish, garpike, billfish, Lepisosteus osseus",396:"lionfish",397:"puffer, pufferfish, blowfish, globefish",398:"abacus",399:"abaya",400:"academic gown, academic robe, judge's robe",401:"accordion, piano accordion, squeeze box",402:"acoustic guitar",403:"aircraft carrier, carrier, flattop, attack aircraft carrier",404:"airliner",405:"airship, dirigible",406:"altar",407:"ambulance",408:"amphibian, amphibious vehicle",409:"analog clock",410:"apiary, bee house",411:"apron",412:"ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin",413:"assault rifle, assault gun",414:"backpack, back pack, knapsack, packsack, rucksack, haversack",415:"bakery, bakeshop, bakehouse",416:"balance beam, beam",417:"balloon",418:"ballpoint, ballpoint pen, ballpen, Biro",419:"Band Aid",420:"banjo",421:"bannister, banister, balustrade, balusters, handrail",422:"barbell",423:"barber chair",424:"barbershop",425:"barn",426:"barometer",427:"barrel, cask",428:"barrow, garden cart, lawn cart, wheelbarrow",429:"baseball",430:"basketball",431:"bassinet",432:"bassoon",433:"bathing cap, swimming cap",434:"bath towel",435:"bathtub, bathing tub, bath, tub",436:"beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon",437:"beacon, lighthouse, beacon light, pharos",438:"beaker",439:"bearskin, busby, shako",440:"beer bottle",441:"beer glass",442:"bell cote, bell cot",443:"bib",444:"bicycle-built-for-two, tandem bicycle, tandem",445:"bikini, two-piece",446:"binder, ring-binder",447:"binoculars, field glasses, opera glasses",448:"birdhouse",449:"boathouse",450:"bobsled, bobsleigh, bob",451:"bolo tie, bolo, bola tie, bola",452:"bonnet, poke bonnet",453:"bookcase",454:"bookshop, bookstore, bookstall",455:"bottlecap",456:"bow",457:"bow tie, bow-tie, bowtie",458:"brass, memorial tablet, plaque",459:"brassiere, bra, bandeau",460:"breakwater, groin, groyne, mole, bulwark, seawall, jetty",461:"breastplate, aegis, egis",462:"broom",463:"bucket, pail",464:"buckle",465:"bulletproof vest",466:"bullet train, bullet",467:"butcher shop, meat market",468:"cab, hack, taxi, taxicab",469:"caldron, cauldron",470:"candle, taper, wax light",471:"cannon",472:"canoe",473:"can opener, tin opener",474:"cardigan",475:"car mirror",476:"carousel, carrousel, merry-go-round, roundabout, whirligig",477:"carpenter's kit, tool kit",478:"carton",479:"car wheel",480:"cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM",481:"cassette",482:"cassette player",483:"castle",484:"catamaran",485:"CD player",486:"cello, violoncello",487:"cellular telephone, cellular phone, cellphone, cell, mobile phone",488:"chain",489:"chainlink fence",490:"chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour",491:"chain saw, chainsaw",492:"chest",493:"chiffonier, commode",494:"chime, bell, gong",495:"china cabinet, china closet",496:"Christmas stocking",497:"church, church building",498:"cinema, movie theater, movie theatre, movie house, picture palace",499:"cleaver, meat cleaver, chopper",500:"cliff dwelling",501:"cloak",502:"clog, geta, patten, sabot",503:"cocktail shaker",504:"coffee mug",505:"coffeepot",506:"coil, spiral, volute, whorl, helix",507:"combination lock",508:"computer keyboard, keypad",509:"confectionery, confectionary, candy store",510:"container ship, containership, container vessel",511:"convertible",512:"corkscrew, bottle screw",513:"cornet, horn, trumpet, trump",514:"cowboy boot",515:"cowboy hat, ten-gallon hat",516:"cradle",517:"crane",518:"crash helmet",519:"crate",520:"crib, cot",521:"Crock Pot",522:"croquet ball",523:"crutch",524:"cuirass",525:"dam, dike, dyke",526:"desk",527:"desktop computer",528:"dial telephone, dial phone",529:"diaper, nappy, napkin",530:"digital clock",531:"digital watch",532:"dining table, board",533:"dishrag, dishcloth",534:"dishwasher, dish washer, dishwashing machine",535:"disk brake, disc brake",536:"dock, dockage, docking facility",537:"dogsled, dog sled, dog sleigh",538:"dome",539:"doormat, welcome mat",540:"drilling platform, offshore rig",541:"drum, membranophone, tympan",542:"drumstick",543:"dumbbell",544:"Dutch oven",545:"electric fan, blower",546:"electric guitar",547:"electric locomotive",548:"entertainment center",549:"envelope",550:"espresso maker",551:"face powder",552:"feather boa, boa",553:"file, file cabinet, filing cabinet",554:"fireboat",555:"fire engine, fire truck",556:"fire screen, fireguard",557:"flagpole, flagstaff",558:"flute, transverse flute",559:"folding chair",560:"football helmet",561:"forklift",562:"fountain",563:"fountain pen",564:"four-poster",565:"freight car",566:"French horn, horn",567:"frying pan, frypan, skillet",568:"fur coat",569:"garbage truck, dustcart",570:"gasmask, respirator, gas helmet",571:"gas pump, gasoline pump, petrol pump, island dispenser",572:"goblet",573:"go-kart",574:"golf ball",575:"golfcart, golf cart",576:"gondola",577:"gong, tam-tam",578:"gown",579:"grand piano, grand",580:"greenhouse, nursery, glasshouse",581:"grille, radiator grille",582:"grocery store, grocery, food market, market",583:"guillotine",584:"hair slide",585:"hair spray",586:"half track",587:"hammer",588:"hamper",589:"hand blower, blow dryer, blow drier, hair dryer, hair drier",590:"hand-held computer, hand-held microcomputer",591:"handkerchief, hankie, hanky, hankey",592:"hard disc, hard disk, fixed disk",593:"harmonica, mouth organ, harp, mouth harp",594:"harp",595:"harvester, reaper",596:"hatchet",597:"holster",598:"home theater, home theatre",599:"honeycomb",600:"hook, claw",601:"hoopskirt, crinoline",602:"horizontal bar, high bar",603:"horse cart, horse-cart",604:"hourglass",605:"iPod",606:"iron, smoothing iron",607:"jack-o'-lantern",608:"jean, blue jean, denim",609:"jeep, landrover",610:"jersey, T-shirt, tee shirt",611:"jigsaw puzzle",612:"jinrikisha, ricksha, rickshaw",613:"joystick",614:"kimono",615:"knee pad",616:"knot",617:"lab coat, laboratory coat",618:"ladle",619:"lampshade, lamp shade",620:"laptop, laptop computer",621:"lawn mower, mower",622:"lens cap, lens cover",623:"letter opener, paper knife, paperknife",624:"library",625:"lifeboat",626:"lighter, light, igniter, ignitor",627:"limousine, limo",628:"liner, ocean liner",629:"lipstick, lip rouge",630:"Loafer",631:"lotion",632:"loudspeaker, speaker, speaker unit, loudspeaker system, speaker system",633:"loupe, jeweler's loupe",634:"lumbermill, sawmill",635:"magnetic compass",636:"mailbag, postbag",637:"mailbox, letter box",638:"maillot",639:"maillot, tank suit",640:"manhole cover",641:"maraca",642:"marimba, xylophone",643:"mask",644:"matchstick",645:"maypole",646:"maze, labyrinth",647:"measuring cup",648:"medicine chest, medicine cabinet",649:"megalith, megalithic structure",650:"microphone, mike",651:"microwave, microwave oven",652:"military uniform",653:"milk can",654:"minibus",655:"miniskirt, mini",656:"minivan",657:"missile",658:"mitten",659:"mixing bowl",660:"mobile home, manufactured home",661:"Model T",662:"modem",663:"monastery",664:"monitor",665:"moped",666:"mortar",667:"mortarboard",668:"mosque",669:"mosquito net",670:"motor scooter, scooter",671:"mountain bike, all-terrain bike, off-roader",672:"mountain tent",673:"mouse, computer mouse",674:"mousetrap",675:"moving van",676:"muzzle",677:"nail",678:"neck brace",679:"necklace",680:"nipple",681:"notebook, notebook computer",682:"obelisk",683:"oboe, hautboy, hautbois",684:"ocarina, sweet potato",685:"odometer, hodometer, mileometer, milometer",686:"oil filter",687:"organ, pipe organ",688:"oscilloscope, scope, cathode-ray oscilloscope, CRO",689:"overskirt",690:"oxcart",691:"oxygen mask",692:"packet",693:"paddle, boat paddle",694:"paddlewheel, paddle wheel",695:"padlock",696:"paintbrush",697:"pajama, pyjama, pj's, jammies",698:"palace",699:"panpipe, pandean pipe, syrinx",700:"paper towel",701:"parachute, chute",702:"parallel bars, bars",703:"park bench",704:"parking meter",705:"passenger car, coach, carriage",706:"patio, terrace",707:"pay-phone, pay-station",708:"pedestal, plinth, footstall",709:"pencil box, pencil case",710:"pencil sharpener",711:"perfume, essence",712:"Petri dish",713:"photocopier",714:"pick, plectrum, plectron",715:"pickelhaube",716:"picket fence, paling",717:"pickup, pickup truck",718:"pier",719:"piggy bank, penny bank",720:"pill bottle",721:"pillow",722:"ping-pong ball",723:"pinwheel",724:"pirate, pirate ship",725:"pitcher, ewer",726:"plane, carpenter's plane, woodworking plane",727:"planetarium",728:"plastic bag",729:"plate rack",730:"plow, plough",731:"plunger, plumber's helper",732:"Polaroid camera, Polaroid Land camera",733:"pole",734:"police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria",735:"poncho",736:"pool table, billiard table, snooker table",737:"pop bottle, soda bottle",738:"pot, flowerpot",739:"potter's wheel",740:"power drill",741:"prayer rug, prayer mat",742:"printer",743:"prison, prison house",744:"projectile, missile",745:"projector",746:"puck, hockey puck",747:"punching bag, punch bag, punching ball, punchball",748:"purse",749:"quill, quill pen",750:"quilt, comforter, comfort, puff",751:"racer, race car, racing car",752:"racket, racquet",753:"radiator",754:"radio, wireless",755:"radio telescope, radio reflector",756:"rain barrel",757:"recreational vehicle, RV, R.V.",758:"reel",759:"reflex camera",760:"refrigerator, icebox",761:"remote control, remote",762:"restaurant, eating house, eating place, eatery",763:"revolver, six-gun, six-shooter",764:"rifle",765:"rocking chair, rocker",766:"rotisserie",767:"rubber eraser, rubber, pencil eraser",768:"rugby ball",769:"rule, ruler",770:"running shoe",771:"safe",772:"safety pin",773:"saltshaker, salt shaker",774:"sandal",775:"sarong",776:"sax, saxophone",777:"scabbard",778:"scale, weighing machine",779:"school bus",780:"schooner",781:"scoreboard",782:"screen, CRT screen",783:"screw",784:"screwdriver",785:"seat belt, seatbelt",786:"sewing machine",787:"shield, buckler",788:"shoe shop, shoe-shop, shoe store",789:"shoji",790:"shopping basket",791:"shopping cart",792:"shovel",793:"shower cap",794:"shower curtain",795:"ski",796:"ski mask",797:"sleeping bag",798:"slide rule, slipstick",799:"sliding door",800:"slot, one-armed bandit",801:"snorkel",802:"snowmobile",803:"snowplow, snowplough",804:"soap dispenser",805:"soccer ball",806:"sock",807:"solar dish, solar collector, solar furnace",808:"sombrero",809:"soup bowl",810:"space bar",811:"space heater",812:"space shuttle",813:"spatula",814:"speedboat",815:"spider web, spider's web",816:"spindle",817:"sports car, sport car",818:"spotlight, spot",819:"stage",820:"steam locomotive",821:"steel arch bridge",822:"steel drum",823:"stethoscope",824:"stole",825:"stone wall",826:"stopwatch, stop watch",827:"stove",828:"strainer",829:"streetcar, tram, tramcar, trolley, trolley car",830:"stretcher",831:"studio couch, day bed",832:"stupa, tope",833:"submarine, pigboat, sub, U-boat",834:"suit, suit of clothes",835:"sundial",836:"sunglass",837:"sunglasses, dark glasses, shades",838:"sunscreen, sunblock, sun blocker",839:"suspension bridge",840:"swab, swob, mop",841:"sweatshirt",842:"swimming trunks, bathing trunks",843:"swing",844:"switch, electric switch, electrical switch",845:"syringe",846:"table lamp",847:"tank, army tank, armored combat vehicle, armoured combat vehicle",848:"tape player",849:"teapot",850:"teddy, teddy bear",851:"television, television system",852:"tennis ball",853:"thatch, thatched roof",854:"theater curtain, theatre curtain",855:"thimble",856:"thresher, thrasher, threshing machine",857:"throne",858:"tile roof",859:"toaster",860:"tobacco shop, tobacconist shop, tobacconist",861:"toilet seat",862:"torch",863:"totem pole",864:"tow truck, tow car, wrecker",865:"toyshop",866:"tractor",867:"trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi",868:"tray",869:"trench coat",870:"tricycle, trike, velocipede",871:"trimaran",872:"tripod",873:"triumphal arch",874:"trolleybus, trolley coach, trackless trolley",875:"trombone",876:"tub, vat",877:"turnstile",878:"typewriter keyboard",879:"umbrella",880:"unicycle, monocycle",881:"upright, upright piano",882:"vacuum, vacuum cleaner",883:"vase",884:"vault",885:"velvet",886:"vending machine",887:"vestment",888:"viaduct",889:"violin, fiddle",890:"volleyball",891:"waffle iron",892:"wall clock",893:"wallet, billfold, notecase, pocketbook",894:"wardrobe, closet, press",895:"warplane, military plane",896:"washbasin, handbasin, washbowl, lavabo, wash-hand basin",897:"washer, automatic washer, washing machine",898:"water bottle",899:"water jug",900:"water tower",901:"whiskey jug",902:"whistle",903:"wig",904:"window screen",905:"window shade",906:"Windsor tie",907:"wine bottle",908:"wing",909:"wok",910:"wooden spoon",911:"wool, woolen, woollen",912:"worm fence, snake fence, snake-rail fence, Virginia fence",913:"wreck",914:"yawl",915:"yurt",916:"web site, website, internet site, site",917:"comic book",918:"crossword puzzle, crossword",919:"street sign",920:"traffic light, traffic signal, stoplight",921:"book jacket, dust cover, dust jacket, dust wrapper",922:"menu",923:"plate",924:"guacamole",925:"consomme",926:"hot pot, hotpot",927:"trifle",928:"ice cream, icecream",929:"ice lolly, lolly, lollipop, popsicle",930:"French loaf",931:"bagel, beigel",932:"pretzel",933:"cheeseburger",934:"hotdog, hot dog, red hot",935:"mashed potato",936:"head cabbage",937:"broccoli",938:"cauliflower",939:"zucchini, courgette",940:"spaghetti squash",941:"acorn squash",942:"butternut squash",943:"cucumber, cuke",944:"artichoke, globe artichoke",945:"bell pepper",946:"cardoon",947:"mushroom",948:"Granny Smith",949:"strawberry",950:"orange",951:"lemon",952:"fig",953:"pineapple, ananas",954:"banana",955:"jackfruit, jak, jack",956:"custard apple",957:"pomegranate",958:"hay",959:"carbonara",960:"chocolate sauce, chocolate syrup",961:"dough",962:"meat loaf, meatloaf",963:"pizza, pizza pie",964:"potpie",965:"burrito",966:"red wine",967:"espresso",968:"cup",969:"eggnog",970:"alp",971:"bubble",972:"cliff, drop, drop-off",973:"coral reef",974:"geyser",975:"lakeside, lakeshore",976:"promontory, headland, head, foreland",977:"sandbar, sand bar",978:"seashore, coast, seacoast, sea-coast",979:"valley, vale",980:"volcano",981:"ballplayer, baseball player",982:"groom, bridegroom",983:"scuba diver",984:"rapeseed",985:"daisy",986:"yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum",987:"corn",988:"acorn",989:"hip, rose hip, rosehip",990:"buckeye, horse chestnut, conker",991:"coral fungus",992:"agaric",993:"gyromitra",994:"stinkhorn, carrion fungus",995:"earthstar",996:"hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa",997:"bolete",998:"ear, spike, capitulum",999:"toilet tissue, toilet paper, bathroom tissue"},Wl=224,Vl={"1.00":"module_apply_default/MobilenetV1/Logits/global_pool","2.00":"module_apply_default/MobilenetV2/Logits/AvgPool"},Ul={"1.00":{.25:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_025_224/classification/1",inputRange:[0,1]},"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_050_224/classification/1",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_075_224/classification/1",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/classification/1",inputRange:[0,1]}},"2.00":{"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_050_224/classification/2",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_075_224/classification/2",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2",inputRange:[0,1]}}};var Gl=function(){function t(t,e,n,r,s){void 0===r&&(r=-1),void 0===s&&(s=1),this.version=t,this.alpha=e,this.modelUrl=n,this.inputMin=r,this.inputMax=s,this.normalizationConstant=(s-r)/255}return t.prototype.load=function(){return Ll(this,void 0,void 0,(function(){var t,e,n,r,s=this;return Bl(this,(function(a){switch(a.label){case 0:return this.modelUrl?(t=this,[4,da(this.modelUrl)]):[3,2];case 1:return t.model=a.sent(),[3,4];case 2:return e=Ul[this.version][this.alpha].url,n=this,[4,da(e,{fromTFHub:!0})];case 3:n.model=a.sent(),a.label=4;case 4:return[4,(r=Object(x.tidy)((function(){return s.model.predict(Object(x.zeros)([1,Wl,Wl,3]))}))).data()];case 5:return a.sent(),r.dispose(),[2]}}))}))},t.prototype.infer=function(t,e){var n=this;return void 0===e&&(e=!1),Object(x.tidy)((function(){t instanceof x.Tensor||(t=x.browser.fromPixels(t));var r=t.toFloat().mul(n.normalizationConstant).add(n.inputMin),s=r;t.shape[0]===Wl&&t.shape[1]===Wl||(s=x.image.resizeBilinear(r,[Wl,Wl],!0));var a,i=s.reshape([-1,Wl,Wl,3]);if(e){var o=Vl[n.version];a=n.model.execute(i,o).squeeze([1,2])}else a=n.model.predict(i).slice([0,1],[-1,1e3]);return a}))},t.prototype.classify=function(t,e){return void 0===e&&(e=3),Ll(this,void 0,void 0,(function(){var n,r;return Bl(this,(function(s){switch(s.label){case 0:return[4,Hl(n=this.infer(t),e)];case 1:return r=s.sent(),n.dispose(),[2,r]}}))}))},t}();function Hl(t,e){return Ll(this,void 0,void 0,(function(){var n,r,s,a,i,o,u;return Bl(this,(function(l){switch(l.label){case 0:return[4,(n=t.softmax()).data()];case 1:for(r=l.sent(),n.dispose(),s=[],u=0;u<r.length;u++)s.push({value:r[u],index:u});for(s.sort((function(t,e){return e.value-t.value})),a=new Float32Array(e),i=new Int32Array(e),u=0;u<e;u++)a[u]=s[u].value,i[u]=s[u].index;for(o=[],u=0;u<i.length;u++)o.push({className:Pl[i[u]],probability:a[u]});return[2,o]}}))}))}let ql;async function Kl(){ql=function(t){return void 0===t&&(t={version:1,alpha:1}),Ll(this,void 0,void 0,(function(){var e,n,r,s,a,i,o;return Bl(this,(function(u){switch(u.label){case 0:if(null==x)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this model.");if(r=t.version.toFixed(2),s=t.alpha?t.alpha.toFixed(2):"",a=-1,i=1,null==t.modelUrl){if(!(r in Ul))throw new Error("Invalid version of MobileNet. Valid versions are: "+Object.keys(Ul));if(!(s in Ul[r]))throw new Error("MobileNet constructed with invalid alpha "+t.alpha+". Valid multipliers for this version are: "+Object.keys(Ul[r])+".");e=Ul[r][s].inputRange,a=e[0],i=e[1]}return null!=t.inputRange&&(n=t.inputRange,a=n[0],i=n[1]),[4,(o=new Gl(r,s,t.modelUrl,a,i)).load()];case 1:return u.sent(),[2,o]}}))}))}(),await ql}async function Xl(t,e,n){const r=await fetch(t),s=await r.blob(),a=await createImageBitmap(s),i=new OffscreenCanvas(e,n),o=i.getContext("2d");if(!o)throw new Error("Couldn't create image");o.drawImage(a,0,0),ql||await Kl();const u=await ql,[l]=await u.classify(i);return l.className.split(",")[0]}n.d(e,"preloadModel",(function(){return Kl})),n.d(e,"getDogBreed",(function(){return Xl})),c(Object.keys(e).reduce((function(t,n){return"__esModule"==n||(t[n]=e[n]),t}),{}))}]);
//# sourceMappingURL=b221940f2bbc7bcc5a70.worker.js.map